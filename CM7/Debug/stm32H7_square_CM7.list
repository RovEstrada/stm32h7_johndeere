
stm32H7_square_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d1c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  08008fbc  08008fbc  00018fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095dc  080095dc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080095dc  080095dc  000195dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095e4  080095e4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095e4  080095e4  000195e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095e8  080095e8  000195e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  24000000  080095ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  24000080  08009668  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240003c8  08009668  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f69  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a10  00000000  00000000  00039013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  0003ba28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001368  00000000  00000000  0003ce88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b24e  00000000  00000000  0003e1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018520  00000000  00000000  0007943e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018938e  00000000  00000000  0009195e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021acec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c38  00000000  00000000  0021ad3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008fa4 	.word	0x08008fa4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08008fa4 	.word	0x08008fa4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f002 fa27 	bl	8002c70 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fa1e 	bl	8002c70 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	240000ac 	.word	0x240000ac
 8000840:	240000b0 	.word	0x240000b0

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f002 fa07 	bl	8002c70 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f002 f9fe 	bl	8002c70 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	240000ac 	.word	0x240000ac
 8000880:	240000b2 	.word	0x240000b2

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f004 feac 	bl	8005604 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f005 f896 	bl	80059e8 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	240000b4 	.word	0x240000b4

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f004 fe81 	bl	8005604 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f005 f86c 	bl	80059e8 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	240000b4 	.word	0x240000b4

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f004 fe57 	bl	8005604 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	240000b4 	.word	0x240000b4

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f004 fe37 	bl	8005604 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f004 fe30 	bl	8005604 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	240000b4 	.word	0x240000b4

080009b8 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80009c4:	f000 fa0a 	bl	8000ddc <NRF24_getPayloadSize>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d303      	bcc.n	80009da <NRF24_read_payload+0x22>
 80009d2:	f000 fa03 	bl	8000ddc <NRF24_getPayloadSize>
 80009d6:	4603      	mov	r3, r0
 80009d8:	e000      	b.n	80009dc <NRF24_read_payload+0x24>
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff10 	bl	8000804 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80009e4:	2361      	movs	r3, #97	; 0x61
 80009e6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80009e8:	f107 010e 	add.w	r1, r7, #14
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <NRF24_read_payload+0x5c>)
 80009f2:	f004 fe07 	bl	8005604 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <NRF24_read_payload+0x5c>)
 8000a00:	f004 fff2 	bl	80059e8 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fefd 	bl	8000804 <NRF24_csn>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	240000b4 	.word	0x240000b4

08000a18 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a1c:	21ff      	movs	r1, #255	; 0xff
 8000a1e:	20e1      	movs	r0, #225	; 0xe1
 8000a20:	f7ff ff80 	bl	8000924 <NRF24_write_register>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a2c:	21ff      	movs	r1, #255	; 0xff
 8000a2e:	20e2      	movs	r0, #226	; 0xe2
 8000a30:	f7ff ff78 	bl	8000924 <NRF24_write_register>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff ff20 	bl	8000884 <NRF24_read_register>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000a54:	b082      	sub	sp, #8
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
 8000a64:	4613      	mov	r3, r2
 8000a66:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000a68:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <NRF24_begin+0x1b0>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2288      	movs	r2, #136	; 0x88
 8000a72:	4619      	mov	r1, r3
 8000a74:	f007 fe20 	bl	80086b8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000a78:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <NRF24_begin+0x1b4>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a7e:	4a63      	ldr	r2, [pc, #396]	; (8000c0c <NRF24_begin+0x1b8>)
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a84:	4a62      	ldr	r2, [pc, #392]	; (8000c10 <NRF24_begin+0x1bc>)
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff feba 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fed7 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f001 fe26 	bl	80026e8 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff40 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000aa4:	213f      	movs	r1, #63	; 0x3f
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff3c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000aac:	2103      	movs	r1, #3
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff ff38 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000abc:	2103      	movs	r1, #3
 8000abe:	2004      	movs	r0, #4
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000acc:	210f      	movs	r1, #15
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff ff24 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f7ff ff20 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2009      	movs	r0, #9
 8000ae8:	f7ff ff1c 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000aec:	23e7      	movs	r3, #231	; 0xe7
 8000aee:	733b      	strb	r3, [r7, #12]
 8000af0:	23e7      	movs	r3, #231	; 0xe7
 8000af2:	72fb      	strb	r3, [r7, #11]
 8000af4:	23e7      	movs	r3, #231	; 0xe7
 8000af6:	72bb      	strb	r3, [r7, #10]
 8000af8:	23e7      	movs	r3, #231	; 0xe7
 8000afa:	727b      	strb	r3, [r7, #9]
 8000afc:	23e7      	movs	r3, #231	; 0xe7
 8000afe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2205      	movs	r2, #5
 8000b06:	4619      	mov	r1, r3
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f7ff ff2d 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000b0e:	23c2      	movs	r3, #194	; 0xc2
 8000b10:	733b      	strb	r3, [r7, #12]
 8000b12:	23c2      	movs	r3, #194	; 0xc2
 8000b14:	72fb      	strb	r3, [r7, #11]
 8000b16:	23c2      	movs	r3, #194	; 0xc2
 8000b18:	72bb      	strb	r3, [r7, #10]
 8000b1a:	23c2      	movs	r3, #194	; 0xc2
 8000b1c:	727b      	strb	r3, [r7, #9]
 8000b1e:	23c2      	movs	r3, #194	; 0xc2
 8000b20:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2205      	movs	r2, #5
 8000b28:	4619      	mov	r1, r3
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f7ff ff1c 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b30:	21c3      	movs	r1, #195	; 0xc3
 8000b32:	200c      	movs	r0, #12
 8000b34:	f7ff fef6 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b38:	21c4      	movs	r1, #196	; 0xc4
 8000b3a:	200d      	movs	r0, #13
 8000b3c:	f7ff fef2 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b40:	21c5      	movs	r1, #197	; 0xc5
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff feee 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b48:	21c6      	movs	r1, #198	; 0xc6
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff feea 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000b50:	23e7      	movs	r3, #231	; 0xe7
 8000b52:	733b      	strb	r3, [r7, #12]
 8000b54:	23e7      	movs	r3, #231	; 0xe7
 8000b56:	72fb      	strb	r3, [r7, #11]
 8000b58:	23e7      	movs	r3, #231	; 0xe7
 8000b5a:	72bb      	strb	r3, [r7, #10]
 8000b5c:	23e7      	movs	r3, #231	; 0xe7
 8000b5e:	727b      	strb	r3, [r7, #9]
 8000b60:	23e7      	movs	r3, #231	; 0xe7
 8000b62:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2205      	movs	r2, #5
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2010      	movs	r0, #16
 8000b6e:	f7ff fefb 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2011      	movs	r0, #17
 8000b76:	f7ff fed5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f7ff fed1 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2013      	movs	r0, #19
 8000b86:	f7ff fecd 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2014      	movs	r0, #20
 8000b8e:	f7ff fec9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2015      	movs	r0, #21
 8000b96:	f7ff fec5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2016      	movs	r0, #22
 8000b9e:	f7ff fec1 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000ba2:	f000 fa4b 	bl	800103c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	201c      	movs	r0, #28
 8000baa:	f7ff febb 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f7ff feb7 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000bb6:	f000 fa5b 	bl	8001070 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000bba:	210f      	movs	r1, #15
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	f000 f8c5 	bl	8000d4c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f000 f94b 	bl	8000e5e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f981 	bl	8000ed0 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 f9c4 	bl	8000f5c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000bd4:	f000 f916 	bl	8000e04 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f000 f8e7 	bl	8000dac <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000bde:	f000 fa24 	bl	800102a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000be2:	204c      	movs	r0, #76	; 0x4c
 8000be4:	f000 f8cd 	bl	8000d82 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000be8:	f7ff ff16 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bec:	f7ff ff1c 	bl	8000a28 <NRF24_flush_rx>

	NRF24_powerDown();
 8000bf0:	f000 f9dc 	bl	8000fac <NRF24_powerDown>

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfe:	b002      	add	sp, #8
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	240000b4 	.word	0x240000b4
 8000c08:	240000ac 	.word	0x240000ac
 8000c0c:	240000b0 	.word	0x240000b0
 8000c10:	240000b2 	.word	0x240000b2

08000c14 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe33 	bl	8000884 <NRF24_read_register>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f043 0303 	orr.w	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fe7b 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <NRF24_startListening+0x48>)
 8000c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	d004      	beq.n	8000c42 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c38:	2205      	movs	r2, #5
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <NRF24_startListening+0x48>)
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f7ff fe93 	bl	8000968 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000c42:	f7ff fee9 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c46:	f7ff feef 	bl	8000a28 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdfa 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000c50:	2096      	movs	r0, #150	; 0x96
 8000c52:	f7ff fdb5 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	240000a0 	.word	0x240000a0

08000c60 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 f9b0 	bl	8000fca <NRF24_availablePipe>
 8000c6a:	4603      	mov	r3, r0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe99 	bl	80009b8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c86:	2017      	movs	r0, #23
 8000c88:	f7ff fdfc 	bl	8000884 <NRF24_read_register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000c94:	f7ff fec8 	bl	8000a28 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000c98:	f000 f8ac 	bl	8000df4 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	e9c7 2300 	strd	r2, r3, [r7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cca:	491c      	ldr	r1, [pc, #112]	; (8000d3c <NRF24_openReadingPipe+0x8c>)
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d82d      	bhi.n	8000d32 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d808      	bhi.n	8000cee <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe3e 	bl	8000968 <NRF24_write_registerN>
 8000cec:	e007      	b.n	8000cfe <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe35 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <NRF24_openReadingPipe+0x94>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <NRF24_openReadingPipe+0x98>)
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe0a 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fdb7 	bl	8000884 <NRF24_read_register>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	}

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	240000a0 	.word	0x240000a0
 8000d40:	08009510 	.word	0x08009510
 8000d44:	08009518 	.word	0x08009518
 8000d48:	240000a8 	.word	0x240000a8

08000d4c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff fdd5 	bl	8000924 <NRF24_write_register>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d8c:	237f      	movs	r3, #127	; 0x7f
 8000d8e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	bf28      	it	cs
 8000d98:	4613      	movcs	r3, r2
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f7ff fdc0 	bl	8000924 <NRF24_write_register>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000db6:	2320      	movs	r3, #32
 8000db8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bf28      	it	cs
 8000dc2:	4613      	movcs	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <NRF24_setPayloadSize+0x2c>)
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	240000a8 	.word	0x240000a8

08000ddc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return payload_size;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <NRF24_getPayloadSize+0x14>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	240000a8 	.word	0x240000a8

08000df4 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000df8:	2060      	movs	r0, #96	; 0x60
 8000dfa:	f7ff fd43 	bl	8000884 <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000e08:	201d      	movs	r0, #29
 8000e0a:	f7ff fd3b 	bl	8000884 <NRF24_read_register>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f023 0304 	bic.w	r3, r3, #4
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f7ff fd83 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000e1e:	2100      	movs	r1, #0
 8000e20:	201c      	movs	r0, #28
 8000e22:	f7ff fd7f 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000e26:	4b02      	ldr	r3, [pc, #8]	; (8000e30 <NRF24_disableDynamicPayloads+0x2c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	240000a9 	.word	0x240000a9

08000e34 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000e44:	213f      	movs	r1, #63	; 0x3f
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff fd6c 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000e4c:	e003      	b.n	8000e56 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2001      	movs	r0, #1
 8000e52:	f7ff fd67 	bl	8000924 <NRF24_write_register>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000e68:	2006      	movs	r0, #6
 8000e6a:	f7ff fd0b 	bl	8000884 <NRF24_read_register>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	f023 0306 	bic.w	r3, r3, #6
 8000e78:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d104      	bne.n	8000e8a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	f043 0306 	orr.w	r3, r3, #6
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e019      	b.n	8000ebe <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d104      	bne.n	8000e9a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e011      	b.n	8000ebe <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d104      	bne.n	8000eaa <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	e009      	b.n	8000ebe <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d103      	bne.n	8000ebe <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	f043 0306 	orr.w	r3, r3, #6
 8000ebc:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	2006      	movs	r0, #6
 8000ec4:	f7ff fd2e 	bl	8000924 <NRF24_write_register>
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000eda:	2300      	movs	r3, #0
 8000edc:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000ede:	2006      	movs	r0, #6
 8000ee0:	f7ff fcd0 	bl	8000884 <NRF24_read_register>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000eee:	7bbb      	ldrb	r3, [r7, #14]
 8000ef0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000ef4:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d107      	bne.n	8000f0c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	f043 0320 	orr.w	r3, r3, #32
 8000f08:	73bb      	strb	r3, [r7, #14]
 8000f0a:	e00d      	b.n	8000f28 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d107      	bne.n	8000f22 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000f18:	7bbb      	ldrb	r3, [r7, #14]
 8000f1a:	f043 0308 	orr.w	r3, r3, #8
 8000f1e:	73bb      	strb	r3, [r7, #14]
 8000f20:	e002      	b.n	8000f28 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	2006      	movs	r0, #6
 8000f2e:	f7ff fcf9 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000f32:	2006      	movs	r0, #6
 8000f34:	f7ff fca6 	bl	8000884 <NRF24_read_register>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	7bbb      	ldrb	r3, [r7, #14]
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d102      	bne.n	8000f48 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000f42:	2301      	movs	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	e002      	b.n	8000f4e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <NRF24_setDataRate+0x88>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	240000aa 	.word	0x240000aa

08000f5c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff fc8c 	bl	8000884 <NRF24_read_register>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f023 030c 	bic.w	r3, r3, #12
 8000f72:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00f      	beq.n	8000f9a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d104      	bne.n	8000f8a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	f043 0308 	orr.w	r3, r3, #8
 8000f86:	73fb      	strb	r3, [r7, #15]
 8000f88:	e007      	b.n	8000f9a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff fcc0 	bl	8000924 <NRF24_write_register>
}
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff fc67 	bl	8000884 <NRF24_read_register>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f023 0302 	bic.w	r3, r3, #2
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f7ff fcaf 	bl	8000924 <NRF24_write_register>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000fd2:	f7ff fd31 	bl	8000a38 <NRF24_get_status>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	bf14      	ite	ne
 8000fe4:	2301      	movne	r3, #1
 8000fe6:	2300      	moveq	r3, #0
 8000fe8:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d017      	beq.n	8001020 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d007      	beq.n	8001006 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	085b      	lsrs	r3, r3, #1
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	b2da      	uxtb	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001006:	2140      	movs	r1, #64	; 0x40
 8001008:	2007      	movs	r0, #7
 800100a:	f7ff fc8b 	bl	8000924 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	f003 0320 	and.w	r3, r3, #32
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001018:	2120      	movs	r1, #32
 800101a:	2007      	movs	r0, #7
 800101c:	f7ff fc82 	bl	8000924 <NRF24_write_register>
    }
  }
  return result;
 8001020:	7bbb      	ldrb	r3, [r7, #14]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800102e:	2170      	movs	r1, #112	; 0x70
 8001030:	2007      	movs	r0, #7
 8001032:	f7ff fc77 	bl	8000924 <NRF24_write_register>
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff fbde 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001048:	2350      	movs	r3, #80	; 0x50
 800104a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800104c:	2373      	movs	r3, #115	; 0x73
 800104e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001050:	1d39      	adds	r1, r7, #4
 8001052:	2364      	movs	r3, #100	; 0x64
 8001054:	2202      	movs	r2, #2
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <NRF24_ACTIVATE_cmd+0x30>)
 8001058:	f004 fad4 	bl	8005604 <HAL_SPI_Transmit>
	NRF24_csn(1);
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff fbd1 	bl	8000804 <NRF24_csn>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	240000b4 	.word	0x240000b4

08001070 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001072:	b0a1      	sub	sp, #132	; 0x84
 8001074:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	49c3      	ldr	r1, [pc, #780]	; (8001388 <printRadioSettings+0x318>)
 800107c:	4618      	mov	r0, r3
 800107e:	f007 fb31 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f92a 	bl	80002e0 <strlen>
 800108c:	4603      	mov	r3, r0
 800108e:	b29a      	uxth	r2, r3
 8001090:	f107 0108 	add.w	r1, r7, #8
 8001094:	230a      	movs	r3, #10
 8001096:	48bd      	ldr	r0, [pc, #756]	; (800138c <printRadioSettings+0x31c>)
 8001098:	f006 fa2e 	bl	80074f8 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff fbf1 	bl	8000884 <NRF24_read_register>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80010a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d013      	beq.n	80010dc <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80010b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <printRadioSettings+0x5e>
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	49b2      	ldr	r1, [pc, #712]	; (8001390 <printRadioSettings+0x320>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	f007 fb0c 	bl	80086e4 <siprintf>
 80010cc:	e00c      	b.n	80010e8 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	49b0      	ldr	r1, [pc, #704]	; (8001394 <printRadioSettings+0x324>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f007 fb05 	bl	80086e4 <siprintf>
 80010da:	e005      	b.n	80010e8 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	49ad      	ldr	r1, [pc, #692]	; (8001398 <printRadioSettings+0x328>)
 80010e2:	4618      	mov	r0, r3
 80010e4:	f007 fafe 	bl	80086e4 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f8f7 	bl	80002e0 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f107 0108 	add.w	r1, r7, #8
 80010fa:	230a      	movs	r3, #10
 80010fc:	48a3      	ldr	r0, [pc, #652]	; (800138c <printRadioSettings+0x31c>)
 80010fe:	f006 f9fb 	bl	80074f8 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001102:	2001      	movs	r0, #1
 8001104:	f7ff fbbe 	bl	8000884 <NRF24_read_register>
 8001108:	4603      	mov	r3, r0
 800110a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800110e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001112:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001116:	2b00      	cmp	r3, #0
 8001118:	bfcc      	ite	gt
 800111a:	2301      	movgt	r3, #1
 800111c:	2300      	movle	r3, #0
 800111e:	b2db      	uxtb	r3, r3
 8001120:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001122:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001126:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800112a:	2b00      	cmp	r3, #0
 800112c:	bfcc      	ite	gt
 800112e:	2301      	movgt	r3, #1
 8001130:	2300      	movle	r3, #0
 8001132:	b2db      	uxtb	r3, r3
 8001134:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001136:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800113a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800113e:	2b00      	cmp	r3, #0
 8001140:	bfcc      	ite	gt
 8001142:	2301      	movgt	r3, #1
 8001144:	2300      	movle	r3, #0
 8001146:	b2db      	uxtb	r3, r3
 8001148:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800114a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800114e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001152:	2b00      	cmp	r3, #0
 8001154:	bfcc      	ite	gt
 8001156:	2301      	movgt	r3, #1
 8001158:	2300      	movle	r3, #0
 800115a:	b2db      	uxtb	r3, r3
 800115c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800115e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001162:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001166:	2b00      	cmp	r3, #0
 8001168:	bfcc      	ite	gt
 800116a:	2301      	movgt	r3, #1
 800116c:	2300      	movle	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001172:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001176:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800117a:	2b00      	cmp	r3, #0
 800117c:	bfcc      	ite	gt
 800117e:	2301      	movgt	r3, #1
 8001180:	2300      	movle	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f107 0008 	add.w	r0, r7, #8
 8001188:	9303      	str	r3, [sp, #12]
 800118a:	9402      	str	r4, [sp, #8]
 800118c:	9101      	str	r1, [sp, #4]
 800118e:	9200      	str	r2, [sp, #0]
 8001190:	4633      	mov	r3, r6
 8001192:	462a      	mov	r2, r5
 8001194:	4981      	ldr	r1, [pc, #516]	; (800139c <printRadioSettings+0x32c>)
 8001196:	f007 faa5 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f89e 	bl	80002e0 <strlen>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	f107 0108 	add.w	r1, r7, #8
 80011ac:	230a      	movs	r3, #10
 80011ae:	4877      	ldr	r0, [pc, #476]	; (800138c <printRadioSettings+0x31c>)
 80011b0:	f006 f9a2 	bl	80074f8 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80011b4:	2002      	movs	r0, #2
 80011b6:	f7ff fb65 	bl	8000884 <NRF24_read_register>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011c4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bfcc      	ite	gt
 80011cc:	2301      	movgt	r3, #1
 80011ce:	2300      	movle	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011d8:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011dc:	2b00      	cmp	r3, #0
 80011de:	bfcc      	ite	gt
 80011e0:	2301      	movgt	r3, #1
 80011e2:	2300      	movle	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011ec:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bfcc      	ite	gt
 80011f4:	2301      	movgt	r3, #1
 80011f6:	2300      	movle	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001200:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001204:	2b00      	cmp	r3, #0
 8001206:	bfcc      	ite	gt
 8001208:	2301      	movgt	r3, #1
 800120a:	2300      	movle	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001210:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001214:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001218:	2b00      	cmp	r3, #0
 800121a:	bfcc      	ite	gt
 800121c:	2301      	movgt	r3, #1
 800121e:	2300      	movle	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001224:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001228:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800122c:	2b00      	cmp	r3, #0
 800122e:	bfcc      	ite	gt
 8001230:	2301      	movgt	r3, #1
 8001232:	2300      	movle	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f107 0008 	add.w	r0, r7, #8
 800123a:	9303      	str	r3, [sp, #12]
 800123c:	9402      	str	r4, [sp, #8]
 800123e:	9101      	str	r1, [sp, #4]
 8001240:	9200      	str	r2, [sp, #0]
 8001242:	4633      	mov	r3, r6
 8001244:	462a      	mov	r2, r5
 8001246:	4956      	ldr	r1, [pc, #344]	; (80013a0 <printRadioSettings+0x330>)
 8001248:	f007 fa4c 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f845 	bl	80002e0 <strlen>
 8001256:	4603      	mov	r3, r0
 8001258:	b29a      	uxth	r2, r3
 800125a:	f107 0108 	add.w	r1, r7, #8
 800125e:	230a      	movs	r3, #10
 8001260:	484a      	ldr	r0, [pc, #296]	; (800138c <printRadioSettings+0x31c>)
 8001262:	f006 f949 	bl	80074f8 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001266:	2003      	movs	r0, #3
 8001268:	f7ff fb0c 	bl	8000884 <NRF24_read_register>
 800126c:	4603      	mov	r3, r0
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001276:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800127a:	3302      	adds	r3, #2
 800127c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001280:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	4946      	ldr	r1, [pc, #280]	; (80013a4 <printRadioSettings+0x334>)
 800128a:	4618      	mov	r0, r3
 800128c:	f007 fa2a 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f823 	bl	80002e0 <strlen>
 800129a:	4603      	mov	r3, r0
 800129c:	b29a      	uxth	r2, r3
 800129e:	f107 0108 	add.w	r1, r7, #8
 80012a2:	230a      	movs	r3, #10
 80012a4:	4839      	ldr	r0, [pc, #228]	; (800138c <printRadioSettings+0x31c>)
 80012a6:	f006 f927 	bl	80074f8 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80012aa:	2005      	movs	r0, #5
 80012ac:	f7ff faea 	bl	8000884 <NRF24_read_register>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80012b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	4939      	ldr	r1, [pc, #228]	; (80013a8 <printRadioSettings+0x338>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f007 fa0d 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f806 	bl	80002e0 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	f107 0108 	add.w	r1, r7, #8
 80012dc:	230a      	movs	r3, #10
 80012de:	482b      	ldr	r0, [pc, #172]	; (800138c <printRadioSettings+0x31c>)
 80012e0:	f006 f90a 	bl	80074f8 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80012e4:	2006      	movs	r0, #6
 80012e6:	f7ff facd 	bl	8000884 <NRF24_read_register>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80012f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <printRadioSettings+0x29a>
 80012fc:	f107 0308 	add.w	r3, r7, #8
 8001300:	492a      	ldr	r1, [pc, #168]	; (80013ac <printRadioSettings+0x33c>)
 8001302:	4618      	mov	r0, r3
 8001304:	f007 f9ee 	bl	80086e4 <siprintf>
 8001308:	e005      	b.n	8001316 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4928      	ldr	r1, [pc, #160]	; (80013b0 <printRadioSettings+0x340>)
 8001310:	4618      	mov	r0, r3
 8001312:	f007 f9e7 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	4618      	mov	r0, r3
 800131c:	f7fe ffe0 	bl	80002e0 <strlen>
 8001320:	4603      	mov	r3, r0
 8001322:	b29a      	uxth	r2, r3
 8001324:	f107 0108 	add.w	r1, r7, #8
 8001328:	230a      	movs	r3, #10
 800132a:	4818      	ldr	r0, [pc, #96]	; (800138c <printRadioSettings+0x31c>)
 800132c:	f006 f8e4 	bl	80074f8 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001330:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001334:	f003 0306 	and.w	r3, r3, #6
 8001338:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 800133c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001340:	085b      	lsrs	r3, r3, #1
 8001342:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001346:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800134a:	2b00      	cmp	r3, #0
 800134c:	d106      	bne.n	800135c <printRadioSettings+0x2ec>
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	4918      	ldr	r1, [pc, #96]	; (80013b4 <printRadioSettings+0x344>)
 8001354:	4618      	mov	r0, r3
 8001356:	f007 f9c5 	bl	80086e4 <siprintf>
 800135a:	e03b      	b.n	80013d4 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800135c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001360:	2b01      	cmp	r3, #1
 8001362:	d106      	bne.n	8001372 <printRadioSettings+0x302>
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	4913      	ldr	r1, [pc, #76]	; (80013b8 <printRadioSettings+0x348>)
 800136a:	4618      	mov	r0, r3
 800136c:	f007 f9ba 	bl	80086e4 <siprintf>
 8001370:	e030      	b.n	80013d4 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001372:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001376:	2b02      	cmp	r3, #2
 8001378:	d122      	bne.n	80013c0 <printRadioSettings+0x350>
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	490f      	ldr	r1, [pc, #60]	; (80013bc <printRadioSettings+0x34c>)
 8001380:	4618      	mov	r0, r3
 8001382:	f007 f9af 	bl	80086e4 <siprintf>
 8001386:	e025      	b.n	80013d4 <printRadioSettings+0x364>
 8001388:	08008fbc 	.word	0x08008fbc
 800138c:	2400013c 	.word	0x2400013c
 8001390:	08008ff0 	.word	0x08008ff0
 8001394:	0800900c 	.word	0x0800900c
 8001398:	08009028 	.word	0x08009028
 800139c:	0800903c 	.word	0x0800903c
 80013a0:	08009080 	.word	0x08009080
 80013a4:	080090cc 	.word	0x080090cc
 80013a8:	080090e8 	.word	0x080090e8
 80013ac:	080090fc 	.word	0x080090fc
 80013b0:	08009114 	.word	0x08009114
 80013b4:	0800912c 	.word	0x0800912c
 80013b8:	08009140 	.word	0x08009140
 80013bc:	08009154 	.word	0x08009154
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80013c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d105      	bne.n	80013d4 <printRadioSettings+0x364>
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	49d7      	ldr	r1, [pc, #860]	; (800172c <printRadioSettings+0x6bc>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f007 f988 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	4618      	mov	r0, r3
 80013da:	f7fe ff81 	bl	80002e0 <strlen>
 80013de:	4603      	mov	r3, r0
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	f107 0108 	add.w	r1, r7, #8
 80013e6:	230a      	movs	r3, #10
 80013e8:	48d1      	ldr	r0, [pc, #836]	; (8001730 <printRadioSettings+0x6c0>)
 80013ea:	f006 f885 	bl	80074f8 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80013ee:	463b      	mov	r3, r7
 80013f0:	2205      	movs	r2, #5
 80013f2:	4619      	mov	r1, r3
 80013f4:	200a      	movs	r0, #10
 80013f6:	f7ff fa6d 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80013fa:	793b      	ldrb	r3, [r7, #4]
 80013fc:	461c      	mov	r4, r3
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	461d      	mov	r5, r3
 8001402:	78bb      	ldrb	r3, [r7, #2]
 8001404:	787a      	ldrb	r2, [r7, #1]
 8001406:	7839      	ldrb	r1, [r7, #0]
 8001408:	f107 0008 	add.w	r0, r7, #8
 800140c:	9102      	str	r1, [sp, #8]
 800140e:	9201      	str	r2, [sp, #4]
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	462b      	mov	r3, r5
 8001414:	4622      	mov	r2, r4
 8001416:	49c7      	ldr	r1, [pc, #796]	; (8001734 <printRadioSettings+0x6c4>)
 8001418:	f007 f964 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	4618      	mov	r0, r3
 8001422:	f7fe ff5d 	bl	80002e0 <strlen>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	f107 0108 	add.w	r1, r7, #8
 800142e:	230a      	movs	r3, #10
 8001430:	48bf      	ldr	r0, [pc, #764]	; (8001730 <printRadioSettings+0x6c0>)
 8001432:	f006 f861 	bl	80074f8 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001436:	463b      	mov	r3, r7
 8001438:	2205      	movs	r2, #5
 800143a:	4619      	mov	r1, r3
 800143c:	200b      	movs	r0, #11
 800143e:	f7ff fa49 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001442:	793b      	ldrb	r3, [r7, #4]
 8001444:	461c      	mov	r4, r3
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	461d      	mov	r5, r3
 800144a:	78bb      	ldrb	r3, [r7, #2]
 800144c:	787a      	ldrb	r2, [r7, #1]
 800144e:	7839      	ldrb	r1, [r7, #0]
 8001450:	f107 0008 	add.w	r0, r7, #8
 8001454:	9102      	str	r1, [sp, #8]
 8001456:	9201      	str	r2, [sp, #4]
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	462b      	mov	r3, r5
 800145c:	4622      	mov	r2, r4
 800145e:	49b6      	ldr	r1, [pc, #728]	; (8001738 <printRadioSettings+0x6c8>)
 8001460:	f007 f940 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe ff39 	bl	80002e0 <strlen>
 800146e:	4603      	mov	r3, r0
 8001470:	b29a      	uxth	r2, r3
 8001472:	f107 0108 	add.w	r1, r7, #8
 8001476:	230a      	movs	r3, #10
 8001478:	48ad      	ldr	r0, [pc, #692]	; (8001730 <printRadioSettings+0x6c0>)
 800147a:	f006 f83d 	bl	80074f8 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800147e:	463b      	mov	r3, r7
 8001480:	2201      	movs	r2, #1
 8001482:	4619      	mov	r1, r3
 8001484:	200c      	movs	r0, #12
 8001486:	f7ff fa25 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800148a:	783b      	ldrb	r3, [r7, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	49aa      	ldr	r1, [pc, #680]	; (800173c <printRadioSettings+0x6cc>)
 8001494:	4618      	mov	r0, r3
 8001496:	f007 f925 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	4618      	mov	r0, r3
 80014a0:	f7fe ff1e 	bl	80002e0 <strlen>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f107 0108 	add.w	r1, r7, #8
 80014ac:	230a      	movs	r3, #10
 80014ae:	48a0      	ldr	r0, [pc, #640]	; (8001730 <printRadioSettings+0x6c0>)
 80014b0:	f006 f822 	bl	80074f8 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80014b4:	463b      	mov	r3, r7
 80014b6:	2201      	movs	r2, #1
 80014b8:	4619      	mov	r1, r3
 80014ba:	200d      	movs	r0, #13
 80014bc:	f7ff fa0a 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014c0:	783b      	ldrb	r3, [r7, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	499d      	ldr	r1, [pc, #628]	; (8001740 <printRadioSettings+0x6d0>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	f007 f90a 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe ff03 	bl	80002e0 <strlen>
 80014da:	4603      	mov	r3, r0
 80014dc:	b29a      	uxth	r2, r3
 80014de:	f107 0108 	add.w	r1, r7, #8
 80014e2:	230a      	movs	r3, #10
 80014e4:	4892      	ldr	r0, [pc, #584]	; (8001730 <printRadioSettings+0x6c0>)
 80014e6:	f006 f807 	bl	80074f8 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80014ea:	463b      	mov	r3, r7
 80014ec:	2201      	movs	r2, #1
 80014ee:	4619      	mov	r1, r3
 80014f0:	200e      	movs	r0, #14
 80014f2:	f7ff f9ef 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014f6:	783b      	ldrb	r3, [r7, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	4991      	ldr	r1, [pc, #580]	; (8001744 <printRadioSettings+0x6d4>)
 8001500:	4618      	mov	r0, r3
 8001502:	f007 f8ef 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fee8 	bl	80002e0 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	f107 0108 	add.w	r1, r7, #8
 8001518:	230a      	movs	r3, #10
 800151a:	4885      	ldr	r0, [pc, #532]	; (8001730 <printRadioSettings+0x6c0>)
 800151c:	f005 ffec 	bl	80074f8 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001520:	463b      	mov	r3, r7
 8001522:	2201      	movs	r2, #1
 8001524:	4619      	mov	r1, r3
 8001526:	200f      	movs	r0, #15
 8001528:	f7ff f9d4 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800152c:	783b      	ldrb	r3, [r7, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	4984      	ldr	r1, [pc, #528]	; (8001748 <printRadioSettings+0x6d8>)
 8001536:	4618      	mov	r0, r3
 8001538:	f007 f8d4 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe fecd 	bl	80002e0 <strlen>
 8001546:	4603      	mov	r3, r0
 8001548:	b29a      	uxth	r2, r3
 800154a:	f107 0108 	add.w	r1, r7, #8
 800154e:	230a      	movs	r3, #10
 8001550:	4877      	ldr	r0, [pc, #476]	; (8001730 <printRadioSettings+0x6c0>)
 8001552:	f005 ffd1 	bl	80074f8 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001556:	463b      	mov	r3, r7
 8001558:	2205      	movs	r2, #5
 800155a:	4619      	mov	r1, r3
 800155c:	2010      	movs	r0, #16
 800155e:	f7ff f9b9 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001562:	793b      	ldrb	r3, [r7, #4]
 8001564:	461c      	mov	r4, r3
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	461d      	mov	r5, r3
 800156a:	78bb      	ldrb	r3, [r7, #2]
 800156c:	787a      	ldrb	r2, [r7, #1]
 800156e:	7839      	ldrb	r1, [r7, #0]
 8001570:	f107 0008 	add.w	r0, r7, #8
 8001574:	9102      	str	r1, [sp, #8]
 8001576:	9201      	str	r2, [sp, #4]
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	462b      	mov	r3, r5
 800157c:	4622      	mov	r2, r4
 800157e:	4973      	ldr	r1, [pc, #460]	; (800174c <printRadioSettings+0x6dc>)
 8001580:	f007 f8b0 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe fea9 	bl	80002e0 <strlen>
 800158e:	4603      	mov	r3, r0
 8001590:	b29a      	uxth	r2, r3
 8001592:	f107 0108 	add.w	r1, r7, #8
 8001596:	230a      	movs	r3, #10
 8001598:	4865      	ldr	r0, [pc, #404]	; (8001730 <printRadioSettings+0x6c0>)
 800159a:	f005 ffad 	bl	80074f8 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800159e:	2011      	movs	r0, #17
 80015a0:	f7ff f970 	bl	8000884 <NRF24_read_register>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80015aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	4966      	ldr	r1, [pc, #408]	; (8001750 <printRadioSettings+0x6e0>)
 80015b8:	4618      	mov	r0, r3
 80015ba:	f007 f893 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe fe8c 	bl	80002e0 <strlen>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	f107 0108 	add.w	r1, r7, #8
 80015d0:	230a      	movs	r3, #10
 80015d2:	4857      	ldr	r0, [pc, #348]	; (8001730 <printRadioSettings+0x6c0>)
 80015d4:	f005 ff90 	bl	80074f8 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 80015d8:	2012      	movs	r0, #18
 80015da:	f7ff f953 	bl	8000884 <NRF24_read_register>
 80015de:	4603      	mov	r3, r0
 80015e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80015e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015ec:	f107 0308 	add.w	r3, r7, #8
 80015f0:	4958      	ldr	r1, [pc, #352]	; (8001754 <printRadioSettings+0x6e4>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f007 f876 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015f8:	f107 0308 	add.w	r3, r7, #8
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe fe6f 	bl	80002e0 <strlen>
 8001602:	4603      	mov	r3, r0
 8001604:	b29a      	uxth	r2, r3
 8001606:	f107 0108 	add.w	r1, r7, #8
 800160a:	230a      	movs	r3, #10
 800160c:	4848      	ldr	r0, [pc, #288]	; (8001730 <printRadioSettings+0x6c0>)
 800160e:	f005 ff73 	bl	80074f8 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001612:	2013      	movs	r0, #19
 8001614:	f7ff f936 	bl	8000884 <NRF24_read_register>
 8001618:	4603      	mov	r3, r0
 800161a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800161e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001622:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	494b      	ldr	r1, [pc, #300]	; (8001758 <printRadioSettings+0x6e8>)
 800162c:	4618      	mov	r0, r3
 800162e:	f007 f859 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe fe52 	bl	80002e0 <strlen>
 800163c:	4603      	mov	r3, r0
 800163e:	b29a      	uxth	r2, r3
 8001640:	f107 0108 	add.w	r1, r7, #8
 8001644:	230a      	movs	r3, #10
 8001646:	483a      	ldr	r0, [pc, #232]	; (8001730 <printRadioSettings+0x6c0>)
 8001648:	f005 ff56 	bl	80074f8 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 800164c:	2014      	movs	r0, #20
 800164e:	f7ff f919 	bl	8000884 <NRF24_read_register>
 8001652:	4603      	mov	r3, r0
 8001654:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001658:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800165c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001660:	f107 0308 	add.w	r3, r7, #8
 8001664:	493d      	ldr	r1, [pc, #244]	; (800175c <printRadioSettings+0x6ec>)
 8001666:	4618      	mov	r0, r3
 8001668:	f007 f83c 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe fe35 	bl	80002e0 <strlen>
 8001676:	4603      	mov	r3, r0
 8001678:	b29a      	uxth	r2, r3
 800167a:	f107 0108 	add.w	r1, r7, #8
 800167e:	230a      	movs	r3, #10
 8001680:	482b      	ldr	r0, [pc, #172]	; (8001730 <printRadioSettings+0x6c0>)
 8001682:	f005 ff39 	bl	80074f8 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8001686:	2015      	movs	r0, #21
 8001688:	f7ff f8fc 	bl	8000884 <NRF24_read_register>
 800168c:	4603      	mov	r3, r0
 800168e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001692:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001696:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	4930      	ldr	r1, [pc, #192]	; (8001760 <printRadioSettings+0x6f0>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f007 f81f 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe fe18 	bl	80002e0 <strlen>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	f107 0108 	add.w	r1, r7, #8
 80016b8:	230a      	movs	r3, #10
 80016ba:	481d      	ldr	r0, [pc, #116]	; (8001730 <printRadioSettings+0x6c0>)
 80016bc:	f005 ff1c 	bl	80074f8 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 80016c0:	2016      	movs	r0, #22
 80016c2:	f7ff f8df 	bl	8000884 <NRF24_read_register>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	4922      	ldr	r1, [pc, #136]	; (8001764 <printRadioSettings+0x6f4>)
 80016da:	4618      	mov	r0, r3
 80016dc:	f007 f802 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fdfb 	bl	80002e0 <strlen>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f107 0108 	add.w	r1, r7, #8
 80016f2:	230a      	movs	r3, #10
 80016f4:	480e      	ldr	r0, [pc, #56]	; (8001730 <printRadioSettings+0x6c0>)
 80016f6:	f005 feff 	bl	80074f8 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80016fa:	201c      	movs	r0, #28
 80016fc:	f7ff f8c2 	bl	8000884 <NRF24_read_register>
 8001700:	4603      	mov	r3, r0
 8001702:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001706:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800170a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800170e:	2b00      	cmp	r3, #0
 8001710:	bfcc      	ite	gt
 8001712:	2301      	movgt	r3, #1
 8001714:	2300      	movle	r3, #0
 8001716:	b2db      	uxtb	r3, r3
 8001718:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800171a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800171e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001722:	2b00      	cmp	r3, #0
 8001724:	bfcc      	ite	gt
 8001726:	2301      	movgt	r3, #1
 8001728:	2300      	movle	r3, #0
 800172a:	e01d      	b.n	8001768 <printRadioSettings+0x6f8>
 800172c:	08009168 	.word	0x08009168
 8001730:	2400013c 	.word	0x2400013c
 8001734:	0800917c 	.word	0x0800917c
 8001738:	080091ac 	.word	0x080091ac
 800173c:	080091dc 	.word	0x080091dc
 8001740:	08009204 	.word	0x08009204
 8001744:	0800922c 	.word	0x0800922c
 8001748:	08009254 	.word	0x08009254
 800174c:	0800927c 	.word	0x0800927c
 8001750:	080092a8 	.word	0x080092a8
 8001754:	080092c4 	.word	0x080092c4
 8001758:	080092e0 	.word	0x080092e0
 800175c:	080092fc 	.word	0x080092fc
 8001760:	08009318 	.word	0x08009318
 8001764:	08009334 	.word	0x08009334
 8001768:	b2db      	uxtb	r3, r3
 800176a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800176c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001770:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001774:	2b00      	cmp	r3, #0
 8001776:	bfcc      	ite	gt
 8001778:	2301      	movgt	r3, #1
 800177a:	2300      	movle	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001780:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001784:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001788:	2b00      	cmp	r3, #0
 800178a:	bfcc      	ite	gt
 800178c:	2301      	movgt	r3, #1
 800178e:	2300      	movle	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001794:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001798:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800179c:	2b00      	cmp	r3, #0
 800179e:	bfcc      	ite	gt
 80017a0:	2301      	movgt	r3, #1
 80017a2:	2300      	movle	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017ac:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bfcc      	ite	gt
 80017b4:	2301      	movgt	r3, #1
 80017b6:	2300      	movle	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f107 0008 	add.w	r0, r7, #8
 80017be:	9303      	str	r3, [sp, #12]
 80017c0:	9402      	str	r4, [sp, #8]
 80017c2:	9101      	str	r1, [sp, #4]
 80017c4:	9200      	str	r2, [sp, #0]
 80017c6:	4633      	mov	r3, r6
 80017c8:	462a      	mov	r2, r5
 80017ca:	4936      	ldr	r1, [pc, #216]	; (80018a4 <printRadioSettings+0x834>)
 80017cc:	f006 ff8a 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017d0:	f107 0308 	add.w	r3, r7, #8
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fd83 	bl	80002e0 <strlen>
 80017da:	4603      	mov	r3, r0
 80017dc:	b29a      	uxth	r2, r3
 80017de:	f107 0108 	add.w	r1, r7, #8
 80017e2:	230a      	movs	r3, #10
 80017e4:	4830      	ldr	r0, [pc, #192]	; (80018a8 <printRadioSettings+0x838>)
 80017e6:	f005 fe87 	bl	80074f8 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80017ea:	201d      	movs	r0, #29
 80017ec:	f7ff f84a 	bl	8000884 <NRF24_read_register>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80017f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d006      	beq.n	8001810 <printRadioSettings+0x7a0>
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	4929      	ldr	r1, [pc, #164]	; (80018ac <printRadioSettings+0x83c>)
 8001808:	4618      	mov	r0, r3
 800180a:	f006 ff6b 	bl	80086e4 <siprintf>
 800180e:	e005      	b.n	800181c <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	4926      	ldr	r1, [pc, #152]	; (80018b0 <printRadioSettings+0x840>)
 8001816:	4618      	mov	r0, r3
 8001818:	f006 ff64 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fd5d 	bl	80002e0 <strlen>
 8001826:	4603      	mov	r3, r0
 8001828:	b29a      	uxth	r2, r3
 800182a:	f107 0108 	add.w	r1, r7, #8
 800182e:	230a      	movs	r3, #10
 8001830:	481d      	ldr	r0, [pc, #116]	; (80018a8 <printRadioSettings+0x838>)
 8001832:	f005 fe61 	bl	80074f8 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001836:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <printRadioSettings+0x7e0>
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	491b      	ldr	r1, [pc, #108]	; (80018b4 <printRadioSettings+0x844>)
 8001848:	4618      	mov	r0, r3
 800184a:	f006 ff4b 	bl	80086e4 <siprintf>
 800184e:	e005      	b.n	800185c <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001850:	f107 0308 	add.w	r3, r7, #8
 8001854:	4918      	ldr	r1, [pc, #96]	; (80018b8 <printRadioSettings+0x848>)
 8001856:	4618      	mov	r0, r3
 8001858:	f006 ff44 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800185c:	f107 0308 	add.w	r3, r7, #8
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fd3d 	bl	80002e0 <strlen>
 8001866:	4603      	mov	r3, r0
 8001868:	b29a      	uxth	r2, r3
 800186a:	f107 0108 	add.w	r1, r7, #8
 800186e:	230a      	movs	r3, #10
 8001870:	480d      	ldr	r0, [pc, #52]	; (80018a8 <printRadioSettings+0x838>)
 8001872:	f005 fe41 	bl	80074f8 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001876:	f107 0308 	add.w	r3, r7, #8
 800187a:	4910      	ldr	r1, [pc, #64]	; (80018bc <printRadioSettings+0x84c>)
 800187c:	4618      	mov	r0, r3
 800187e:	f006 ff31 	bl	80086e4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fd2a 	bl	80002e0 <strlen>
 800188c:	4603      	mov	r3, r0
 800188e:	b29a      	uxth	r2, r3
 8001890:	f107 0108 	add.w	r1, r7, #8
 8001894:	230a      	movs	r3, #10
 8001896:	4804      	ldr	r0, [pc, #16]	; (80018a8 <printRadioSettings+0x838>)
 8001898:	f005 fe2e 	bl	80074f8 <HAL_UART_Transmit>
}
 800189c:	bf00      	nop
 800189e:	3774      	adds	r7, #116	; 0x74
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a4:	08009350 	.word	0x08009350
 80018a8:	2400013c 	.word	0x2400013c
 80018ac:	0800939c 	.word	0x0800939c
 80018b0:	080093b4 	.word	0x080093b4
 80018b4:	080093cc 	.word	0x080093cc
 80018b8:	080093e8 	.word	0x080093e8
 80018bc:	08008fbc 	.word	0x08008fbc

080018c0 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80018c0:	b084      	sub	sp, #16
 80018c2:	b580      	push	{r7, lr}
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	f107 0c08 	add.w	ip, r7, #8
 80018ca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <nrf24_DebugUART_Init+0x2c>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	2290      	movs	r2, #144	; 0x90
 80018d8:	4619      	mov	r1, r3
 80018da:	f006 feed 	bl	80086b8 <memcpy>
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018e6:	b004      	add	sp, #16
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	2400013c 	.word	0x2400013c

080018f0 <Rotate_Left>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint64_t RxpipeAddrs = 0x11223344AA;
char myRxData[50];

void Rotate_Left(void) {
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, (63999 * 0.05));
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <Rotate_Left+0x18>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f640 427f 	movw	r2, #3199	; 0xc7f
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	240002a0 	.word	0x240002a0

0800190c <Rotate_Center>:

void Rotate_Center(void) {
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 63999 * 0.075);
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <Rotate_Center+0x18>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001918:	641a      	str	r2, [r3, #64]	; 0x40
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	240002a0 	.word	0x240002a0

08001928 <Rotate_Right>:

void Rotate_Right(void) {
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, (63999 * 0.1));
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <Rotate_Right+0x18>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	240002a0 	.word	0x240002a0
 8001944:	00000000 	.word	0x00000000

08001948 <Forward>:
void Forward() {
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
	double val = 0.5f;
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <Forward+0xa0>)
 8001954:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t arg = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	607b      	str	r3, [r7, #4]
	HAL_Delay(2000);
 800195c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001960:	f000 fec2 	bl	80026e8 <HAL_Delay>
	while (val * 100 < 101) { //Target : 0.1
 8001964:	e01d      	b.n	80019a2 <Forward+0x5a>
		val = val + 0.01f;
 8001966:	ed97 7b02 	vldr	d7, [r7, #8]
 800196a:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80019c8 <Forward+0x80>
 800196e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001972:	ed87 7b02 	vstr	d7, [r7, #8]
		//arg =  (63999 * 0.075) + (63999 * 0.025 * val);
		arg = (63999 * 0.05) + (63999 * 0.05 * val);
 8001976:	ed97 7b02 	vldr	d7, [r7, #8]
 800197a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80019d0 <Forward+0x88>
 800197e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001982:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80019d0 <Forward+0x88>
 8001986:	ee37 7b06 	vadd.f64	d7, d7, d6
 800198a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800198e:	ee17 3a90 	vmov	r3, s15
 8001992:	607b      	str	r3, [r7, #4]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, arg);
 8001994:	4b15      	ldr	r3, [pc, #84]	; (80019ec <Forward+0xa4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(100);
 800199c:	2064      	movs	r0, #100	; 0x64
 800199e:	f000 fea3 	bl	80026e8 <HAL_Delay>
	while (val * 100 < 101) { //Target : 0.1
 80019a2:	ed97 7b02 	vldr	d7, [r7, #8]
 80019a6:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 80019d8 <Forward+0x90>
 80019aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019ae:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 80019e0 <Forward+0x98>
 80019b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80019b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ba:	d4d4      	bmi.n	8001966 <Forward+0x1e>
	}
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40000000 	.word	0x40000000
 80019cc:	3f847ae1 	.word	0x3f847ae1
 80019d0:	66666667 	.word	0x66666667
 80019d4:	40a8ffe6 	.word	0x40a8ffe6
 80019d8:	00000000 	.word	0x00000000
 80019dc:	40590000 	.word	0x40590000
 80019e0:	00000000 	.word	0x00000000
 80019e4:	40594000 	.word	0x40594000
 80019e8:	3fe00000 	.word	0x3fe00000
 80019ec:	24000254 	.word	0x24000254

080019f0 <Backward>:
void Backward() {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
	double val = 0.5f;
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <Backward+0xa8>)
 80019fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t arg;
	HAL_Delay(2000);
 8001a00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a04:	f000 fe70 	bl	80026e8 <HAL_Delay>
	while (val * 100 < 101) { //Target : 0.05
 8001a08:	e01d      	b.n	8001a46 <Backward+0x56>
		val = val + 0.01f;
 8001a0a:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a0e:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8001a70 <Backward+0x80>
 8001a12:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a16:	ed87 7b02 	vstr	d7, [r7, #8]
		arg = (63999 * 0.075) - (63999 * 0.025 * val);
 8001a1a:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a1e:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8001a78 <Backward+0x88>
 8001a22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a26:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8001a80 <Backward+0x90>
 8001a2a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a2e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a32:	ee17 3a90 	vmov	r3, s15
 8001a36:	607b      	str	r3, [r7, #4]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, arg);
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <Backward+0xac>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(100);
 8001a40:	2064      	movs	r0, #100	; 0x64
 8001a42:	f000 fe51 	bl	80026e8 <HAL_Delay>
	while (val * 100 < 101) { //Target : 0.05
 8001a46:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a4a:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8001a88 <Backward+0x98>
 8001a4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a52:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8001a90 <Backward+0xa0>
 8001a56:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	d4d4      	bmi.n	8001a0a <Backward+0x1a>
	}
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	f3af 8000 	nop.w
 8001a70:	40000000 	.word	0x40000000
 8001a74:	3f847ae1 	.word	0x3f847ae1
 8001a78:	66666667 	.word	0x66666667
 8001a7c:	4098ffe6 	.word	0x4098ffe6
 8001a80:	cccccccd 	.word	0xcccccccd
 8001a84:	40b2bfec 	.word	0x40b2bfec
 8001a88:	00000000 	.word	0x00000000
 8001a8c:	40590000 	.word	0x40590000
 8001a90:	00000000 	.word	0x00000000
 8001a94:	40594000 	.word	0x40594000
 8001a98:	3fe00000 	.word	0x3fe00000
 8001a9c:	24000254 	.word	0x24000254

08001aa0 <processCharacters>:

void processCharacters(char *data) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
	char c;

	while ((c = data[i++]) != '\0') { // Recorre cada carácter hasta encontrar el caracter nulo '\0'
 8001aac:	e038      	b.n	8001b20 <processCharacters+0x80>
		switch (c) {
 8001aae:	7afb      	ldrb	r3, [r7, #11]
 8001ab0:	3b62      	subs	r3, #98	; 0x62
 8001ab2:	2b10      	cmp	r3, #16
 8001ab4:	d833      	bhi.n	8001b1e <processCharacters+0x7e>
 8001ab6:	a201      	add	r2, pc, #4	; (adr r2, 8001abc <processCharacters+0x1c>)
 8001ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abc:	08001b19 	.word	0x08001b19
 8001ac0:	08001b0d 	.word	0x08001b0d
 8001ac4:	08001b1f 	.word	0x08001b1f
 8001ac8:	08001b1f 	.word	0x08001b1f
 8001acc:	08001b13 	.word	0x08001b13
 8001ad0:	08001b1f 	.word	0x08001b1f
 8001ad4:	08001b1f 	.word	0x08001b1f
 8001ad8:	08001b1f 	.word	0x08001b1f
 8001adc:	08001b1f 	.word	0x08001b1f
 8001ae0:	08001b1f 	.word	0x08001b1f
 8001ae4:	08001b07 	.word	0x08001b07
 8001ae8:	08001b1f 	.word	0x08001b1f
 8001aec:	08001b1f 	.word	0x08001b1f
 8001af0:	08001b1f 	.word	0x08001b1f
 8001af4:	08001b1f 	.word	0x08001b1f
 8001af8:	08001b1f 	.word	0x08001b1f
 8001afc:	08001b01 	.word	0x08001b01
		case 'r':
			Rotate_Right();
 8001b00:	f7ff ff12 	bl	8001928 <Rotate_Right>
			break;
 8001b04:	e00c      	b.n	8001b20 <processCharacters+0x80>
		case 'l':
			Rotate_Left();
 8001b06:	f7ff fef3 	bl	80018f0 <Rotate_Left>
			break;
 8001b0a:	e009      	b.n	8001b20 <processCharacters+0x80>
		case 'c':
			Rotate_Center();
 8001b0c:	f7ff fefe 	bl	800190c <Rotate_Center>
			break;
 8001b10:	e006      	b.n	8001b20 <processCharacters+0x80>
		case 'f':
			Forward();
 8001b12:	f7ff ff19 	bl	8001948 <Forward>
			break;
 8001b16:	e003      	b.n	8001b20 <processCharacters+0x80>
		case 'b':
			Backward();
 8001b18:	f7ff ff6a 	bl	80019f0 <Backward>
			break;
 8001b1c:	e000      	b.n	8001b20 <processCharacters+0x80>
		default:
			// Opcional: Manejar caracteres no esperados o simplemente no hacer nada
			break;
 8001b1e:	bf00      	nop
	while ((c = data[i++]) != '\0') { // Recorre cada carácter hasta encontrar el caracter nulo '\0'
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	60fa      	str	r2, [r7, #12]
 8001b26:	461a      	mov	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	72fb      	strb	r3, [r7, #11]
 8001b30:	7afb      	ldrb	r3, [r7, #11]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1bb      	bne.n	8001aae <processCharacters+0xe>
		}
	}
}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b0a5      	sub	sp, #148	; 0x94
 8001b44:	af22      	add	r7, sp, #136	; 0x88
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8001b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b4a:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8001b4c:	bf00      	nop
 8001b4e:	4b4b      	ldr	r3, [pc, #300]	; (8001c7c <main+0x13c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d004      	beq.n	8001b64 <main+0x24>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	1e5a      	subs	r2, r3, #1
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	dcf4      	bgt.n	8001b4e <main+0xe>
		;
	if (timeout < 0) {
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	da01      	bge.n	8001b6e <main+0x2e>
		Error_Handler();
 8001b6a:	f000 fb11 	bl	8002190 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b6e:	f000 fd29 	bl	80025c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b72:	f000 f891 	bl	8001c98 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8001b76:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <main+0x13c>)
 8001b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7c:	4a3f      	ldr	r2, [pc, #252]	; (8001c7c <main+0x13c>)
 8001b7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b86:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <main+0x13c>)
 8001b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8001b94:	2000      	movs	r0, #0
 8001b96:	f001 f885 	bl	8002ca4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f001 f89b 	bl	8002cd8 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8001ba2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ba6:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8001ba8:	bf00      	nop
 8001baa:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <main+0x13c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d104      	bne.n	8001bc0 <main+0x80>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	1e5a      	subs	r2, r3, #1
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	dcf4      	bgt.n	8001baa <main+0x6a>
		;
	if (timeout < 0) {
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	da01      	bge.n	8001bca <main+0x8a>
		Error_Handler();
 8001bc6:	f000 fae3 	bl	8002190 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bca:	f000 fa51 	bl	8002070 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001bce:	f000 fa03 	bl	8001fd8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001bd2:	f000 f931 	bl	8001e38 <MX_TIM2_Init>
  MX_SPI5_Init();
 8001bd6:	f000 f8d9 	bl	8001d8c <MX_SPI5_Init>
  MX_TIM3_Init();
 8001bda:	f000 f9a3 	bl	8001f24 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001bde:	2100      	movs	r1, #0
 8001be0:	4827      	ldr	r0, [pc, #156]	; (8001c80 <main+0x140>)
 8001be2:	f004 fc5d 	bl	80064a0 <HAL_TIM_PWM_Start>
	//NO ACK
	NRF24_begin(GPIOB, GPIO_PIN_8, GPIO_PIN_9, hspi5);
 8001be6:	4c27      	ldr	r4, [pc, #156]	; (8001c84 <main+0x144>)
 8001be8:	4668      	mov	r0, sp
 8001bea:	1d23      	adds	r3, r4, #4
 8001bec:	2284      	movs	r2, #132	; 0x84
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f006 fd62 	bl	80086b8 <memcpy>
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bfe:	4822      	ldr	r0, [pc, #136]	; (8001c88 <main+0x148>)
 8001c00:	f7fe ff28 	bl	8000a54 <NRF24_begin>
	nrf24_DebugUART_Init(huart3);
 8001c04:	4c21      	ldr	r4, [pc, #132]	; (8001c8c <main+0x14c>)
 8001c06:	4668      	mov	r0, sp
 8001c08:	f104 0310 	add.w	r3, r4, #16
 8001c0c:	2280      	movs	r2, #128	; 0x80
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f006 fd52 	bl	80086b8 <memcpy>
 8001c14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c18:	f7ff fe52 	bl	80018c0 <nrf24_DebugUART_Init>

	printRadioSettings();
 8001c1c:	f7ff fa28 	bl	8001070 <printRadioSettings>

	NRF24_setAutoAck(false);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff f907 	bl	8000e34 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 8001c26:	2034      	movs	r0, #52	; 0x34
 8001c28:	f7ff f8ab 	bl	8000d82 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 8001c2c:	2020      	movs	r0, #32
 8001c2e:	f7ff f8bd 	bl	8000dac <NRF24_setPayloadSize>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <main+0x150>)
 8001c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c38:	2001      	movs	r0, #1
 8001c3a:	f7ff f839 	bl	8000cb0 <NRF24_openReadingPipe>
	NRF24_startListening();
 8001c3e:	f7fe ffe9 	bl	8000c14 <NRF24_startListening>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
		if (NRF24_available()) {
 8001c42:	f7ff f80d 	bl	8000c60 <NRF24_available>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0fa      	beq.n	8001c42 <main+0x102>
			Rotate_Center();
 8001c4c:	f7ff fe5e 	bl	800190c <Rotate_Center>
			NRF24_read(myRxData, 32);
 8001c50:	2120      	movs	r1, #32
 8001c52:	4810      	ldr	r0, [pc, #64]	; (8001c94 <main+0x154>)
 8001c54:	f7ff f80c 	bl	8000c70 <NRF24_read>
			//Descomponer datos
			processCharacters(myRxData);
 8001c58:	480e      	ldr	r0, [pc, #56]	; (8001c94 <main+0x154>)
 8001c5a:	f7ff ff21 	bl	8001aa0 <processCharacters>
			myRxData[32] = '\r';
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <main+0x154>)
 8001c60:	220d      	movs	r2, #13
 8001c62:	f883 2020 	strb.w	r2, [r3, #32]
			myRxData[32 + 1] = '\n';
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <main+0x154>)
 8001c68:	220a      	movs	r2, #10
 8001c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			HAL_UART_Transmit(&huart3, (uint8_t*) myRxData, 32 + 2, 10);
 8001c6e:	230a      	movs	r3, #10
 8001c70:	2222      	movs	r2, #34	; 0x22
 8001c72:	4908      	ldr	r1, [pc, #32]	; (8001c94 <main+0x154>)
 8001c74:	4805      	ldr	r0, [pc, #20]	; (8001c8c <main+0x14c>)
 8001c76:	f005 fc3f 	bl	80074f8 <HAL_UART_Transmit>
		if (NRF24_available()) {
 8001c7a:	e7e2      	b.n	8001c42 <main+0x102>
 8001c7c:	58024400 	.word	0x58024400
 8001c80:	24000254 	.word	0x24000254
 8001c84:	240001cc 	.word	0x240001cc
 8001c88:	58020400 	.word	0x58020400
 8001c8c:	240002ec 	.word	0x240002ec
 8001c90:	24000008 	.word	0x24000008
 8001c94:	2400037c 	.word	0x2400037c

08001c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b09c      	sub	sp, #112	; 0x70
 8001c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca2:	224c      	movs	r2, #76	; 0x4c
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f006 fd14 	bl	80086d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	2220      	movs	r2, #32
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f006 fd0e 	bl	80086d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001cb8:	2004      	movs	r0, #4
 8001cba:	f001 f821 	bl	8002d00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	4b30      	ldr	r3, [pc, #192]	; (8001d84 <SystemClock_Config+0xec>)
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	4a2f      	ldr	r2, [pc, #188]	; (8001d84 <SystemClock_Config+0xec>)
 8001cc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ccc:	6193      	str	r3, [r2, #24]
 8001cce:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <SystemClock_Config+0xec>)
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <SystemClock_Config+0xf0>)
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	4a2a      	ldr	r2, [pc, #168]	; (8001d88 <SystemClock_Config+0xf0>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001ce4:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <SystemClock_Config+0xf0>)
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001cf0:	bf00      	nop
 8001cf2:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <SystemClock_Config+0xec>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cfe:	d1f8      	bne.n	8001cf2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d00:	2301      	movs	r3, #1
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d04:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001d12:	2302      	movs	r3, #2
 8001d14:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001d16:	23f0      	movs	r3, #240	; 0xf0
 8001d18:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d22:	2302      	movs	r3, #2
 8001d24:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001d26:	2308      	movs	r3, #8
 8001d28:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d36:	4618      	mov	r0, r3
 8001d38:	f001 f83c 	bl	8002db4 <HAL_RCC_OscConfig>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d42:	f000 fa25 	bl	8002190 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d46:	233f      	movs	r3, #63	; 0x3f
 8001d48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001d52:	2308      	movs	r3, #8
 8001d54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001d56:	2340      	movs	r3, #64	; 0x40
 8001d58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001d5a:	2340      	movs	r3, #64	; 0x40
 8001d5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d62:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001d64:	2340      	movs	r3, #64	; 0x40
 8001d66:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	2104      	movs	r1, #4
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f001 fc4f 	bl	8003610 <HAL_RCC_ClockConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001d78:	f000 fa0a 	bl	8002190 <Error_Handler>
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	3770      	adds	r7, #112	; 0x70
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	58024800 	.word	0x58024800
 8001d88:	58000400 	.word	0x58000400

08001d8c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001d90:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001d92:	4a28      	ldr	r2, [pc, #160]	; (8001e34 <MX_SPI5_Init+0xa8>)
 8001d94:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001d96:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001d98:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d9c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001d9e:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8001da4:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001da6:	2203      	movs	r2, #3
 8001da8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001daa:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001db0:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001db6:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001db8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dbc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd0:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ddc:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001dde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001de2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001e1a:	4805      	ldr	r0, [pc, #20]	; (8001e30 <MX_SPI5_Init+0xa4>)
 8001e1c:	f003 faec 	bl	80053f8 <HAL_SPI_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 8001e26:	f000 f9b3 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	240001cc 	.word	0x240001cc
 8001e34:	40015000 	.word	0x40015000

08001e38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08e      	sub	sp, #56	; 0x38
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e58:	463b      	mov	r3, r7
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
 8001e64:	611a      	str	r2, [r3, #16]
 8001e66:	615a      	str	r2, [r3, #20]
 8001e68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e6a:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <MX_TIM2_Init+0xe8>)
 8001e6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 74;
 8001e72:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <MX_TIM2_Init+0xe8>)
 8001e74:	224a      	movs	r2, #74	; 0x4a
 8001e76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e78:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <MX_TIM2_Init+0xe8>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <MX_TIM2_Init+0xe8>)
 8001e80:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001e84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <MX_TIM2_Init+0xe8>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e8c:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <MX_TIM2_Init+0xe8>)
 8001e8e:	2280      	movs	r2, #128	; 0x80
 8001e90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e92:	4823      	ldr	r0, [pc, #140]	; (8001f20 <MX_TIM2_Init+0xe8>)
 8001e94:	f004 fa55 	bl	8006342 <HAL_TIM_Base_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001e9e:	f000 f977 	bl	8002190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ea8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eac:	4619      	mov	r1, r3
 8001eae:	481c      	ldr	r0, [pc, #112]	; (8001f20 <MX_TIM2_Init+0xe8>)
 8001eb0:	f004 fd18 	bl	80068e4 <HAL_TIM_ConfigClockSource>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001eba:	f000 f969 	bl	8002190 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ebe:	4818      	ldr	r0, [pc, #96]	; (8001f20 <MX_TIM2_Init+0xe8>)
 8001ec0:	f004 fa96 	bl	80063f0 <HAL_TIM_PWM_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001eca:	f000 f961 	bl	8002190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	4619      	mov	r1, r3
 8001edc:	4810      	ldr	r0, [pc, #64]	; (8001f20 <MX_TIM2_Init+0xe8>)
 8001ede:	f005 fa2d 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001ee8:	f000 f952 	bl	8002190 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eec:	2360      	movs	r3, #96	; 0x60
 8001eee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001efc:	463b      	mov	r3, r7
 8001efe:	2200      	movs	r2, #0
 8001f00:	4619      	mov	r1, r3
 8001f02:	4807      	ldr	r0, [pc, #28]	; (8001f20 <MX_TIM2_Init+0xe8>)
 8001f04:	f004 fbda 	bl	80066bc <HAL_TIM_PWM_ConfigChannel>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001f0e:	f000 f93f 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f12:	4803      	ldr	r0, [pc, #12]	; (8001f20 <MX_TIM2_Init+0xe8>)
 8001f14:	f000 fa04 	bl	8002320 <HAL_TIM_MspPostInit>

}
 8001f18:	bf00      	nop
 8001f1a:	3738      	adds	r7, #56	; 0x38
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	24000254 	.word	0x24000254

08001f24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2a:	f107 031c 	add.w	r3, r7, #28
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f36:	463b      	mov	r3, r7
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
 8001f44:	615a      	str	r2, [r3, #20]
 8001f46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <MX_TIM3_Init+0xac>)
 8001f4a:	4a22      	ldr	r2, [pc, #136]	; (8001fd4 <MX_TIM3_Init+0xb0>)
 8001f4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 74;
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <MX_TIM3_Init+0xac>)
 8001f50:	224a      	movs	r2, #74	; 0x4a
 8001f52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f54:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <MX_TIM3_Init+0xac>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <MX_TIM3_Init+0xac>)
 8001f5c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001f60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <MX_TIM3_Init+0xac>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <MX_TIM3_Init+0xac>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f6e:	4818      	ldr	r0, [pc, #96]	; (8001fd0 <MX_TIM3_Init+0xac>)
 8001f70:	f004 fa3e 	bl	80063f0 <HAL_TIM_PWM_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001f7a:	f000 f909 	bl	8002190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f86:	f107 031c 	add.w	r3, r7, #28
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4810      	ldr	r0, [pc, #64]	; (8001fd0 <MX_TIM3_Init+0xac>)
 8001f8e:	f005 f9d5 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001f98:	f000 f8fa 	bl	8002190 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f9c:	2360      	movs	r3, #96	; 0x60
 8001f9e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fac:	463b      	mov	r3, r7
 8001fae:	220c      	movs	r2, #12
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4807      	ldr	r0, [pc, #28]	; (8001fd0 <MX_TIM3_Init+0xac>)
 8001fb4:	f004 fb82 	bl	80066bc <HAL_TIM_PWM_ConfigChannel>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001fbe:	f000 f8e7 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fc2:	4803      	ldr	r0, [pc, #12]	; (8001fd0 <MX_TIM3_Init+0xac>)
 8001fc4:	f000 f9ac 	bl	8002320 <HAL_TIM_MspPostInit>

}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	; 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	240002a0 	.word	0x240002a0
 8001fd4:	40000400 	.word	0x40000400

08001fd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fdc:	4b22      	ldr	r3, [pc, #136]	; (8002068 <MX_USART3_UART_Init+0x90>)
 8001fde:	4a23      	ldr	r2, [pc, #140]	; (800206c <MX_USART3_UART_Init+0x94>)
 8001fe0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001fe2:	4b21      	ldr	r3, [pc, #132]	; (8002068 <MX_USART3_UART_Init+0x90>)
 8001fe4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fe8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fea:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <MX_USART3_UART_Init+0x90>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <MX_USART3_UART_Init+0x90>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <MX_USART3_UART_Init+0x90>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <MX_USART3_UART_Init+0x90>)
 8001ffe:	220c      	movs	r2, #12
 8002000:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <MX_USART3_UART_Init+0x90>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002008:	4b17      	ldr	r3, [pc, #92]	; (8002068 <MX_USART3_UART_Init+0x90>)
 800200a:	2200      	movs	r2, #0
 800200c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800200e:	4b16      	ldr	r3, [pc, #88]	; (8002068 <MX_USART3_UART_Init+0x90>)
 8002010:	2200      	movs	r2, #0
 8002012:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002014:	4b14      	ldr	r3, [pc, #80]	; (8002068 <MX_USART3_UART_Init+0x90>)
 8002016:	2200      	movs	r2, #0
 8002018:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800201a:	4b13      	ldr	r3, [pc, #76]	; (8002068 <MX_USART3_UART_Init+0x90>)
 800201c:	2200      	movs	r2, #0
 800201e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002020:	4811      	ldr	r0, [pc, #68]	; (8002068 <MX_USART3_UART_Init+0x90>)
 8002022:	f005 fa19 	bl	8007458 <HAL_UART_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800202c:	f000 f8b0 	bl	8002190 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002030:	2100      	movs	r1, #0
 8002032:	480d      	ldr	r0, [pc, #52]	; (8002068 <MX_USART3_UART_Init+0x90>)
 8002034:	f006 fa4c 	bl	80084d0 <HAL_UARTEx_SetTxFifoThreshold>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800203e:	f000 f8a7 	bl	8002190 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002042:	2100      	movs	r1, #0
 8002044:	4808      	ldr	r0, [pc, #32]	; (8002068 <MX_USART3_UART_Init+0x90>)
 8002046:	f006 fa81 	bl	800854c <HAL_UARTEx_SetRxFifoThreshold>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002050:	f000 f89e 	bl	8002190 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002054:	4804      	ldr	r0, [pc, #16]	; (8002068 <MX_USART3_UART_Init+0x90>)
 8002056:	f006 fa02 	bl	800845e <HAL_UARTEx_DisableFifoMode>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002060:	f000 f896 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}
 8002068:	240002ec 	.word	0x240002ec
 800206c:	40004800 	.word	0x40004800

08002070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	; 0x30
 8002074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002076:	f107 031c 	add.w	r3, r7, #28
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
 8002084:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002086:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <MX_GPIO_Init+0x114>)
 8002088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208c:	4a3d      	ldr	r2, [pc, #244]	; (8002184 <MX_GPIO_Init+0x114>)
 800208e:	f043 0304 	orr.w	r3, r3, #4
 8002092:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002096:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <MX_GPIO_Init+0x114>)
 8002098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020a4:	4b37      	ldr	r3, [pc, #220]	; (8002184 <MX_GPIO_Init+0x114>)
 80020a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020aa:	4a36      	ldr	r2, [pc, #216]	; (8002184 <MX_GPIO_Init+0x114>)
 80020ac:	f043 0320 	orr.w	r3, r3, #32
 80020b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020b4:	4b33      	ldr	r3, [pc, #204]	; (8002184 <MX_GPIO_Init+0x114>)
 80020b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020c2:	4b30      	ldr	r3, [pc, #192]	; (8002184 <MX_GPIO_Init+0x114>)
 80020c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c8:	4a2e      	ldr	r2, [pc, #184]	; (8002184 <MX_GPIO_Init+0x114>)
 80020ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020d2:	4b2c      	ldr	r3, [pc, #176]	; (8002184 <MX_GPIO_Init+0x114>)
 80020d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e0:	4b28      	ldr	r3, [pc, #160]	; (8002184 <MX_GPIO_Init+0x114>)
 80020e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e6:	4a27      	ldr	r2, [pc, #156]	; (8002184 <MX_GPIO_Init+0x114>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020f0:	4b24      	ldr	r3, [pc, #144]	; (8002184 <MX_GPIO_Init+0x114>)
 80020f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fe:	4b21      	ldr	r3, [pc, #132]	; (8002184 <MX_GPIO_Init+0x114>)
 8002100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002104:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <MX_GPIO_Init+0x114>)
 8002106:	f043 0302 	orr.w	r3, r3, #2
 800210a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <MX_GPIO_Init+0x114>)
 8002110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <MX_GPIO_Init+0x114>)
 800211e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002122:	4a18      	ldr	r2, [pc, #96]	; (8002184 <MX_GPIO_Init+0x114>)
 8002124:	f043 0308 	orr.w	r3, r3, #8
 8002128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <MX_GPIO_Init+0x114>)
 800212e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800213a:	2200      	movs	r2, #0
 800213c:	2101      	movs	r1, #1
 800213e:	4812      	ldr	r0, [pc, #72]	; (8002188 <MX_GPIO_Init+0x118>)
 8002140:	f000 fd96 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002152:	f107 031c 	add.w	r3, r7, #28
 8002156:	4619      	mov	r1, r3
 8002158:	480c      	ldr	r0, [pc, #48]	; (800218c <MX_GPIO_Init+0x11c>)
 800215a:	f000 fbd9 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800215e:	2301      	movs	r3, #1
 8002160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002162:	2301      	movs	r3, #1
 8002164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800216e:	f107 031c 	add.w	r3, r7, #28
 8002172:	4619      	mov	r1, r3
 8002174:	4804      	ldr	r0, [pc, #16]	; (8002188 <MX_GPIO_Init+0x118>)
 8002176:	f000 fbcb 	bl	8002910 <HAL_GPIO_Init>

}
 800217a:	bf00      	nop
 800217c:	3730      	adds	r7, #48	; 0x30
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	58024400 	.word	0x58024400
 8002188:	58020400 	.word	0x58020400
 800218c:	58020800 	.word	0x58020800

08002190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002194:	b672      	cpsid	i
}
 8002196:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002198:	e7fe      	b.n	8002198 <Error_Handler+0x8>
	...

0800219c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <HAL_MspInit+0x30>)
 80021a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021a8:	4a08      	ldr	r2, [pc, #32]	; (80021cc <HAL_MspInit+0x30>)
 80021aa:	f043 0302 	orr.w	r3, r3, #2
 80021ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_MspInit+0x30>)
 80021b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	58024400 	.word	0x58024400

080021d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b0b8      	sub	sp, #224	; 0xe0
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021e8:	f107 0310 	add.w	r3, r7, #16
 80021ec:	22bc      	movs	r2, #188	; 0xbc
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f006 fa6f 	bl	80086d4 <memset>
  if(hspi->Instance==SPI5)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a25      	ldr	r2, [pc, #148]	; (8002290 <HAL_SPI_MspInit+0xc0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d142      	bne.n	8002286 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8002200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002204:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002206:	2300      	movs	r3, #0
 8002208:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800220a:	f107 0310 	add.w	r3, r7, #16
 800220e:	4618      	mov	r0, r3
 8002210:	f001 fd8a 	bl	8003d28 <HAL_RCCEx_PeriphCLKConfig>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800221a:	f7ff ffb9 	bl	8002190 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800221e:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_SPI_MspInit+0xc4>)
 8002220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002224:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <HAL_SPI_MspInit+0xc4>)
 8002226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800222a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800222e:	4b19      	ldr	r3, [pc, #100]	; (8002294 <HAL_SPI_MspInit+0xc4>)
 8002230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002234:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800223c:	4b15      	ldr	r3, [pc, #84]	; (8002294 <HAL_SPI_MspInit+0xc4>)
 800223e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002242:	4a14      	ldr	r2, [pc, #80]	; (8002294 <HAL_SPI_MspInit+0xc4>)
 8002244:	f043 0320 	orr.w	r3, r3, #32
 8002248:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HAL_SPI_MspInit+0xc4>)
 800224e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800225a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800225e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002274:	2305      	movs	r3, #5
 8002276:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800227a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800227e:	4619      	mov	r1, r3
 8002280:	4805      	ldr	r0, [pc, #20]	; (8002298 <HAL_SPI_MspInit+0xc8>)
 8002282:	f000 fb45 	bl	8002910 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002286:	bf00      	nop
 8002288:	37e0      	adds	r7, #224	; 0xe0
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40015000 	.word	0x40015000
 8002294:	58024400 	.word	0x58024400
 8002298:	58021400 	.word	0x58021400

0800229c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ac:	d10e      	bne.n	80022cc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_TIM_Base_MspInit+0x3c>)
 80022b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022b4:	4a08      	ldr	r2, [pc, #32]	; (80022d8 <HAL_TIM_Base_MspInit+0x3c>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_TIM_Base_MspInit+0x3c>)
 80022c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	58024400 	.word	0x58024400

080022dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <HAL_TIM_PWM_MspInit+0x3c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d10e      	bne.n	800230c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_TIM_PWM_MspInit+0x40>)
 80022f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022f4:	4a09      	ldr	r2, [pc, #36]	; (800231c <HAL_TIM_PWM_MspInit+0x40>)
 80022f6:	f043 0302 	orr.w	r3, r3, #2
 80022fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022fe:	4b07      	ldr	r3, [pc, #28]	; (800231c <HAL_TIM_PWM_MspInit+0x40>)
 8002300:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	40000400 	.word	0x40000400
 800231c:	58024400 	.word	0x58024400

08002320 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002340:	d11f      	bne.n	8002382 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002342:	4b24      	ldr	r3, [pc, #144]	; (80023d4 <HAL_TIM_MspPostInit+0xb4>)
 8002344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002348:	4a22      	ldr	r2, [pc, #136]	; (80023d4 <HAL_TIM_MspPostInit+0xb4>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <HAL_TIM_MspPostInit+0xb4>)
 8002354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002360:	2301      	movs	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002370:	2301      	movs	r3, #1
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	4619      	mov	r1, r3
 800237a:	4817      	ldr	r0, [pc, #92]	; (80023d8 <HAL_TIM_MspPostInit+0xb8>)
 800237c:	f000 fac8 	bl	8002910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002380:	e023      	b.n	80023ca <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a15      	ldr	r2, [pc, #84]	; (80023dc <HAL_TIM_MspPostInit+0xbc>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d11e      	bne.n	80023ca <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <HAL_TIM_MspPostInit+0xb4>)
 800238e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002392:	4a10      	ldr	r2, [pc, #64]	; (80023d4 <HAL_TIM_MspPostInit+0xb4>)
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800239c:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <HAL_TIM_MspPostInit+0xb4>)
 800239e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80023aa:	2302      	movs	r3, #2
 80023ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023ba:	2302      	movs	r3, #2
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023be:	f107 0314 	add.w	r3, r7, #20
 80023c2:	4619      	mov	r1, r3
 80023c4:	4806      	ldr	r0, [pc, #24]	; (80023e0 <HAL_TIM_MspPostInit+0xc0>)
 80023c6:	f000 faa3 	bl	8002910 <HAL_GPIO_Init>
}
 80023ca:	bf00      	nop
 80023cc:	3728      	adds	r7, #40	; 0x28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	58024400 	.word	0x58024400
 80023d8:	58020000 	.word	0x58020000
 80023dc:	40000400 	.word	0x40000400
 80023e0:	58020400 	.word	0x58020400

080023e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b0b8      	sub	sp, #224	; 0xe0
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023fc:	f107 0310 	add.w	r3, r7, #16
 8002400:	22bc      	movs	r2, #188	; 0xbc
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f006 f965 	bl	80086d4 <memset>
  if(huart->Instance==USART3)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a25      	ldr	r2, [pc, #148]	; (80024a4 <HAL_UART_MspInit+0xc0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d142      	bne.n	800249a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002414:	2302      	movs	r3, #2
 8002416:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002418:	2300      	movs	r3, #0
 800241a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800241e:	f107 0310 	add.w	r3, r7, #16
 8002422:	4618      	mov	r0, r3
 8002424:	f001 fc80 	bl	8003d28 <HAL_RCCEx_PeriphCLKConfig>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800242e:	f7ff feaf 	bl	8002190 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002432:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <HAL_UART_MspInit+0xc4>)
 8002434:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002438:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <HAL_UART_MspInit+0xc4>)
 800243a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800243e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002442:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_UART_MspInit+0xc4>)
 8002444:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <HAL_UART_MspInit+0xc4>)
 8002452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002456:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <HAL_UART_MspInit+0xc4>)
 8002458:	f043 0308 	orr.w	r3, r3, #8
 800245c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_UART_MspInit+0xc4>)
 8002462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800246e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002472:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002482:	2300      	movs	r3, #0
 8002484:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002488:	2307      	movs	r3, #7
 800248a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800248e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002492:	4619      	mov	r1, r3
 8002494:	4805      	ldr	r0, [pc, #20]	; (80024ac <HAL_UART_MspInit+0xc8>)
 8002496:	f000 fa3b 	bl	8002910 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800249a:	bf00      	nop
 800249c:	37e0      	adds	r7, #224	; 0xe0
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40004800 	.word	0x40004800
 80024a8:	58024400 	.word	0x58024400
 80024ac:	58020c00 	.word	0x58020c00

080024b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024b4:	e7fe      	b.n	80024b4 <NMI_Handler+0x4>

080024b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ba:	e7fe      	b.n	80024ba <HardFault_Handler+0x4>

080024bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c0:	e7fe      	b.n	80024c0 <MemManage_Handler+0x4>

080024c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024c2:	b480      	push	{r7}
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024c6:	e7fe      	b.n	80024c6 <BusFault_Handler+0x4>

080024c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024cc:	e7fe      	b.n	80024cc <UsageFault_Handler+0x4>

080024ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024fc:	f000 f8d4 	bl	80026a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}

08002504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800250c:	4a14      	ldr	r2, [pc, #80]	; (8002560 <_sbrk+0x5c>)
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <_sbrk+0x60>)
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002518:	4b13      	ldr	r3, [pc, #76]	; (8002568 <_sbrk+0x64>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <_sbrk+0x64>)
 8002522:	4a12      	ldr	r2, [pc, #72]	; (800256c <_sbrk+0x68>)
 8002524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <_sbrk+0x64>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	429a      	cmp	r2, r3
 8002532:	d207      	bcs.n	8002544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002534:	f006 f896 	bl	8008664 <__errno>
 8002538:	4603      	mov	r3, r0
 800253a:	220c      	movs	r2, #12
 800253c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800253e:	f04f 33ff 	mov.w	r3, #4294967295
 8002542:	e009      	b.n	8002558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <_sbrk+0x64>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <_sbrk+0x64>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	4a05      	ldr	r2, [pc, #20]	; (8002568 <_sbrk+0x64>)
 8002554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002556:	68fb      	ldr	r3, [r7, #12]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	24080000 	.word	0x24080000
 8002564:	00000400 	.word	0x00000400
 8002568:	240003b0 	.word	0x240003b0
 800256c:	240003c8 	.word	0x240003c8

08002570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002574:	f7fe f88e 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002578:	480c      	ldr	r0, [pc, #48]	; (80025ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800257a:	490d      	ldr	r1, [pc, #52]	; (80025b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800257c:	4a0d      	ldr	r2, [pc, #52]	; (80025b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800257e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002580:	e002      	b.n	8002588 <LoopCopyDataInit>

08002582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002586:	3304      	adds	r3, #4

08002588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800258a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800258c:	d3f9      	bcc.n	8002582 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800258e:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002590:	4c0a      	ldr	r4, [pc, #40]	; (80025bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002594:	e001      	b.n	800259a <LoopFillZerobss>

08002596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002598:	3204      	adds	r2, #4

0800259a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800259a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800259c:	d3fb      	bcc.n	8002596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800259e:	f006 f867 	bl	8008670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025a2:	f7ff facd 	bl	8001b40 <main>
  bx  lr
 80025a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80025ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025b0:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80025b4:	080095ec 	.word	0x080095ec
  ldr r2, =_sbss
 80025b8:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 80025bc:	240003c8 	.word	0x240003c8

080025c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c0:	e7fe      	b.n	80025c0 <ADC3_IRQHandler>
	...

080025c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ca:	2003      	movs	r0, #3
 80025cc:	f000 f96e 	bl	80028ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025d0:	f001 f9d4 	bl	800397c <HAL_RCC_GetSysClockFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_Init+0x68>)
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	4913      	ldr	r1, [pc, #76]	; (8002630 <HAL_Init+0x6c>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025ee:	4b0f      	ldr	r3, [pc, #60]	; (800262c <HAL_Init+0x68>)
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	4a0e      	ldr	r2, [pc, #56]	; (8002630 <HAL_Init+0x6c>)
 80025f8:	5cd3      	ldrb	r3, [r2, r3]
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
 8002604:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <HAL_Init+0x70>)
 8002606:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002608:	4a0b      	ldr	r2, [pc, #44]	; (8002638 <HAL_Init+0x74>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800260e:	200f      	movs	r0, #15
 8002610:	f000 f814 	bl	800263c <HAL_InitTick>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e002      	b.n	8002624 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800261e:	f7ff fdbd 	bl	800219c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	58024400 	.word	0x58024400
 8002630:	08009500 	.word	0x08009500
 8002634:	24000004 	.word	0x24000004
 8002638:	24000000 	.word	0x24000000

0800263c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_InitTick+0x60>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e021      	b.n	8002694 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <HAL_InitTick+0x64>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <HAL_InitTick+0x60>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	4619      	mov	r1, r3
 800265a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002662:	fbb2 f3f3 	udiv	r3, r2, r3
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f945 	bl	80028f6 <HAL_SYSTICK_Config>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e00e      	b.n	8002694 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b0f      	cmp	r3, #15
 800267a:	d80a      	bhi.n	8002692 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800267c:	2200      	movs	r2, #0
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	f000 f91d 	bl	80028c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002688:	4a06      	ldr	r2, [pc, #24]	; (80026a4 <HAL_InitTick+0x68>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	e000      	b.n	8002694 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
}
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	24000014 	.word	0x24000014
 80026a0:	24000000 	.word	0x24000000
 80026a4:	24000010 	.word	0x24000010

080026a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_IncTick+0x20>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_IncTick+0x24>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4413      	add	r3, r2
 80026b8:	4a04      	ldr	r2, [pc, #16]	; (80026cc <HAL_IncTick+0x24>)
 80026ba:	6013      	str	r3, [r2, #0]
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	24000014 	.word	0x24000014
 80026cc:	240003b4 	.word	0x240003b4

080026d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return uwTick;
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <HAL_GetTick+0x14>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	240003b4 	.word	0x240003b4

080026e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026f0:	f7ff ffee 	bl	80026d0 <HAL_GetTick>
 80026f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002700:	d005      	beq.n	800270e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <HAL_Delay+0x44>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4413      	add	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800270e:	bf00      	nop
 8002710:	f7ff ffde 	bl	80026d0 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	429a      	cmp	r2, r3
 800271e:	d8f7      	bhi.n	8002710 <HAL_Delay+0x28>
  {
  }
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	24000014 	.word	0x24000014

08002730 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <HAL_GetREVID+0x14>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	0c1b      	lsrs	r3, r3, #16
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	5c001000 	.word	0x5c001000

08002748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <__NVIC_SetPriorityGrouping+0x40>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002764:	4013      	ands	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <__NVIC_SetPriorityGrouping+0x44>)
 8002772:	4313      	orrs	r3, r2
 8002774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002776:	4a04      	ldr	r2, [pc, #16]	; (8002788 <__NVIC_SetPriorityGrouping+0x40>)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	60d3      	str	r3, [r2, #12]
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00
 800278c:	05fa0000 	.word	0x05fa0000

08002790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002794:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	0a1b      	lsrs	r3, r3, #8
 800279a:	f003 0307 	and.w	r3, r3, #7
}
 800279e:	4618      	mov	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	6039      	str	r1, [r7, #0]
 80027b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	db0a      	blt.n	80027d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	490c      	ldr	r1, [pc, #48]	; (80027f8 <__NVIC_SetPriority+0x4c>)
 80027c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ca:	0112      	lsls	r2, r2, #4
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	440b      	add	r3, r1
 80027d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d4:	e00a      	b.n	80027ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	4908      	ldr	r1, [pc, #32]	; (80027fc <__NVIC_SetPriority+0x50>)
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	3b04      	subs	r3, #4
 80027e4:	0112      	lsls	r2, r2, #4
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	440b      	add	r3, r1
 80027ea:	761a      	strb	r2, [r3, #24]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000e100 	.word	0xe000e100
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	; 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f1c3 0307 	rsb	r3, r3, #7
 800281a:	2b04      	cmp	r3, #4
 800281c:	bf28      	it	cs
 800281e:	2304      	movcs	r3, #4
 8002820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3304      	adds	r3, #4
 8002826:	2b06      	cmp	r3, #6
 8002828:	d902      	bls.n	8002830 <NVIC_EncodePriority+0x30>
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3b03      	subs	r3, #3
 800282e:	e000      	b.n	8002832 <NVIC_EncodePriority+0x32>
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	f04f 32ff 	mov.w	r2, #4294967295
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43da      	mvns	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	401a      	ands	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002848:	f04f 31ff 	mov.w	r1, #4294967295
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	43d9      	mvns	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	4313      	orrs	r3, r2
         );
}
 800285a:	4618      	mov	r0, r3
 800285c:	3724      	adds	r7, #36	; 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002878:	d301      	bcc.n	800287e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287a:	2301      	movs	r3, #1
 800287c:	e00f      	b.n	800289e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800287e:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <SysTick_Config+0x40>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002886:	210f      	movs	r1, #15
 8002888:	f04f 30ff 	mov.w	r0, #4294967295
 800288c:	f7ff ff8e 	bl	80027ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <SysTick_Config+0x40>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002896:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <SysTick_Config+0x40>)
 8002898:	2207      	movs	r2, #7
 800289a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	e000e010 	.word	0xe000e010

080028ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ff47 	bl	8002748 <__NVIC_SetPriorityGrouping>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b086      	sub	sp, #24
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	4603      	mov	r3, r0
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028d0:	f7ff ff5e 	bl	8002790 <__NVIC_GetPriorityGrouping>
 80028d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f7ff ff90 	bl	8002800 <NVIC_EncodePriority>
 80028e0:	4602      	mov	r2, r0
 80028e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff5f 	bl	80027ac <__NVIC_SetPriority>
}
 80028ee:	bf00      	nop
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffb2 	bl	8002868 <SysTick_Config>
 8002904:	4603      	mov	r3, r0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	; 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800291e:	4b89      	ldr	r3, [pc, #548]	; (8002b44 <HAL_GPIO_Init+0x234>)
 8002920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002922:	e194      	b.n	8002c4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	2101      	movs	r1, #1
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	fa01 f303 	lsl.w	r3, r1, r3
 8002930:	4013      	ands	r3, r2
 8002932:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 8186 	beq.w	8002c48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d005      	beq.n	8002954 <HAL_GPIO_Init+0x44>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d130      	bne.n	80029b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800298a:	2201      	movs	r2, #1
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	f003 0201 	and.w	r2, r3, #1
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d017      	beq.n	80029f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	2203      	movs	r2, #3
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d123      	bne.n	8002a46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	08da      	lsrs	r2, r3, #3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3208      	adds	r2, #8
 8002a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	220f      	movs	r2, #15
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	08da      	lsrs	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3208      	adds	r2, #8
 8002a40:	69b9      	ldr	r1, [r7, #24]
 8002a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	2203      	movs	r2, #3
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0203 	and.w	r2, r3, #3
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 80e0 	beq.w	8002c48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a88:	4b2f      	ldr	r3, [pc, #188]	; (8002b48 <HAL_GPIO_Init+0x238>)
 8002a8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a8e:	4a2e      	ldr	r2, [pc, #184]	; (8002b48 <HAL_GPIO_Init+0x238>)
 8002a90:	f043 0302 	orr.w	r3, r3, #2
 8002a94:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a98:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <HAL_GPIO_Init+0x238>)
 8002a9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa6:	4a29      	ldr	r2, [pc, #164]	; (8002b4c <HAL_GPIO_Init+0x23c>)
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	089b      	lsrs	r3, r3, #2
 8002aac:	3302      	adds	r3, #2
 8002aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	220f      	movs	r2, #15
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a20      	ldr	r2, [pc, #128]	; (8002b50 <HAL_GPIO_Init+0x240>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d052      	beq.n	8002b78 <HAL_GPIO_Init+0x268>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <HAL_GPIO_Init+0x244>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d031      	beq.n	8002b3e <HAL_GPIO_Init+0x22e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a1e      	ldr	r2, [pc, #120]	; (8002b58 <HAL_GPIO_Init+0x248>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d02b      	beq.n	8002b3a <HAL_GPIO_Init+0x22a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <HAL_GPIO_Init+0x24c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d025      	beq.n	8002b36 <HAL_GPIO_Init+0x226>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a1c      	ldr	r2, [pc, #112]	; (8002b60 <HAL_GPIO_Init+0x250>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d01f      	beq.n	8002b32 <HAL_GPIO_Init+0x222>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a1b      	ldr	r2, [pc, #108]	; (8002b64 <HAL_GPIO_Init+0x254>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d019      	beq.n	8002b2e <HAL_GPIO_Init+0x21e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a1a      	ldr	r2, [pc, #104]	; (8002b68 <HAL_GPIO_Init+0x258>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <HAL_GPIO_Init+0x21a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a19      	ldr	r2, [pc, #100]	; (8002b6c <HAL_GPIO_Init+0x25c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00d      	beq.n	8002b26 <HAL_GPIO_Init+0x216>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a18      	ldr	r2, [pc, #96]	; (8002b70 <HAL_GPIO_Init+0x260>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d007      	beq.n	8002b22 <HAL_GPIO_Init+0x212>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <HAL_GPIO_Init+0x264>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d101      	bne.n	8002b1e <HAL_GPIO_Init+0x20e>
 8002b1a:	2309      	movs	r3, #9
 8002b1c:	e02d      	b.n	8002b7a <HAL_GPIO_Init+0x26a>
 8002b1e:	230a      	movs	r3, #10
 8002b20:	e02b      	b.n	8002b7a <HAL_GPIO_Init+0x26a>
 8002b22:	2308      	movs	r3, #8
 8002b24:	e029      	b.n	8002b7a <HAL_GPIO_Init+0x26a>
 8002b26:	2307      	movs	r3, #7
 8002b28:	e027      	b.n	8002b7a <HAL_GPIO_Init+0x26a>
 8002b2a:	2306      	movs	r3, #6
 8002b2c:	e025      	b.n	8002b7a <HAL_GPIO_Init+0x26a>
 8002b2e:	2305      	movs	r3, #5
 8002b30:	e023      	b.n	8002b7a <HAL_GPIO_Init+0x26a>
 8002b32:	2304      	movs	r3, #4
 8002b34:	e021      	b.n	8002b7a <HAL_GPIO_Init+0x26a>
 8002b36:	2303      	movs	r3, #3
 8002b38:	e01f      	b.n	8002b7a <HAL_GPIO_Init+0x26a>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e01d      	b.n	8002b7a <HAL_GPIO_Init+0x26a>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e01b      	b.n	8002b7a <HAL_GPIO_Init+0x26a>
 8002b42:	bf00      	nop
 8002b44:	58000080 	.word	0x58000080
 8002b48:	58024400 	.word	0x58024400
 8002b4c:	58000400 	.word	0x58000400
 8002b50:	58020000 	.word	0x58020000
 8002b54:	58020400 	.word	0x58020400
 8002b58:	58020800 	.word	0x58020800
 8002b5c:	58020c00 	.word	0x58020c00
 8002b60:	58021000 	.word	0x58021000
 8002b64:	58021400 	.word	0x58021400
 8002b68:	58021800 	.word	0x58021800
 8002b6c:	58021c00 	.word	0x58021c00
 8002b70:	58022000 	.word	0x58022000
 8002b74:	58022400 	.word	0x58022400
 8002b78:	2300      	movs	r3, #0
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	f002 0203 	and.w	r2, r2, #3
 8002b80:	0092      	lsls	r2, r2, #2
 8002b82:	4093      	lsls	r3, r2
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b8a:	4938      	ldr	r1, [pc, #224]	; (8002c6c <HAL_GPIO_Init+0x35c>)
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	3302      	adds	r3, #2
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f47f ae63 	bne.w	8002924 <HAL_GPIO_Init+0x14>
  }
}
 8002c5e:	bf00      	nop
 8002c60:	bf00      	nop
 8002c62:	3724      	adds	r7, #36	; 0x24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	58000400 	.word	0x58000400

08002c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c80:	787b      	ldrb	r3, [r7, #1]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002c8c:	e003      	b.n	8002c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c8e:	887b      	ldrh	r3, [r7, #2]
 8002c90:	041a      	lsls	r2, r3, #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	619a      	str	r2, [r3, #24]
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002cac:	4a08      	ldr	r2, [pc, #32]	; (8002cd0 <HAL_HSEM_FastTake+0x2c>)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3320      	adds	r3, #32
 8002cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb6:	4a07      	ldr	r2, [pc, #28]	; (8002cd4 <HAL_HSEM_FastTake+0x30>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d101      	bne.n	8002cc0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e000      	b.n	8002cc2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	58026400 	.word	0x58026400
 8002cd4:	80000300 	.word	0x80000300

08002cd8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002ce2:	4906      	ldr	r1, [pc, #24]	; (8002cfc <HAL_HSEM_Release+0x24>)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	58026400 	.word	0x58026400

08002d00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002d08:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	2b06      	cmp	r3, #6
 8002d12:	d00a      	beq.n	8002d2a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d14:	4b26      	ldr	r3, [pc, #152]	; (8002db0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d001      	beq.n	8002d26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e040      	b.n	8002da8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e03e      	b.n	8002da8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d2a:	4b21      	ldr	r3, [pc, #132]	; (8002db0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002d32:	491f      	ldr	r1, [pc, #124]	; (8002db0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002d3a:	f7ff fcc9 	bl	80026d0 <HAL_GetTick>
 8002d3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d40:	e009      	b.n	8002d56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d42:	f7ff fcc5 	bl	80026d0 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d50:	d901      	bls.n	8002d56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e028      	b.n	8002da8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d56:	4b16      	ldr	r3, [pc, #88]	; (8002db0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d62:	d1ee      	bne.n	8002d42 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b1e      	cmp	r3, #30
 8002d68:	d008      	beq.n	8002d7c <HAL_PWREx_ConfigSupply+0x7c>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8002d6e:	d005      	beq.n	8002d7c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b1d      	cmp	r3, #29
 8002d74:	d002      	beq.n	8002d7c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b2d      	cmp	r3, #45	; 0x2d
 8002d7a:	d114      	bne.n	8002da6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002d7c:	f7ff fca8 	bl	80026d0 <HAL_GetTick>
 8002d80:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002d82:	e009      	b.n	8002d98 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d84:	f7ff fca4 	bl	80026d0 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d92:	d901      	bls.n	8002d98 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e007      	b.n	8002da8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da4:	d1ee      	bne.n	8002d84 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	58024800 	.word	0x58024800

08002db4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08c      	sub	sp, #48	; 0x30
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d102      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f000 bc1d 	b.w	8003602 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8087 	beq.w	8002ee4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dd6:	4b99      	ldr	r3, [pc, #612]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002de0:	4b96      	ldr	r3, [pc, #600]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	2b10      	cmp	r3, #16
 8002dea:	d007      	beq.n	8002dfc <HAL_RCC_OscConfig+0x48>
 8002dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dee:	2b18      	cmp	r3, #24
 8002df0:	d110      	bne.n	8002e14 <HAL_RCC_OscConfig+0x60>
 8002df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d10b      	bne.n	8002e14 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	4b8f      	ldr	r3, [pc, #572]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d06c      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x12e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d168      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e3f6      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1c:	d106      	bne.n	8002e2c <HAL_RCC_OscConfig+0x78>
 8002e1e:	4b87      	ldr	r3, [pc, #540]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a86      	ldr	r2, [pc, #536]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	e02e      	b.n	8002e8a <HAL_RCC_OscConfig+0xd6>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10c      	bne.n	8002e4e <HAL_RCC_OscConfig+0x9a>
 8002e34:	4b81      	ldr	r3, [pc, #516]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a80      	ldr	r2, [pc, #512]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	4b7e      	ldr	r3, [pc, #504]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a7d      	ldr	r2, [pc, #500]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	e01d      	b.n	8002e8a <HAL_RCC_OscConfig+0xd6>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e56:	d10c      	bne.n	8002e72 <HAL_RCC_OscConfig+0xbe>
 8002e58:	4b78      	ldr	r3, [pc, #480]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a77      	ldr	r2, [pc, #476]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002e5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	4b75      	ldr	r3, [pc, #468]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a74      	ldr	r2, [pc, #464]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	e00b      	b.n	8002e8a <HAL_RCC_OscConfig+0xd6>
 8002e72:	4b72      	ldr	r3, [pc, #456]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a71      	ldr	r2, [pc, #452]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b6f      	ldr	r3, [pc, #444]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a6e      	ldr	r2, [pc, #440]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d013      	beq.n	8002eba <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e92:	f7ff fc1d 	bl	80026d0 <HAL_GetTick>
 8002e96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e9a:	f7ff fc19 	bl	80026d0 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b64      	cmp	r3, #100	; 0x64
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e3aa      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002eac:	4b63      	ldr	r3, [pc, #396]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0xe6>
 8002eb8:	e014      	b.n	8002ee4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eba:	f7ff fc09 	bl	80026d0 <HAL_GetTick>
 8002ebe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec2:	f7ff fc05 	bl	80026d0 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b64      	cmp	r3, #100	; 0x64
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e396      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ed4:	4b59      	ldr	r3, [pc, #356]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1f0      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x10e>
 8002ee0:	e000      	b.n	8002ee4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80cb 	beq.w	8003088 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ef2:	4b52      	ldr	r3, [pc, #328]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002efa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002efc:	4b4f      	ldr	r3, [pc, #316]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_RCC_OscConfig+0x164>
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	2b18      	cmp	r3, #24
 8002f0c:	d156      	bne.n	8002fbc <HAL_RCC_OscConfig+0x208>
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d151      	bne.n	8002fbc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f18:	4b48      	ldr	r3, [pc, #288]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_OscConfig+0x17c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e368      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f30:	4b42      	ldr	r3, [pc, #264]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f023 0219 	bic.w	r2, r3, #25
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	493f      	ldr	r1, [pc, #252]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f42:	f7ff fbc5 	bl	80026d0 <HAL_GetTick>
 8002f46:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f4a:	f7ff fbc1 	bl	80026d0 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e352      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f5c:	4b37      	ldr	r3, [pc, #220]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f68:	f7ff fbe2 	bl	8002730 <HAL_GetREVID>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d817      	bhi.n	8002fa6 <HAL_RCC_OscConfig+0x1f2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b40      	cmp	r3, #64	; 0x40
 8002f7c:	d108      	bne.n	8002f90 <HAL_RCC_OscConfig+0x1dc>
 8002f7e:	4b2f      	ldr	r3, [pc, #188]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f86:	4a2d      	ldr	r2, [pc, #180]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f8c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f8e:	e07b      	b.n	8003088 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f90:	4b2a      	ldr	r3, [pc, #168]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	031b      	lsls	r3, r3, #12
 8002f9e:	4927      	ldr	r1, [pc, #156]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa4:	e070      	b.n	8003088 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa6:	4b25      	ldr	r3, [pc, #148]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	061b      	lsls	r3, r3, #24
 8002fb4:	4921      	ldr	r1, [pc, #132]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fba:	e065      	b.n	8003088 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d048      	beq.n	8003056 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f023 0219 	bic.w	r2, r3, #25
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	491a      	ldr	r1, [pc, #104]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd6:	f7ff fb7b 	bl	80026d0 <HAL_GetTick>
 8002fda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fde:	f7ff fb77 	bl	80026d0 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e308      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ff0:	4b12      	ldr	r3, [pc, #72]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffc:	f7ff fb98 	bl	8002730 <HAL_GetREVID>
 8003000:	4603      	mov	r3, r0
 8003002:	f241 0203 	movw	r2, #4099	; 0x1003
 8003006:	4293      	cmp	r3, r2
 8003008:	d81a      	bhi.n	8003040 <HAL_RCC_OscConfig+0x28c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	d108      	bne.n	8003024 <HAL_RCC_OscConfig+0x270>
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800301a:	4a08      	ldr	r2, [pc, #32]	; (800303c <HAL_RCC_OscConfig+0x288>)
 800301c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003020:	6053      	str	r3, [r2, #4]
 8003022:	e031      	b.n	8003088 <HAL_RCC_OscConfig+0x2d4>
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	031b      	lsls	r3, r3, #12
 8003032:	4902      	ldr	r1, [pc, #8]	; (800303c <HAL_RCC_OscConfig+0x288>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
 8003038:	e026      	b.n	8003088 <HAL_RCC_OscConfig+0x2d4>
 800303a:	bf00      	nop
 800303c:	58024400 	.word	0x58024400
 8003040:	4b9a      	ldr	r3, [pc, #616]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	061b      	lsls	r3, r3, #24
 800304e:	4997      	ldr	r1, [pc, #604]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 8003050:	4313      	orrs	r3, r2
 8003052:	604b      	str	r3, [r1, #4]
 8003054:	e018      	b.n	8003088 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003056:	4b95      	ldr	r3, [pc, #596]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a94      	ldr	r2, [pc, #592]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 800305c:	f023 0301 	bic.w	r3, r3, #1
 8003060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003062:	f7ff fb35 	bl	80026d0 <HAL_GetTick>
 8003066:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800306a:	f7ff fb31 	bl	80026d0 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e2c2      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800307c:	4b8b      	ldr	r3, [pc, #556]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f0      	bne.n	800306a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80a9 	beq.w	80031e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003096:	4b85      	ldr	r3, [pc, #532]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800309e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030a0:	4b82      	ldr	r3, [pc, #520]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d007      	beq.n	80030bc <HAL_RCC_OscConfig+0x308>
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	2b18      	cmp	r3, #24
 80030b0:	d13a      	bne.n	8003128 <HAL_RCC_OscConfig+0x374>
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d135      	bne.n	8003128 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030bc:	4b7b      	ldr	r3, [pc, #492]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_OscConfig+0x320>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	2b80      	cmp	r3, #128	; 0x80
 80030ce:	d001      	beq.n	80030d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e296      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030d4:	f7ff fb2c 	bl	8002730 <HAL_GetREVID>
 80030d8:	4603      	mov	r3, r0
 80030da:	f241 0203 	movw	r2, #4099	; 0x1003
 80030de:	4293      	cmp	r3, r2
 80030e0:	d817      	bhi.n	8003112 <HAL_RCC_OscConfig+0x35e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d108      	bne.n	80030fc <HAL_RCC_OscConfig+0x348>
 80030ea:	4b70      	ldr	r3, [pc, #448]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80030f2:	4a6e      	ldr	r2, [pc, #440]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 80030f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030f8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030fa:	e075      	b.n	80031e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030fc:	4b6b      	ldr	r3, [pc, #428]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	069b      	lsls	r3, r3, #26
 800310a:	4968      	ldr	r1, [pc, #416]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003110:	e06a      	b.n	80031e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003112:	4b66      	ldr	r3, [pc, #408]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	061b      	lsls	r3, r3, #24
 8003120:	4962      	ldr	r1, [pc, #392]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 8003122:	4313      	orrs	r3, r2
 8003124:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003126:	e05f      	b.n	80031e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d042      	beq.n	80031b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003130:	4b5e      	ldr	r3, [pc, #376]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a5d      	ldr	r2, [pc, #372]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 8003136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800313a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7ff fac8 	bl	80026d0 <HAL_GetTick>
 8003140:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003144:	f7ff fac4 	bl	80026d0 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e255      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003156:	4b55      	ldr	r3, [pc, #340]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003162:	f7ff fae5 	bl	8002730 <HAL_GetREVID>
 8003166:	4603      	mov	r3, r0
 8003168:	f241 0203 	movw	r2, #4099	; 0x1003
 800316c:	4293      	cmp	r3, r2
 800316e:	d817      	bhi.n	80031a0 <HAL_RCC_OscConfig+0x3ec>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	2b20      	cmp	r3, #32
 8003176:	d108      	bne.n	800318a <HAL_RCC_OscConfig+0x3d6>
 8003178:	4b4c      	ldr	r3, [pc, #304]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003180:	4a4a      	ldr	r2, [pc, #296]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 8003182:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003186:	6053      	str	r3, [r2, #4]
 8003188:	e02e      	b.n	80031e8 <HAL_RCC_OscConfig+0x434>
 800318a:	4b48      	ldr	r3, [pc, #288]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	069b      	lsls	r3, r3, #26
 8003198:	4944      	ldr	r1, [pc, #272]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 800319a:	4313      	orrs	r3, r2
 800319c:	604b      	str	r3, [r1, #4]
 800319e:	e023      	b.n	80031e8 <HAL_RCC_OscConfig+0x434>
 80031a0:	4b42      	ldr	r3, [pc, #264]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	061b      	lsls	r3, r3, #24
 80031ae:	493f      	ldr	r1, [pc, #252]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60cb      	str	r3, [r1, #12]
 80031b4:	e018      	b.n	80031e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80031b6:	4b3d      	ldr	r3, [pc, #244]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a3c      	ldr	r2, [pc, #240]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 80031bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c2:	f7ff fa85 	bl	80026d0 <HAL_GetTick>
 80031c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80031ca:	f7ff fa81 	bl	80026d0 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e212      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031dc:	4b33      	ldr	r3, [pc, #204]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f0      	bne.n	80031ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d036      	beq.n	8003262 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d019      	beq.n	8003230 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fc:	4b2b      	ldr	r3, [pc, #172]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 80031fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003200:	4a2a      	ldr	r2, [pc, #168]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7ff fa62 	bl	80026d0 <HAL_GetTick>
 800320c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003210:	f7ff fa5e 	bl	80026d0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e1ef      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003222:	4b22      	ldr	r3, [pc, #136]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 8003224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0x45c>
 800322e:	e018      	b.n	8003262 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003230:	4b1e      	ldr	r3, [pc, #120]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 8003232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003234:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323c:	f7ff fa48 	bl	80026d0 <HAL_GetTick>
 8003240:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003244:	f7ff fa44 	bl	80026d0 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e1d5      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 8003258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d039      	beq.n	80032e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d01c      	beq.n	80032b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a0c      	ldr	r2, [pc, #48]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 800327c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003280:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003282:	f7ff fa25 	bl	80026d0 <HAL_GetTick>
 8003286:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800328a:	f7ff fa21 	bl	80026d0 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e1b2      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <HAL_RCC_OscConfig+0x4f8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x4d6>
 80032a8:	e01b      	b.n	80032e2 <HAL_RCC_OscConfig+0x52e>
 80032aa:	bf00      	nop
 80032ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032b0:	4b9b      	ldr	r3, [pc, #620]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a9a      	ldr	r2, [pc, #616]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 80032b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032bc:	f7ff fa08 	bl	80026d0 <HAL_GetTick>
 80032c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80032c4:	f7ff fa04 	bl	80026d0 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e195      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032d6:	4b92      	ldr	r3, [pc, #584]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8081 	beq.w	80033f2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032f0:	4b8c      	ldr	r3, [pc, #560]	; (8003524 <HAL_RCC_OscConfig+0x770>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a8b      	ldr	r2, [pc, #556]	; (8003524 <HAL_RCC_OscConfig+0x770>)
 80032f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032fc:	f7ff f9e8 	bl	80026d0 <HAL_GetTick>
 8003300:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003304:	f7ff f9e4 	bl	80026d0 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	; 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e175      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003316:	4b83      	ldr	r3, [pc, #524]	; (8003524 <HAL_RCC_OscConfig+0x770>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d106      	bne.n	8003338 <HAL_RCC_OscConfig+0x584>
 800332a:	4b7d      	ldr	r3, [pc, #500]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a7c      	ldr	r2, [pc, #496]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
 8003336:	e02d      	b.n	8003394 <HAL_RCC_OscConfig+0x5e0>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10c      	bne.n	800335a <HAL_RCC_OscConfig+0x5a6>
 8003340:	4b77      	ldr	r3, [pc, #476]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	4a76      	ldr	r2, [pc, #472]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 8003346:	f023 0301 	bic.w	r3, r3, #1
 800334a:	6713      	str	r3, [r2, #112]	; 0x70
 800334c:	4b74      	ldr	r3, [pc, #464]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	4a73      	ldr	r2, [pc, #460]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 8003352:	f023 0304 	bic.w	r3, r3, #4
 8003356:	6713      	str	r3, [r2, #112]	; 0x70
 8003358:	e01c      	b.n	8003394 <HAL_RCC_OscConfig+0x5e0>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b05      	cmp	r3, #5
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0x5c8>
 8003362:	4b6f      	ldr	r3, [pc, #444]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	4a6e      	ldr	r2, [pc, #440]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 8003368:	f043 0304 	orr.w	r3, r3, #4
 800336c:	6713      	str	r3, [r2, #112]	; 0x70
 800336e:	4b6c      	ldr	r3, [pc, #432]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	4a6b      	ldr	r2, [pc, #428]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	6713      	str	r3, [r2, #112]	; 0x70
 800337a:	e00b      	b.n	8003394 <HAL_RCC_OscConfig+0x5e0>
 800337c:	4b68      	ldr	r3, [pc, #416]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	4a67      	ldr	r2, [pc, #412]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 8003382:	f023 0301 	bic.w	r3, r3, #1
 8003386:	6713      	str	r3, [r2, #112]	; 0x70
 8003388:	4b65      	ldr	r3, [pc, #404]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	4a64      	ldr	r2, [pc, #400]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 800338e:	f023 0304 	bic.w	r3, r3, #4
 8003392:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d015      	beq.n	80033c8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339c:	f7ff f998 	bl	80026d0 <HAL_GetTick>
 80033a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033a2:	e00a      	b.n	80033ba <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a4:	f7ff f994 	bl	80026d0 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e123      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033ba:	4b59      	ldr	r3, [pc, #356]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0ee      	beq.n	80033a4 <HAL_RCC_OscConfig+0x5f0>
 80033c6:	e014      	b.n	80033f2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7ff f982 	bl	80026d0 <HAL_GetTick>
 80033cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d0:	f7ff f97e 	bl	80026d0 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e10d      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033e6:	4b4e      	ldr	r3, [pc, #312]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1ee      	bne.n	80033d0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 8102 	beq.w	8003600 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80033fc:	4b48      	ldr	r3, [pc, #288]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003404:	2b18      	cmp	r3, #24
 8003406:	f000 80bd 	beq.w	8003584 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	2b02      	cmp	r3, #2
 8003410:	f040 809e 	bne.w	8003550 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003414:	4b42      	ldr	r3, [pc, #264]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a41      	ldr	r2, [pc, #260]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 800341a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800341e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7ff f956 	bl	80026d0 <HAL_GetTick>
 8003424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003428:	f7ff f952 	bl	80026d0 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e0e3      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800343a:	4b39      	ldr	r3, [pc, #228]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003446:	4b36      	ldr	r3, [pc, #216]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 8003448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800344a:	4b37      	ldr	r3, [pc, #220]	; (8003528 <HAL_RCC_OscConfig+0x774>)
 800344c:	4013      	ands	r3, r2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003456:	0112      	lsls	r2, r2, #4
 8003458:	430a      	orrs	r2, r1
 800345a:	4931      	ldr	r1, [pc, #196]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 800345c:	4313      	orrs	r3, r2
 800345e:	628b      	str	r3, [r1, #40]	; 0x28
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	3b01      	subs	r3, #1
 8003466:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346e:	3b01      	subs	r3, #1
 8003470:	025b      	lsls	r3, r3, #9
 8003472:	b29b      	uxth	r3, r3
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	3b01      	subs	r3, #1
 800347c:	041b      	lsls	r3, r3, #16
 800347e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003488:	3b01      	subs	r3, #1
 800348a:	061b      	lsls	r3, r3, #24
 800348c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003490:	4923      	ldr	r1, [pc, #140]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 8003492:	4313      	orrs	r3, r2
 8003494:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003496:	4b22      	ldr	r3, [pc, #136]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	4a21      	ldr	r2, [pc, #132]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034a2:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 80034a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a6:	4b21      	ldr	r3, [pc, #132]	; (800352c <HAL_RCC_OscConfig+0x778>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034ae:	00d2      	lsls	r2, r2, #3
 80034b0:	491b      	ldr	r1, [pc, #108]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80034b6:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	f023 020c 	bic.w	r2, r3, #12
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	4917      	ldr	r1, [pc, #92]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80034c8:	4b15      	ldr	r3, [pc, #84]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	f023 0202 	bic.w	r2, r3, #2
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d4:	4912      	ldr	r1, [pc, #72]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034da:	4b11      	ldr	r3, [pc, #68]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 80034dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034de:	4a10      	ldr	r2, [pc, #64]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 80034e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e6:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	4a0d      	ldr	r2, [pc, #52]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 80034ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 80034f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80034fe:	4b08      	ldr	r3, [pc, #32]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	4a07      	ldr	r2, [pc, #28]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800350a:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a04      	ldr	r2, [pc, #16]	; (8003520 <HAL_RCC_OscConfig+0x76c>)
 8003510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003516:	f7ff f8db 	bl	80026d0 <HAL_GetTick>
 800351a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800351c:	e011      	b.n	8003542 <HAL_RCC_OscConfig+0x78e>
 800351e:	bf00      	nop
 8003520:	58024400 	.word	0x58024400
 8003524:	58024800 	.word	0x58024800
 8003528:	fffffc0c 	.word	0xfffffc0c
 800352c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003530:	f7ff f8ce 	bl	80026d0 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e05f      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003542:	4b32      	ldr	r3, [pc, #200]	; (800360c <HAL_RCC_OscConfig+0x858>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0x77c>
 800354e:	e057      	b.n	8003600 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003550:	4b2e      	ldr	r3, [pc, #184]	; (800360c <HAL_RCC_OscConfig+0x858>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a2d      	ldr	r2, [pc, #180]	; (800360c <HAL_RCC_OscConfig+0x858>)
 8003556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800355a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355c:	f7ff f8b8 	bl	80026d0 <HAL_GetTick>
 8003560:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003564:	f7ff f8b4 	bl	80026d0 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e045      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003576:	4b25      	ldr	r3, [pc, #148]	; (800360c <HAL_RCC_OscConfig+0x858>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x7b0>
 8003582:	e03d      	b.n	8003600 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003584:	4b21      	ldr	r3, [pc, #132]	; (800360c <HAL_RCC_OscConfig+0x858>)
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800358a:	4b20      	ldr	r3, [pc, #128]	; (800360c <HAL_RCC_OscConfig+0x858>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	2b01      	cmp	r3, #1
 8003596:	d031      	beq.n	80035fc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f003 0203 	and.w	r2, r3, #3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d12a      	bne.n	80035fc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d122      	bne.n	80035fc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d11a      	bne.n	80035fc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	0a5b      	lsrs	r3, r3, #9
 80035ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d111      	bne.n	80035fc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	0c1b      	lsrs	r3, r3, #16
 80035dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d108      	bne.n	80035fc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	0e1b      	lsrs	r3, r3, #24
 80035ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3730      	adds	r7, #48	; 0x30
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	58024400 	.word	0x58024400

08003610 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e19c      	b.n	800395e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003624:	4b8a      	ldr	r3, [pc, #552]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d910      	bls.n	8003654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b87      	ldr	r3, [pc, #540]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 020f 	bic.w	r2, r3, #15
 800363a:	4985      	ldr	r1, [pc, #532]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b83      	ldr	r3, [pc, #524]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e184      	b.n	800395e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d010      	beq.n	8003682 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	4b7b      	ldr	r3, [pc, #492]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800366c:	429a      	cmp	r2, r3
 800366e:	d908      	bls.n	8003682 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003670:	4b78      	ldr	r3, [pc, #480]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	4975      	ldr	r1, [pc, #468]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 800367e:	4313      	orrs	r3, r2
 8003680:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d010      	beq.n	80036b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	4b70      	ldr	r3, [pc, #448]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800369a:	429a      	cmp	r2, r3
 800369c:	d908      	bls.n	80036b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800369e:	4b6d      	ldr	r3, [pc, #436]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	496a      	ldr	r1, [pc, #424]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d010      	beq.n	80036de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699a      	ldr	r2, [r3, #24]
 80036c0:	4b64      	ldr	r3, [pc, #400]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d908      	bls.n	80036de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036cc:	4b61      	ldr	r3, [pc, #388]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	495e      	ldr	r1, [pc, #376]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d010      	beq.n	800370c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69da      	ldr	r2, [r3, #28]
 80036ee:	4b59      	ldr	r3, [pc, #356]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d908      	bls.n	800370c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80036fa:	4b56      	ldr	r3, [pc, #344]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	4953      	ldr	r1, [pc, #332]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003708:	4313      	orrs	r3, r2
 800370a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d010      	beq.n	800373a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	4b4d      	ldr	r3, [pc, #308]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	429a      	cmp	r2, r3
 8003726:	d908      	bls.n	800373a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003728:	4b4a      	ldr	r3, [pc, #296]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	f023 020f 	bic.w	r2, r3, #15
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4947      	ldr	r1, [pc, #284]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003736:	4313      	orrs	r3, r2
 8003738:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d055      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003746:	4b43      	ldr	r3, [pc, #268]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	4940      	ldr	r1, [pc, #256]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003754:	4313      	orrs	r3, r2
 8003756:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d107      	bne.n	8003770 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003760:	4b3c      	ldr	r3, [pc, #240]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d121      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0f6      	b.n	800395e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d107      	bne.n	8003788 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003778:	4b36      	ldr	r3, [pc, #216]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d115      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0ea      	b.n	800395e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003790:	4b30      	ldr	r3, [pc, #192]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d109      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0de      	b.n	800395e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037a0:	4b2c      	ldr	r3, [pc, #176]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0d6      	b.n	800395e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037b0:	4b28      	ldr	r3, [pc, #160]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f023 0207 	bic.w	r2, r3, #7
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4925      	ldr	r1, [pc, #148]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c2:	f7fe ff85 	bl	80026d0 <HAL_GetTick>
 80037c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c8:	e00a      	b.n	80037e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ca:	f7fe ff81 	bl	80026d0 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d8:	4293      	cmp	r3, r2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e0be      	b.n	800395e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e0:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d1eb      	bne.n	80037ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d010      	beq.n	8003820 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	4b14      	ldr	r3, [pc, #80]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	429a      	cmp	r2, r3
 800380c:	d208      	bcs.n	8003820 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800380e:	4b11      	ldr	r3, [pc, #68]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f023 020f 	bic.w	r2, r3, #15
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	490e      	ldr	r1, [pc, #56]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 800381c:	4313      	orrs	r3, r2
 800381e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003820:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d214      	bcs.n	8003858 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382e:	4b08      	ldr	r3, [pc, #32]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 020f 	bic.w	r2, r3, #15
 8003836:	4906      	ldr	r1, [pc, #24]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b04      	ldr	r3, [pc, #16]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d005      	beq.n	8003858 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e086      	b.n	800395e <HAL_RCC_ClockConfig+0x34e>
 8003850:	52002000 	.word	0x52002000
 8003854:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d010      	beq.n	8003886 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	4b3f      	ldr	r3, [pc, #252]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003870:	429a      	cmp	r2, r3
 8003872:	d208      	bcs.n	8003886 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003874:	4b3c      	ldr	r3, [pc, #240]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	4939      	ldr	r1, [pc, #228]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 8003882:	4313      	orrs	r3, r2
 8003884:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d010      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	4b34      	ldr	r3, [pc, #208]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800389e:	429a      	cmp	r2, r3
 80038a0:	d208      	bcs.n	80038b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038a2:	4b31      	ldr	r3, [pc, #196]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	492e      	ldr	r1, [pc, #184]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d010      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699a      	ldr	r2, [r3, #24]
 80038c4:	4b28      	ldr	r3, [pc, #160]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d208      	bcs.n	80038e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038d0:	4b25      	ldr	r3, [pc, #148]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	4922      	ldr	r1, [pc, #136]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d010      	beq.n	8003910 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69da      	ldr	r2, [r3, #28]
 80038f2:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d208      	bcs.n	8003910 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80038fe:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	4917      	ldr	r1, [pc, #92]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 800390c:	4313      	orrs	r3, r2
 800390e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003910:	f000 f834 	bl	800397c <HAL_RCC_GetSysClockFreq>
 8003914:	4602      	mov	r2, r0
 8003916:	4b14      	ldr	r3, [pc, #80]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	0a1b      	lsrs	r3, r3, #8
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	4912      	ldr	r1, [pc, #72]	; (800396c <HAL_RCC_ClockConfig+0x35c>)
 8003922:	5ccb      	ldrb	r3, [r1, r3]
 8003924:	f003 031f 	and.w	r3, r3, #31
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
 800392c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800392e:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	4a0d      	ldr	r2, [pc, #52]	; (800396c <HAL_RCC_ClockConfig+0x35c>)
 8003938:	5cd3      	ldrb	r3, [r2, r3]
 800393a:	f003 031f 	and.w	r3, r3, #31
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	fa22 f303 	lsr.w	r3, r2, r3
 8003944:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <HAL_RCC_ClockConfig+0x360>)
 8003946:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003948:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <HAL_RCC_ClockConfig+0x364>)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800394e:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <HAL_RCC_ClockConfig+0x368>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe fe72 	bl	800263c <HAL_InitTick>
 8003958:	4603      	mov	r3, r0
 800395a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800395c:	7bfb      	ldrb	r3, [r7, #15]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	58024400 	.word	0x58024400
 800396c:	08009500 	.word	0x08009500
 8003970:	24000004 	.word	0x24000004
 8003974:	24000000 	.word	0x24000000
 8003978:	24000010 	.word	0x24000010

0800397c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800397c:	b480      	push	{r7}
 800397e:	b089      	sub	sp, #36	; 0x24
 8003980:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003982:	4bb3      	ldr	r3, [pc, #716]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800398a:	2b18      	cmp	r3, #24
 800398c:	f200 8155 	bhi.w	8003c3a <HAL_RCC_GetSysClockFreq+0x2be>
 8003990:	a201      	add	r2, pc, #4	; (adr r2, 8003998 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003996:	bf00      	nop
 8003998:	080039fd 	.word	0x080039fd
 800399c:	08003c3b 	.word	0x08003c3b
 80039a0:	08003c3b 	.word	0x08003c3b
 80039a4:	08003c3b 	.word	0x08003c3b
 80039a8:	08003c3b 	.word	0x08003c3b
 80039ac:	08003c3b 	.word	0x08003c3b
 80039b0:	08003c3b 	.word	0x08003c3b
 80039b4:	08003c3b 	.word	0x08003c3b
 80039b8:	08003a23 	.word	0x08003a23
 80039bc:	08003c3b 	.word	0x08003c3b
 80039c0:	08003c3b 	.word	0x08003c3b
 80039c4:	08003c3b 	.word	0x08003c3b
 80039c8:	08003c3b 	.word	0x08003c3b
 80039cc:	08003c3b 	.word	0x08003c3b
 80039d0:	08003c3b 	.word	0x08003c3b
 80039d4:	08003c3b 	.word	0x08003c3b
 80039d8:	08003a29 	.word	0x08003a29
 80039dc:	08003c3b 	.word	0x08003c3b
 80039e0:	08003c3b 	.word	0x08003c3b
 80039e4:	08003c3b 	.word	0x08003c3b
 80039e8:	08003c3b 	.word	0x08003c3b
 80039ec:	08003c3b 	.word	0x08003c3b
 80039f0:	08003c3b 	.word	0x08003c3b
 80039f4:	08003c3b 	.word	0x08003c3b
 80039f8:	08003a2f 	.word	0x08003a2f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039fc:	4b94      	ldr	r3, [pc, #592]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d009      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a08:	4b91      	ldr	r3, [pc, #580]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	08db      	lsrs	r3, r3, #3
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	4a90      	ldr	r2, [pc, #576]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
 8003a18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003a1a:	e111      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a1c:	4b8d      	ldr	r3, [pc, #564]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a1e:	61bb      	str	r3, [r7, #24]
    break;
 8003a20:	e10e      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003a22:	4b8d      	ldr	r3, [pc, #564]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a24:	61bb      	str	r3, [r7, #24]
    break;
 8003a26:	e10b      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003a28:	4b8c      	ldr	r3, [pc, #560]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a2a:	61bb      	str	r3, [r7, #24]
    break;
 8003a2c:	e108      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a2e:	4b88      	ldr	r3, [pc, #544]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003a38:	4b85      	ldr	r3, [pc, #532]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a42:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a44:	4b82      	ldr	r3, [pc, #520]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003a4e:	4b80      	ldr	r3, [pc, #512]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a52:	08db      	lsrs	r3, r3, #3
 8003a54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	fb02 f303 	mul.w	r3, r2, r3
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a66:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80e1 	beq.w	8003c34 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	f000 8083 	beq.w	8003b80 <HAL_RCC_GetSysClockFreq+0x204>
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	f200 80a1 	bhi.w	8003bc4 <HAL_RCC_GetSysClockFreq+0x248>
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0x114>
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d056      	beq.n	8003b3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003a8e:	e099      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a90:	4b6f      	ldr	r3, [pc, #444]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d02d      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a9c:	4b6c      	ldr	r3, [pc, #432]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	08db      	lsrs	r3, r3, #3
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	4a6b      	ldr	r2, [pc, #428]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8003aac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	ee07 3a90 	vmov	s15, r3
 8003ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac6:	4b62      	ldr	r3, [pc, #392]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ada:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003af6:	e087      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b02:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003c64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b0a:	4b51      	ldr	r3, [pc, #324]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b1e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b3a:	e065      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b46:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003c68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4e:	4b40      	ldr	r3, [pc, #256]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b62:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b7e:	e043      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003c6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b92:	4b2f      	ldr	r3, [pc, #188]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ba6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bc2:	e021      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003c68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd6:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bde:	ee07 3a90 	vmov	s15, r3
 8003be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c06:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003c08:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	0a5b      	lsrs	r3, r3, #9
 8003c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c12:	3301      	adds	r3, #1
 8003c14:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	ee07 3a90 	vmov	s15, r3
 8003c1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c2c:	ee17 3a90 	vmov	r3, s15
 8003c30:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003c32:	e005      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	61bb      	str	r3, [r7, #24]
    break;
 8003c38:	e002      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003c3a:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c3c:	61bb      	str	r3, [r7, #24]
    break;
 8003c3e:	bf00      	nop
  }

  return sysclockfreq;
 8003c40:	69bb      	ldr	r3, [r7, #24]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3724      	adds	r7, #36	; 0x24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	58024400 	.word	0x58024400
 8003c54:	03d09000 	.word	0x03d09000
 8003c58:	003d0900 	.word	0x003d0900
 8003c5c:	007a1200 	.word	0x007a1200
 8003c60:	46000000 	.word	0x46000000
 8003c64:	4c742400 	.word	0x4c742400
 8003c68:	4a742400 	.word	0x4a742400
 8003c6c:	4af42400 	.word	0x4af42400

08003c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003c76:	f7ff fe81 	bl	800397c <HAL_RCC_GetSysClockFreq>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	0a1b      	lsrs	r3, r3, #8
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	490f      	ldr	r1, [pc, #60]	; (8003cc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c88:	5ccb      	ldrb	r3, [r1, r3]
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c94:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	4a09      	ldr	r2, [pc, #36]	; (8003cc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c9e:	5cd3      	ldrb	r3, [r2, r3]
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8003caa:	4a07      	ldr	r2, [pc, #28]	; (8003cc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cae:	4a07      	ldr	r2, [pc, #28]	; (8003ccc <HAL_RCC_GetHCLKFreq+0x5c>)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003cb4:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	58024400 	.word	0x58024400
 8003cc4:	08009500 	.word	0x08009500
 8003cc8:	24000004 	.word	0x24000004
 8003ccc:	24000000 	.word	0x24000000

08003cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003cd4:	f7ff ffcc 	bl	8003c70 <HAL_RCC_GetHCLKFreq>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	091b      	lsrs	r3, r3, #4
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	4904      	ldr	r1, [pc, #16]	; (8003cf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ce6:	5ccb      	ldrb	r3, [r1, r3]
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	08009500 	.word	0x08009500

08003cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003d00:	f7ff ffb6 	bl	8003c70 <HAL_RCC_GetHCLKFreq>
 8003d04:	4602      	mov	r2, r0
 8003d06:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	0a1b      	lsrs	r3, r3, #8
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	4904      	ldr	r1, [pc, #16]	; (8003d24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d12:	5ccb      	ldrb	r3, [r1, r3]
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	58024400 	.word	0x58024400
 8003d24:	08009500 	.word	0x08009500

08003d28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d30:	2300      	movs	r3, #0
 8003d32:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d34:	2300      	movs	r3, #0
 8003d36:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d03f      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d4c:	d02a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d52:	d824      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d58:	d018      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d5e:	d81e      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d68:	d007      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d6a:	e018      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d6c:	4ba3      	ldr	r3, [pc, #652]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	4aa2      	ldr	r2, [pc, #648]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d78:	e015      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	2102      	movs	r1, #2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f001 f9d5 	bl	8005130 <RCCEx_PLL2_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d8a:	e00c      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3324      	adds	r3, #36	; 0x24
 8003d90:	2102      	movs	r1, #2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f001 fa7e 	bl	8005294 <RCCEx_PLL3_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d9c:	e003      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	75fb      	strb	r3, [r7, #23]
      break;
 8003da2:	e000      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d109      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003dac:	4b93      	ldr	r3, [pc, #588]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003db8:	4990      	ldr	r1, [pc, #576]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	650b      	str	r3, [r1, #80]	; 0x50
 8003dbe:	e001      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc0:	7dfb      	ldrb	r3, [r7, #23]
 8003dc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d03d      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d826      	bhi.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003dd8:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003df5 	.word	0x08003df5
 8003de4:	08003e03 	.word	0x08003e03
 8003de8:	08003e15 	.word	0x08003e15
 8003dec:	08003e2d 	.word	0x08003e2d
 8003df0:	08003e2d 	.word	0x08003e2d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df4:	4b81      	ldr	r3, [pc, #516]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	4a80      	ldr	r2, [pc, #512]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e00:	e015      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3304      	adds	r3, #4
 8003e06:	2100      	movs	r1, #0
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f001 f991 	bl	8005130 <RCCEx_PLL2_Config>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e12:	e00c      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3324      	adds	r3, #36	; 0x24
 8003e18:	2100      	movs	r1, #0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f001 fa3a 	bl	8005294 <RCCEx_PLL3_Config>
 8003e20:	4603      	mov	r3, r0
 8003e22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e24:	e003      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
      break;
 8003e2a:	e000      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d109      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e34:	4b71      	ldr	r3, [pc, #452]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e38:	f023 0207 	bic.w	r2, r3, #7
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e40:	496e      	ldr	r1, [pc, #440]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	650b      	str	r3, [r1, #80]	; 0x50
 8003e46:	e001      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d042      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e60:	d02b      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e66:	d825      	bhi.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003e68:	2bc0      	cmp	r3, #192	; 0xc0
 8003e6a:	d028      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003e6c:	2bc0      	cmp	r3, #192	; 0xc0
 8003e6e:	d821      	bhi.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003e70:	2b80      	cmp	r3, #128	; 0x80
 8003e72:	d016      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003e74:	2b80      	cmp	r3, #128	; 0x80
 8003e76:	d81d      	bhi.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d007      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003e80:	e018      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e82:	4b5e      	ldr	r3, [pc, #376]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	4a5d      	ldr	r2, [pc, #372]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003e8e:	e017      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3304      	adds	r3, #4
 8003e94:	2100      	movs	r1, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f001 f94a 	bl	8005130 <RCCEx_PLL2_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003ea0:	e00e      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3324      	adds	r3, #36	; 0x24
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f001 f9f3 	bl	8005294 <RCCEx_PLL3_Config>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003eb2:	e005      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb8:	e002      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003eba:	bf00      	nop
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003ec6:	4b4d      	ldr	r3, [pc, #308]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed2:	494a      	ldr	r1, [pc, #296]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	650b      	str	r3, [r1, #80]	; 0x50
 8003ed8:	e001      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
 8003edc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d049      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ef0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ef4:	d030      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003ef6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003efa:	d82a      	bhi.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003efc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f00:	d02c      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003f02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f06:	d824      	bhi.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f0c:	d018      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f12:	d81e      	bhi.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003f18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f1c:	d007      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003f1e:	e018      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f20:	4b36      	ldr	r3, [pc, #216]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	4a35      	ldr	r2, [pc, #212]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f2c:	e017      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3304      	adds	r3, #4
 8003f32:	2100      	movs	r1, #0
 8003f34:	4618      	mov	r0, r3
 8003f36:	f001 f8fb 	bl	8005130 <RCCEx_PLL2_Config>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003f3e:	e00e      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3324      	adds	r3, #36	; 0x24
 8003f44:	2100      	movs	r1, #0
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 f9a4 	bl	8005294 <RCCEx_PLL3_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f50:	e005      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	75fb      	strb	r3, [r7, #23]
      break;
 8003f56:	e002      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003f58:	bf00      	nop
 8003f5a:	e000      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003f64:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f68:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f72:	4922      	ldr	r1, [pc, #136]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	658b      	str	r3, [r1, #88]	; 0x58
 8003f78:	e001      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
 8003f7c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d04b      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f94:	d030      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003f96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f9a:	d82a      	bhi.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003f9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fa0:	d02e      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003fa2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fa6:	d824      	bhi.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003fa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fac:	d018      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003fae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fb2:	d81e      	bhi.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fbc:	d007      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003fbe:	e018      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fc0:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	4a0d      	ldr	r2, [pc, #52]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fcc:	e019      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f001 f8ab 	bl	8005130 <RCCEx_PLL2_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003fde:	e010      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3324      	adds	r3, #36	; 0x24
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f001 f954 	bl	8005294 <RCCEx_PLL3_Config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ff0:	e007      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff6:	e004      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003ff8:	bf00      	nop
 8003ffa:	e002      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003ffc:	58024400 	.word	0x58024400
      break;
 8004000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004002:	7dfb      	ldrb	r3, [r7, #23]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004008:	4b99      	ldr	r3, [pc, #612]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800400a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004016:	4996      	ldr	r1, [pc, #600]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004018:	4313      	orrs	r3, r2
 800401a:	658b      	str	r3, [r1, #88]	; 0x58
 800401c:	e001      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401e:	7dfb      	ldrb	r3, [r7, #23]
 8004020:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d032      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004032:	2b30      	cmp	r3, #48	; 0x30
 8004034:	d01c      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004036:	2b30      	cmp	r3, #48	; 0x30
 8004038:	d817      	bhi.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800403a:	2b20      	cmp	r3, #32
 800403c:	d00c      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800403e:	2b20      	cmp	r3, #32
 8004040:	d813      	bhi.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004042:	2b00      	cmp	r3, #0
 8004044:	d016      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004046:	2b10      	cmp	r3, #16
 8004048:	d10f      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800404a:	4b89      	ldr	r3, [pc, #548]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	4a88      	ldr	r2, [pc, #544]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004054:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004056:	e00e      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	2102      	movs	r1, #2
 800405e:	4618      	mov	r0, r3
 8004060:	f001 f866 	bl	8005130 <RCCEx_PLL2_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004068:	e005      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	75fb      	strb	r3, [r7, #23]
      break;
 800406e:	e002      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004070:	bf00      	nop
 8004072:	e000      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004076:	7dfb      	ldrb	r3, [r7, #23]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d109      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800407c:	4b7c      	ldr	r3, [pc, #496]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800407e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004080:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004088:	4979      	ldr	r1, [pc, #484]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800408a:	4313      	orrs	r3, r2
 800408c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800408e:	e001      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d047      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040a8:	d030      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80040aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040ae:	d82a      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80040b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040b4:	d02c      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80040b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040ba:	d824      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80040bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c0:	d018      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80040c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c6:	d81e      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80040cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d0:	d007      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80040d2:	e018      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d4:	4b66      	ldr	r3, [pc, #408]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	4a65      	ldr	r2, [pc, #404]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80040da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80040e0:	e017      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	2100      	movs	r1, #0
 80040e8:	4618      	mov	r0, r3
 80040ea:	f001 f821 	bl	8005130 <RCCEx_PLL2_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80040f2:	e00e      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3324      	adds	r3, #36	; 0x24
 80040f8:	2100      	movs	r1, #0
 80040fa:	4618      	mov	r0, r3
 80040fc:	f001 f8ca 	bl	8005294 <RCCEx_PLL3_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004104:	e005      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	75fb      	strb	r3, [r7, #23]
      break;
 800410a:	e002      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800410c:	bf00      	nop
 800410e:	e000      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004112:	7dfb      	ldrb	r3, [r7, #23]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d109      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004118:	4b55      	ldr	r3, [pc, #340]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800411a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004124:	4952      	ldr	r1, [pc, #328]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004126:	4313      	orrs	r3, r2
 8004128:	650b      	str	r3, [r1, #80]	; 0x50
 800412a:	e001      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	7dfb      	ldrb	r3, [r7, #23]
 800412e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d049      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004144:	d02e      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004146:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800414a:	d828      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800414c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004150:	d02a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004152:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004156:	d822      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004158:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800415c:	d026      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x484>
 800415e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004162:	d81c      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004164:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004168:	d010      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800416a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800416e:	d816      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01d      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004178:	d111      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3304      	adds	r3, #4
 800417e:	2101      	movs	r1, #1
 8004180:	4618      	mov	r0, r3
 8004182:	f000 ffd5 	bl	8005130 <RCCEx_PLL2_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800418a:	e012      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3324      	adds	r3, #36	; 0x24
 8004190:	2101      	movs	r1, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f001 f87e 	bl	8005294 <RCCEx_PLL3_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800419c:	e009      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	75fb      	strb	r3, [r7, #23]
      break;
 80041a2:	e006      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80041a4:	bf00      	nop
 80041a6:	e004      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80041a8:	bf00      	nop
 80041aa:	e002      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80041ac:	bf00      	nop
 80041ae:	e000      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80041b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b2:	7dfb      	ldrb	r3, [r7, #23]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d109      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80041b8:	4b2d      	ldr	r3, [pc, #180]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041bc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c4:	492a      	ldr	r1, [pc, #168]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	650b      	str	r3, [r1, #80]	; 0x50
 80041ca:	e001      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
 80041ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d04d      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041e6:	d02e      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80041e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041ec:	d828      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80041ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f2:	d02a      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80041f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f8:	d822      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80041fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041fe:	d026      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004200:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004204:	d81c      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800420a:	d010      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800420c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004210:	d816      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d01d      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800421a:	d111      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3304      	adds	r3, #4
 8004220:	2101      	movs	r1, #1
 8004222:	4618      	mov	r0, r3
 8004224:	f000 ff84 	bl	8005130 <RCCEx_PLL2_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800422c:	e012      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3324      	adds	r3, #36	; 0x24
 8004232:	2101      	movs	r1, #1
 8004234:	4618      	mov	r0, r3
 8004236:	f001 f82d 	bl	8005294 <RCCEx_PLL3_Config>
 800423a:	4603      	mov	r3, r0
 800423c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800423e:	e009      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	75fb      	strb	r3, [r7, #23]
      break;
 8004244:	e006      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004246:	bf00      	nop
 8004248:	e004      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800424a:	bf00      	nop
 800424c:	e002      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800424e:	bf00      	nop
 8004250:	e000      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004254:	7dfb      	ldrb	r3, [r7, #23]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10c      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800425a:	4b05      	ldr	r3, [pc, #20]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800425c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004268:	4901      	ldr	r1, [pc, #4]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800426a:	4313      	orrs	r3, r2
 800426c:	658b      	str	r3, [r1, #88]	; 0x58
 800426e:	e003      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004270:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004274:	7dfb      	ldrb	r3, [r7, #23]
 8004276:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d02f      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800428c:	d00e      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x584>
 800428e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004292:	d814      	bhi.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d015      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004298:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800429c:	d10f      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800429e:	4baf      	ldr	r3, [pc, #700]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	4aae      	ldr	r2, [pc, #696]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80042aa:	e00c      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3304      	adds	r3, #4
 80042b0:	2101      	movs	r1, #1
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 ff3c 	bl	8005130 <RCCEx_PLL2_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80042bc:	e003      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	75fb      	strb	r3, [r7, #23]
      break;
 80042c2:	e000      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80042c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042c6:	7dfb      	ldrb	r3, [r7, #23]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042cc:	4ba3      	ldr	r3, [pc, #652]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d8:	49a0      	ldr	r1, [pc, #640]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	650b      	str	r3, [r1, #80]	; 0x50
 80042de:	e001      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
 80042e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d032      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d81b      	bhi.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80042f8:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80042fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fe:	bf00      	nop
 8004300:	08004337 	.word	0x08004337
 8004304:	08004311 	.word	0x08004311
 8004308:	0800431f 	.word	0x0800431f
 800430c:	08004337 	.word	0x08004337
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004310:	4b92      	ldr	r3, [pc, #584]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	4a91      	ldr	r2, [pc, #580]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800431a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800431c:	e00c      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3304      	adds	r3, #4
 8004322:	2102      	movs	r1, #2
 8004324:	4618      	mov	r0, r3
 8004326:	f000 ff03 	bl	8005130 <RCCEx_PLL2_Config>
 800432a:	4603      	mov	r3, r0
 800432c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800432e:	e003      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	75fb      	strb	r3, [r7, #23]
      break;
 8004334:	e000      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004338:	7dfb      	ldrb	r3, [r7, #23]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800433e:	4b87      	ldr	r3, [pc, #540]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004342:	f023 0203 	bic.w	r2, r3, #3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434a:	4984      	ldr	r1, [pc, #528]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800434c:	4313      	orrs	r3, r2
 800434e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004350:	e001      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004352:	7dfb      	ldrb	r3, [r7, #23]
 8004354:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 8086 	beq.w	8004470 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004364:	4b7e      	ldr	r3, [pc, #504]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a7d      	ldr	r2, [pc, #500]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800436a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004370:	f7fe f9ae 	bl	80026d0 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004376:	e009      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004378:	f7fe f9aa 	bl	80026d0 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b64      	cmp	r3, #100	; 0x64
 8004384:	d902      	bls.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	75fb      	strb	r3, [r7, #23]
        break;
 800438a:	e005      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800438c:	4b74      	ldr	r3, [pc, #464]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0ef      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004398:	7dfb      	ldrb	r3, [r7, #23]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d166      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800439e:	4b6f      	ldr	r3, [pc, #444]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043a8:	4053      	eors	r3, r2
 80043aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d013      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043b2:	4b6a      	ldr	r3, [pc, #424]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043bc:	4b67      	ldr	r3, [pc, #412]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c0:	4a66      	ldr	r2, [pc, #408]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043c8:	4b64      	ldr	r3, [pc, #400]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	4a63      	ldr	r2, [pc, #396]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80043d4:	4a61      	ldr	r2, [pc, #388]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e4:	d115      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e6:	f7fe f973 	bl	80026d0 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043ec:	e00b      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f7fe f96f 	bl	80026d0 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d902      	bls.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	75fb      	strb	r3, [r7, #23]
            break;
 8004404:	e005      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004406:	4b55      	ldr	r3, [pc, #340]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0ed      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004412:	7dfb      	ldrb	r3, [r7, #23]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d126      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800441e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004426:	d10d      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004428:	4b4c      	ldr	r3, [pc, #304]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004436:	0919      	lsrs	r1, r3, #4
 8004438:	4b4a      	ldr	r3, [pc, #296]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800443a:	400b      	ands	r3, r1
 800443c:	4947      	ldr	r1, [pc, #284]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800443e:	4313      	orrs	r3, r2
 8004440:	610b      	str	r3, [r1, #16]
 8004442:	e005      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004444:	4b45      	ldr	r3, [pc, #276]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	4a44      	ldr	r2, [pc, #272]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800444a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800444e:	6113      	str	r3, [r2, #16]
 8004450:	4b42      	ldr	r3, [pc, #264]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004452:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800445a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445e:	493f      	ldr	r1, [pc, #252]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004460:	4313      	orrs	r3, r2
 8004462:	670b      	str	r3, [r1, #112]	; 0x70
 8004464:	e004      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004466:	7dfb      	ldrb	r3, [r7, #23]
 8004468:	75bb      	strb	r3, [r7, #22]
 800446a:	e001      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446c:	7dfb      	ldrb	r3, [r7, #23]
 800446e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8085 	beq.w	8004588 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004482:	2b28      	cmp	r3, #40	; 0x28
 8004484:	d866      	bhi.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004486:	a201      	add	r2, pc, #4	; (adr r2, 800448c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448c:	08004569 	.word	0x08004569
 8004490:	08004555 	.word	0x08004555
 8004494:	08004555 	.word	0x08004555
 8004498:	08004555 	.word	0x08004555
 800449c:	08004555 	.word	0x08004555
 80044a0:	08004555 	.word	0x08004555
 80044a4:	08004555 	.word	0x08004555
 80044a8:	08004555 	.word	0x08004555
 80044ac:	08004531 	.word	0x08004531
 80044b0:	08004555 	.word	0x08004555
 80044b4:	08004555 	.word	0x08004555
 80044b8:	08004555 	.word	0x08004555
 80044bc:	08004555 	.word	0x08004555
 80044c0:	08004555 	.word	0x08004555
 80044c4:	08004555 	.word	0x08004555
 80044c8:	08004555 	.word	0x08004555
 80044cc:	08004543 	.word	0x08004543
 80044d0:	08004555 	.word	0x08004555
 80044d4:	08004555 	.word	0x08004555
 80044d8:	08004555 	.word	0x08004555
 80044dc:	08004555 	.word	0x08004555
 80044e0:	08004555 	.word	0x08004555
 80044e4:	08004555 	.word	0x08004555
 80044e8:	08004555 	.word	0x08004555
 80044ec:	08004569 	.word	0x08004569
 80044f0:	08004555 	.word	0x08004555
 80044f4:	08004555 	.word	0x08004555
 80044f8:	08004555 	.word	0x08004555
 80044fc:	08004555 	.word	0x08004555
 8004500:	08004555 	.word	0x08004555
 8004504:	08004555 	.word	0x08004555
 8004508:	08004555 	.word	0x08004555
 800450c:	08004569 	.word	0x08004569
 8004510:	08004555 	.word	0x08004555
 8004514:	08004555 	.word	0x08004555
 8004518:	08004555 	.word	0x08004555
 800451c:	08004555 	.word	0x08004555
 8004520:	08004555 	.word	0x08004555
 8004524:	08004555 	.word	0x08004555
 8004528:	08004555 	.word	0x08004555
 800452c:	08004569 	.word	0x08004569
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	2101      	movs	r1, #1
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fdfa 	bl	8005130 <RCCEx_PLL2_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004540:	e013      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3324      	adds	r3, #36	; 0x24
 8004546:	2101      	movs	r1, #1
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fea3 	bl	8005294 <RCCEx_PLL3_Config>
 800454e:	4603      	mov	r3, r0
 8004550:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004552:	e00a      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	75fb      	strb	r3, [r7, #23]
      break;
 8004558:	e007      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800455a:	bf00      	nop
 800455c:	58024400 	.word	0x58024400
 8004560:	58024800 	.word	0x58024800
 8004564:	00ffffcf 	.word	0x00ffffcf
      break;
 8004568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800456a:	7dfb      	ldrb	r3, [r7, #23]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d109      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004570:	4b96      	ldr	r3, [pc, #600]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004574:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800457c:	4993      	ldr	r1, [pc, #588]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800457e:	4313      	orrs	r3, r2
 8004580:	654b      	str	r3, [r1, #84]	; 0x54
 8004582:	e001      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004584:	7dfb      	ldrb	r3, [r7, #23]
 8004586:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d038      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004598:	2b05      	cmp	r3, #5
 800459a:	d821      	bhi.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800459c:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800459e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a2:	bf00      	nop
 80045a4:	080045e7 	.word	0x080045e7
 80045a8:	080045bd 	.word	0x080045bd
 80045ac:	080045cf 	.word	0x080045cf
 80045b0:	080045e7 	.word	0x080045e7
 80045b4:	080045e7 	.word	0x080045e7
 80045b8:	080045e7 	.word	0x080045e7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3304      	adds	r3, #4
 80045c0:	2101      	movs	r1, #1
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fdb4 	bl	8005130 <RCCEx_PLL2_Config>
 80045c8:	4603      	mov	r3, r0
 80045ca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80045cc:	e00c      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3324      	adds	r3, #36	; 0x24
 80045d2:	2101      	movs	r1, #1
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fe5d 	bl	8005294 <RCCEx_PLL3_Config>
 80045da:	4603      	mov	r3, r0
 80045dc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80045de:	e003      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	75fb      	strb	r3, [r7, #23]
      break;
 80045e4:	e000      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80045e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80045ee:	4b77      	ldr	r3, [pc, #476]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80045f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f2:	f023 0207 	bic.w	r2, r3, #7
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fa:	4974      	ldr	r1, [pc, #464]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	654b      	str	r3, [r1, #84]	; 0x54
 8004600:	e001      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004602:	7dfb      	ldrb	r3, [r7, #23]
 8004604:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b00      	cmp	r3, #0
 8004610:	d03a      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004618:	2b05      	cmp	r3, #5
 800461a:	d821      	bhi.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800461c:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800461e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004622:	bf00      	nop
 8004624:	08004667 	.word	0x08004667
 8004628:	0800463d 	.word	0x0800463d
 800462c:	0800464f 	.word	0x0800464f
 8004630:	08004667 	.word	0x08004667
 8004634:	08004667 	.word	0x08004667
 8004638:	08004667 	.word	0x08004667
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3304      	adds	r3, #4
 8004640:	2101      	movs	r1, #1
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fd74 	bl	8005130 <RCCEx_PLL2_Config>
 8004648:	4603      	mov	r3, r0
 800464a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800464c:	e00c      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3324      	adds	r3, #36	; 0x24
 8004652:	2101      	movs	r1, #1
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fe1d 	bl	8005294 <RCCEx_PLL3_Config>
 800465a:	4603      	mov	r3, r0
 800465c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800465e:	e003      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	75fb      	strb	r3, [r7, #23]
      break;
 8004664:	e000      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004666:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004668:	7dfb      	ldrb	r3, [r7, #23]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800466e:	4b57      	ldr	r3, [pc, #348]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004672:	f023 0207 	bic.w	r2, r3, #7
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467c:	4953      	ldr	r1, [pc, #332]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800467e:	4313      	orrs	r3, r2
 8004680:	658b      	str	r3, [r1, #88]	; 0x58
 8004682:	e001      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004684:	7dfb      	ldrb	r3, [r7, #23]
 8004686:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b00      	cmp	r3, #0
 8004692:	d04b      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800469a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800469e:	d02e      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80046a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046a4:	d828      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80046a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046aa:	d02a      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80046ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b0:	d822      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80046b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046b6:	d026      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80046b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046bc:	d81c      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80046be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046c2:	d010      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80046c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046c8:	d816      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01d      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80046ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046d2:	d111      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	2100      	movs	r1, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fd28 	bl	8005130 <RCCEx_PLL2_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80046e4:	e012      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3324      	adds	r3, #36	; 0x24
 80046ea:	2102      	movs	r1, #2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fdd1 	bl	8005294 <RCCEx_PLL3_Config>
 80046f2:	4603      	mov	r3, r0
 80046f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80046f6:	e009      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	75fb      	strb	r3, [r7, #23]
      break;
 80046fc:	e006      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80046fe:	bf00      	nop
 8004700:	e004      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004702:	bf00      	nop
 8004704:	e002      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004706:	bf00      	nop
 8004708:	e000      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800470a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800470c:	7dfb      	ldrb	r3, [r7, #23]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004712:	4b2e      	ldr	r3, [pc, #184]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004716:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004720:	492a      	ldr	r1, [pc, #168]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004722:	4313      	orrs	r3, r2
 8004724:	654b      	str	r3, [r1, #84]	; 0x54
 8004726:	e001      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004728:	7dfb      	ldrb	r3, [r7, #23]
 800472a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d04d      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800473e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004742:	d02e      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004744:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004748:	d828      	bhi.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800474a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800474e:	d02a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004754:	d822      	bhi.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004756:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800475a:	d026      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800475c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004760:	d81c      	bhi.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004766:	d010      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800476c:	d816      	bhi.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800476e:	2b00      	cmp	r3, #0
 8004770:	d01d      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004776:	d111      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	2100      	movs	r1, #0
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fcd6 	bl	8005130 <RCCEx_PLL2_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004788:	e012      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3324      	adds	r3, #36	; 0x24
 800478e:	2102      	movs	r1, #2
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fd7f 	bl	8005294 <RCCEx_PLL3_Config>
 8004796:	4603      	mov	r3, r0
 8004798:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800479a:	e009      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	75fb      	strb	r3, [r7, #23]
      break;
 80047a0:	e006      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80047a2:	bf00      	nop
 80047a4:	e004      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80047a6:	bf00      	nop
 80047a8:	e002      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80047aa:	bf00      	nop
 80047ac:	e000      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80047ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047b0:	7dfb      	ldrb	r3, [r7, #23]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10c      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047b6:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80047b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047c4:	4901      	ldr	r1, [pc, #4]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	658b      	str	r3, [r1, #88]	; 0x58
 80047ca:	e003      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80047cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d0:	7dfb      	ldrb	r3, [r7, #23]
 80047d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d04b      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80047ea:	d02e      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80047ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80047f0:	d828      	bhi.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80047f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f6:	d02a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80047f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047fc:	d822      	bhi.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80047fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004802:	d026      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004804:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004808:	d81c      	bhi.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800480a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800480e:	d010      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004810:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004814:	d816      	bhi.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d01d      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800481a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800481e:	d111      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3304      	adds	r3, #4
 8004824:	2100      	movs	r1, #0
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fc82 	bl	8005130 <RCCEx_PLL2_Config>
 800482c:	4603      	mov	r3, r0
 800482e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004830:	e012      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3324      	adds	r3, #36	; 0x24
 8004836:	2102      	movs	r1, #2
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fd2b 	bl	8005294 <RCCEx_PLL3_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004842:	e009      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	75fb      	strb	r3, [r7, #23]
      break;
 8004848:	e006      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800484a:	bf00      	nop
 800484c:	e004      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800484e:	bf00      	nop
 8004850:	e002      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004852:	bf00      	nop
 8004854:	e000      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004858:	7dfb      	ldrb	r3, [r7, #23]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10a      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800485e:	4b9d      	ldr	r3, [pc, #628]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800486c:	4999      	ldr	r1, [pc, #612]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800486e:	4313      	orrs	r3, r2
 8004870:	658b      	str	r3, [r1, #88]	; 0x58
 8004872:	e001      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004874:	7dfb      	ldrb	r3, [r7, #23]
 8004876:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800488a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488e:	d10a      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3324      	adds	r3, #36	; 0x24
 8004894:	2102      	movs	r1, #2
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fcfc 	bl	8005294 <RCCEx_PLL3_Config>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80048a6:	4b8b      	ldr	r3, [pc, #556]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048b4:	4987      	ldr	r1, [pc, #540]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0310 	and.w	r3, r3, #16
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d01a      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d0:	d10a      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3324      	adds	r3, #36	; 0x24
 80048d6:	2102      	movs	r1, #2
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fcdb 	bl	8005294 <RCCEx_PLL3_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048e8:	4b7a      	ldr	r3, [pc, #488]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048f6:	4977      	ldr	r1, [pc, #476]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d034      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800490e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004912:	d01d      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004918:	d817      	bhi.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800491e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004922:	d009      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004924:	e011      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3304      	adds	r3, #4
 800492a:	2100      	movs	r1, #0
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fbff 	bl	8005130 <RCCEx_PLL2_Config>
 8004932:	4603      	mov	r3, r0
 8004934:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004936:	e00c      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3324      	adds	r3, #36	; 0x24
 800493c:	2102      	movs	r1, #2
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fca8 	bl	8005294 <RCCEx_PLL3_Config>
 8004944:	4603      	mov	r3, r0
 8004946:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004948:	e003      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	75fb      	strb	r3, [r7, #23]
      break;
 800494e:	e000      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004950:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004952:	7dfb      	ldrb	r3, [r7, #23]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10a      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004958:	4b5e      	ldr	r3, [pc, #376]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800495a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004966:	495b      	ldr	r1, [pc, #364]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004968:	4313      	orrs	r3, r2
 800496a:	658b      	str	r3, [r1, #88]	; 0x58
 800496c:	e001      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496e:	7dfb      	ldrb	r3, [r7, #23]
 8004970:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d033      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004984:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004988:	d01c      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800498a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800498e:	d816      	bhi.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004994:	d003      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800499a:	d007      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800499c:	e00f      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800499e:	4b4d      	ldr	r3, [pc, #308]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a2:	4a4c      	ldr	r2, [pc, #304]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80049aa:	e00c      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3324      	adds	r3, #36	; 0x24
 80049b0:	2101      	movs	r1, #1
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fc6e 	bl	8005294 <RCCEx_PLL3_Config>
 80049b8:	4603      	mov	r3, r0
 80049ba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80049bc:	e003      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	75fb      	strb	r3, [r7, #23]
      break;
 80049c2:	e000      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80049c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049cc:	4b41      	ldr	r3, [pc, #260]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049da:	493e      	ldr	r1, [pc, #248]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	654b      	str	r3, [r1, #84]	; 0x54
 80049e0:	e001      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e2:	7dfb      	ldrb	r3, [r7, #23]
 80049e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d029      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80049fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049fe:	d007      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004a00:	e00f      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a02:	4b34      	ldr	r3, [pc, #208]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	4a33      	ldr	r2, [pc, #204]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004a0e:	e00b      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3304      	adds	r3, #4
 8004a14:	2102      	movs	r1, #2
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fb8a 	bl	8005130 <RCCEx_PLL2_Config>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004a20:	e002      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	75fb      	strb	r3, [r7, #23]
      break;
 8004a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a28:	7dfb      	ldrb	r3, [r7, #23]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d109      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004a2e:	4b29      	ldr	r3, [pc, #164]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3a:	4926      	ldr	r1, [pc, #152]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a40:	e001      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a42:	7dfb      	ldrb	r3, [r7, #23]
 8004a44:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3324      	adds	r3, #36	; 0x24
 8004a56:	2102      	movs	r1, #2
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fc1b 	bl	8005294 <RCCEx_PLL3_Config>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d033      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a7c:	d017      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004a7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a82:	d811      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a88:	d013      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a8e:	d80b      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d010      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a98:	d106      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a9a:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	4a0d      	ldr	r2, [pc, #52]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004aa6:	e007      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8004aac:	e004      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004aae:	bf00      	nop
 8004ab0:	e002      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004ab2:	bf00      	nop
 8004ab4:	e000      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004ab6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10c      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004abe:	4b05      	ldr	r3, [pc, #20]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aca:	4902      	ldr	r1, [pc, #8]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	654b      	str	r3, [r1, #84]	; 0x54
 8004ad0:	e004      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004ad2:	bf00      	nop
 8004ad4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad8:	7dfb      	ldrb	r3, [r7, #23]
 8004ada:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ae8:	4b31      	ldr	r3, [pc, #196]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af4:	492e      	ldr	r1, [pc, #184]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b06:	4b2a      	ldr	r3, [pc, #168]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b14:	4926      	ldr	r1, [pc, #152]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d008      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b26:	4b22      	ldr	r3, [pc, #136]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b32:	491f      	ldr	r1, [pc, #124]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00d      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b44:	4b1a      	ldr	r3, [pc, #104]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	4a19      	ldr	r2, [pc, #100]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b4e:	6113      	str	r3, [r2, #16]
 8004b50:	4b17      	ldr	r3, [pc, #92]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004b5a:	4915      	ldr	r1, [pc, #84]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	da08      	bge.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b68:	4b11      	ldr	r3, [pc, #68]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b74:	490e      	ldr	r1, [pc, #56]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d009      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b86:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b94:	4906      	ldr	r1, [pc, #24]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004b9a:	7dbb      	ldrb	r3, [r7, #22]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	58024400 	.word	0x58024400

08004bb4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004bb8:	f7ff f85a 	bl	8003c70 <HAL_RCC_GetHCLKFreq>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	091b      	lsrs	r3, r3, #4
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	4904      	ldr	r1, [pc, #16]	; (8004bdc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004bca:	5ccb      	ldrb	r3, [r1, r3]
 8004bcc:	f003 031f 	and.w	r3, r3, #31
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	58024400 	.word	0x58024400
 8004bdc:	08009500 	.word	0x08009500

08004be0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b089      	sub	sp, #36	; 0x24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004be8:	4ba1      	ldr	r3, [pc, #644]	; (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004bf2:	4b9f      	ldr	r3, [pc, #636]	; (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	0b1b      	lsrs	r3, r3, #12
 8004bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bfc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004bfe:	4b9c      	ldr	r3, [pc, #624]	; (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	091b      	lsrs	r3, r3, #4
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004c0a:	4b99      	ldr	r3, [pc, #612]	; (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0e:	08db      	lsrs	r3, r3, #3
 8004c10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	fb02 f303 	mul.w	r3, r2, r3
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8111 	beq.w	8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	f000 8083 	beq.w	8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	f200 80a1 	bhi.w	8004d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d056      	beq.n	8004cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c4a:	e099      	b.n	8004d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c4c:	4b88      	ldr	r3, [pc, #544]	; (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d02d      	beq.n	8004cb4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c58:	4b85      	ldr	r3, [pc, #532]	; (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	08db      	lsrs	r3, r3, #3
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	4a84      	ldr	r2, [pc, #528]	; (8004e74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
 8004c68:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	ee07 3a90 	vmov	s15, r3
 8004c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c82:	4b7b      	ldr	r3, [pc, #492]	; (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004cb2:	e087      	b.n	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cbe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc6:	4b6a      	ldr	r3, [pc, #424]	; (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cda:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cf6:	e065      	b.n	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d0a:	4b59      	ldr	r3, [pc, #356]	; (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d3a:	e043      	b.n	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d4e:	4b48      	ldr	r3, [pc, #288]	; (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d7e:	e021      	b.n	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d92:	4b37      	ldr	r3, [pc, #220]	; (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004da6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004dc2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004dc4:	4b2a      	ldr	r3, [pc, #168]	; (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	0a5b      	lsrs	r3, r3, #9
 8004dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dde:	edd7 6a07 	vldr	s13, [r7, #28]
 8004de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dea:	ee17 2a90 	vmov	r2, s15
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004df2:	4b1f      	ldr	r3, [pc, #124]	; (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	0c1b      	lsrs	r3, r3, #16
 8004df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dfc:	ee07 3a90 	vmov	s15, r3
 8004e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e18:	ee17 2a90 	vmov	r2, s15
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004e20:	4b13      	ldr	r3, [pc, #76]	; (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	0e1b      	lsrs	r3, r3, #24
 8004e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e46:	ee17 2a90 	vmov	r2, s15
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e4e:	e008      	b.n	8004e62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	609a      	str	r2, [r3, #8]
}
 8004e62:	bf00      	nop
 8004e64:	3724      	adds	r7, #36	; 0x24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	58024400 	.word	0x58024400
 8004e74:	03d09000 	.word	0x03d09000
 8004e78:	46000000 	.word	0x46000000
 8004e7c:	4c742400 	.word	0x4c742400
 8004e80:	4a742400 	.word	0x4a742400
 8004e84:	4af42400 	.word	0x4af42400

08004e88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b089      	sub	sp, #36	; 0x24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e90:	4ba1      	ldr	r3, [pc, #644]	; (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004e9a:	4b9f      	ldr	r3, [pc, #636]	; (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9e:	0d1b      	lsrs	r3, r3, #20
 8004ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ea4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ea6:	4b9c      	ldr	r3, [pc, #624]	; (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	0a1b      	lsrs	r3, r3, #8
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004eb2:	4b99      	ldr	r3, [pc, #612]	; (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	08db      	lsrs	r3, r3, #3
 8004eb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	fb02 f303 	mul.w	r3, r2, r3
 8004ec2:	ee07 3a90 	vmov	s15, r3
 8004ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8111 	beq.w	80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	f000 8083 	beq.w	8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	f200 80a1 	bhi.w	8005028 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d056      	beq.n	8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004ef2:	e099      	b.n	8005028 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ef4:	4b88      	ldr	r3, [pc, #544]	; (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d02d      	beq.n	8004f5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f00:	4b85      	ldr	r3, [pc, #532]	; (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	08db      	lsrs	r3, r3, #3
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	4a84      	ldr	r2, [pc, #528]	; (800511c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f10:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	ee07 3a90 	vmov	s15, r3
 8004f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	ee07 3a90 	vmov	s15, r3
 8004f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f2a:	4b7b      	ldr	r3, [pc, #492]	; (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f56:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004f5a:	e087      	b.n	800506c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	ee07 3a90 	vmov	s15, r3
 8004f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f6e:	4b6a      	ldr	r3, [pc, #424]	; (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f9e:	e065      	b.n	800506c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004faa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fb2:	4b59      	ldr	r3, [pc, #356]	; (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fe2:	e043      	b.n	800506c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800512c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ff6:	4b48      	ldr	r3, [pc, #288]	; (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005006:	ed97 6a03 	vldr	s12, [r7, #12]
 800500a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800500e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800501a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800501e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005022:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005026:	e021      	b.n	800506c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800503a:	4b37      	ldr	r3, [pc, #220]	; (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800504a:	ed97 6a03 	vldr	s12, [r7, #12]
 800504e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800505a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800505e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005066:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800506a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800506c:	4b2a      	ldr	r3, [pc, #168]	; (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	0a5b      	lsrs	r3, r3, #9
 8005072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005082:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005086:	edd7 6a07 	vldr	s13, [r7, #28]
 800508a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800508e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005092:	ee17 2a90 	vmov	r2, s15
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800509a:	4b1f      	ldr	r3, [pc, #124]	; (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	0c1b      	lsrs	r3, r3, #16
 80050a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050a4:	ee07 3a90 	vmov	s15, r3
 80050a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80050b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050c0:	ee17 2a90 	vmov	r2, s15
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80050c8:	4b13      	ldr	r3, [pc, #76]	; (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	0e1b      	lsrs	r3, r3, #24
 80050ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80050e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ee:	ee17 2a90 	vmov	r2, s15
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80050f6:	e008      	b.n	800510a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	609a      	str	r2, [r3, #8]
}
 800510a:	bf00      	nop
 800510c:	3724      	adds	r7, #36	; 0x24
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	58024400 	.word	0x58024400
 800511c:	03d09000 	.word	0x03d09000
 8005120:	46000000 	.word	0x46000000
 8005124:	4c742400 	.word	0x4c742400
 8005128:	4a742400 	.word	0x4a742400
 800512c:	4af42400 	.word	0x4af42400

08005130 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800513e:	4b53      	ldr	r3, [pc, #332]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	2b03      	cmp	r3, #3
 8005148:	d101      	bne.n	800514e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e099      	b.n	8005282 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800514e:	4b4f      	ldr	r3, [pc, #316]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a4e      	ldr	r2, [pc, #312]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 8005154:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800515a:	f7fd fab9 	bl	80026d0 <HAL_GetTick>
 800515e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005160:	e008      	b.n	8005174 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005162:	f7fd fab5 	bl	80026d0 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e086      	b.n	8005282 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005174:	4b45      	ldr	r3, [pc, #276]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1f0      	bne.n	8005162 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005180:	4b42      	ldr	r3, [pc, #264]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	031b      	lsls	r3, r3, #12
 800518e:	493f      	ldr	r1, [pc, #252]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 8005190:	4313      	orrs	r3, r2
 8005192:	628b      	str	r3, [r1, #40]	; 0x28
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	3b01      	subs	r3, #1
 800519a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	025b      	lsls	r3, r3, #9
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	041b      	lsls	r3, r3, #16
 80051b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	3b01      	subs	r3, #1
 80051be:	061b      	lsls	r3, r3, #24
 80051c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80051c4:	4931      	ldr	r1, [pc, #196]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80051ca:	4b30      	ldr	r3, [pc, #192]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 80051cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	492d      	ldr	r1, [pc, #180]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80051dc:	4b2b      	ldr	r3, [pc, #172]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 80051de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e0:	f023 0220 	bic.w	r2, r3, #32
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	4928      	ldr	r1, [pc, #160]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80051ee:	4b27      	ldr	r3, [pc, #156]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 80051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f2:	4a26      	ldr	r2, [pc, #152]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 80051f4:	f023 0310 	bic.w	r3, r3, #16
 80051f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80051fa:	4b24      	ldr	r3, [pc, #144]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 80051fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051fe:	4b24      	ldr	r3, [pc, #144]	; (8005290 <RCCEx_PLL2_Config+0x160>)
 8005200:	4013      	ands	r3, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	69d2      	ldr	r2, [r2, #28]
 8005206:	00d2      	lsls	r2, r2, #3
 8005208:	4920      	ldr	r1, [pc, #128]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 800520a:	4313      	orrs	r3, r2
 800520c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800520e:	4b1f      	ldr	r3, [pc, #124]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 8005210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005212:	4a1e      	ldr	r2, [pc, #120]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 8005214:	f043 0310 	orr.w	r3, r3, #16
 8005218:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005220:	4b1a      	ldr	r3, [pc, #104]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	4a19      	ldr	r2, [pc, #100]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 8005226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800522a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800522c:	e00f      	b.n	800524e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d106      	bne.n	8005242 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005234:	4b15      	ldr	r3, [pc, #84]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	4a14      	ldr	r2, [pc, #80]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 800523a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800523e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005240:	e005      	b.n	800524e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005242:	4b12      	ldr	r3, [pc, #72]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	4a11      	ldr	r2, [pc, #68]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 8005248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800524c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800524e:	4b0f      	ldr	r3, [pc, #60]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a0e      	ldr	r2, [pc, #56]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 8005254:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800525a:	f7fd fa39 	bl	80026d0 <HAL_GetTick>
 800525e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005260:	e008      	b.n	8005274 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005262:	f7fd fa35 	bl	80026d0 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e006      	b.n	8005282 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005274:	4b05      	ldr	r3, [pc, #20]	; (800528c <RCCEx_PLL2_Config+0x15c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0f0      	beq.n	8005262 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005280:	7bfb      	ldrb	r3, [r7, #15]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	58024400 	.word	0x58024400
 8005290:	ffff0007 	.word	0xffff0007

08005294 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052a2:	4b53      	ldr	r3, [pc, #332]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d101      	bne.n	80052b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e099      	b.n	80053e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80052b2:	4b4f      	ldr	r3, [pc, #316]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a4e      	ldr	r2, [pc, #312]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80052b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052be:	f7fd fa07 	bl	80026d0 <HAL_GetTick>
 80052c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052c4:	e008      	b.n	80052d8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80052c6:	f7fd fa03 	bl	80026d0 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e086      	b.n	80053e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052d8:	4b45      	ldr	r3, [pc, #276]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1f0      	bne.n	80052c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80052e4:	4b42      	ldr	r3, [pc, #264]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80052e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	051b      	lsls	r3, r3, #20
 80052f2:	493f      	ldr	r1, [pc, #252]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	628b      	str	r3, [r1, #40]	; 0x28
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	3b01      	subs	r3, #1
 8005308:	025b      	lsls	r3, r3, #9
 800530a:	b29b      	uxth	r3, r3
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	3b01      	subs	r3, #1
 8005314:	041b      	lsls	r3, r3, #16
 8005316:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	3b01      	subs	r3, #1
 8005322:	061b      	lsls	r3, r3, #24
 8005324:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005328:	4931      	ldr	r1, [pc, #196]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800532a:	4313      	orrs	r3, r2
 800532c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800532e:	4b30      	ldr	r3, [pc, #192]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005332:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	492d      	ldr	r1, [pc, #180]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800533c:	4313      	orrs	r3, r2
 800533e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005340:	4b2b      	ldr	r3, [pc, #172]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	4928      	ldr	r1, [pc, #160]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800534e:	4313      	orrs	r3, r2
 8005350:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005352:	4b27      	ldr	r3, [pc, #156]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	4a26      	ldr	r2, [pc, #152]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800535c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800535e:	4b24      	ldr	r3, [pc, #144]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005362:	4b24      	ldr	r3, [pc, #144]	; (80053f4 <RCCEx_PLL3_Config+0x160>)
 8005364:	4013      	ands	r3, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	69d2      	ldr	r2, [r2, #28]
 800536a:	00d2      	lsls	r2, r2, #3
 800536c:	4920      	ldr	r1, [pc, #128]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800536e:	4313      	orrs	r3, r2
 8005370:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005372:	4b1f      	ldr	r3, [pc, #124]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005376:	4a1e      	ldr	r2, [pc, #120]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800537c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d106      	bne.n	8005392 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005384:	4b1a      	ldr	r3, [pc, #104]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	4a19      	ldr	r2, [pc, #100]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800538a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800538e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005390:	e00f      	b.n	80053b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d106      	bne.n	80053a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005398:	4b15      	ldr	r3, [pc, #84]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539c:	4a14      	ldr	r2, [pc, #80]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800539e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053a4:	e005      	b.n	80053b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80053a6:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80053a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053aa:	4a11      	ldr	r2, [pc, #68]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80053ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80053b2:	4b0f      	ldr	r3, [pc, #60]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a0e      	ldr	r2, [pc, #56]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80053b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053be:	f7fd f987 	bl	80026d0 <HAL_GetTick>
 80053c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053c4:	e008      	b.n	80053d8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80053c6:	f7fd f983 	bl	80026d0 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e006      	b.n	80053e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053d8:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f0      	beq.n	80053c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	58024400 	.word	0x58024400
 80053f4:	ffff0007 	.word	0xffff0007

080053f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e0f1      	b.n	80055ee <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a78      	ldr	r2, [pc, #480]	; (80055f8 <HAL_SPI_Init+0x200>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d00f      	beq.n	800543a <HAL_SPI_Init+0x42>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a77      	ldr	r2, [pc, #476]	; (80055fc <HAL_SPI_Init+0x204>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00a      	beq.n	800543a <HAL_SPI_Init+0x42>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a75      	ldr	r2, [pc, #468]	; (8005600 <HAL_SPI_Init+0x208>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d005      	beq.n	800543a <HAL_SPI_Init+0x42>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	2b0f      	cmp	r3, #15
 8005434:	d901      	bls.n	800543a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e0d9      	b.n	80055ee <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 ff66 	bl	800630c <SPI_GetPacketSize>
 8005440:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a6c      	ldr	r2, [pc, #432]	; (80055f8 <HAL_SPI_Init+0x200>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00c      	beq.n	8005466 <HAL_SPI_Init+0x6e>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a6a      	ldr	r2, [pc, #424]	; (80055fc <HAL_SPI_Init+0x204>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d007      	beq.n	8005466 <HAL_SPI_Init+0x6e>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a69      	ldr	r2, [pc, #420]	; (8005600 <HAL_SPI_Init+0x208>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d002      	beq.n	8005466 <HAL_SPI_Init+0x6e>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b08      	cmp	r3, #8
 8005464:	d811      	bhi.n	800548a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800546a:	4a63      	ldr	r2, [pc, #396]	; (80055f8 <HAL_SPI_Init+0x200>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d009      	beq.n	8005484 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a61      	ldr	r2, [pc, #388]	; (80055fc <HAL_SPI_Init+0x204>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d004      	beq.n	8005484 <HAL_SPI_Init+0x8c>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a60      	ldr	r2, [pc, #384]	; (8005600 <HAL_SPI_Init+0x208>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d104      	bne.n	800548e <HAL_SPI_Init+0x96>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b10      	cmp	r3, #16
 8005488:	d901      	bls.n	800548e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e0af      	b.n	80055ee <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fc fe94 	bl	80021d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0201 	bic.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80054ca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054d4:	d119      	bne.n	800550a <HAL_SPI_Init+0x112>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054de:	d103      	bne.n	80054e8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d008      	beq.n	80054fa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10c      	bne.n	800550a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80054f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054f8:	d107      	bne.n	800550a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005508:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69da      	ldr	r2, [r3, #28]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005512:	431a      	orrs	r2, r3
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551c:	ea42 0103 	orr.w	r1, r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	431a      	orrs	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	431a      	orrs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	431a      	orrs	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800556a:	ea42 0103 	orr.w	r1, r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d113      	bne.n	80055aa <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005594:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055a8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0201 	bic.w	r2, r2, #1
 80055b8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	40013000 	.word	0x40013000
 80055fc:	40003800 	.word	0x40003800
 8005600:	40003c00 	.word	0x40003c00

08005604 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08a      	sub	sp, #40	; 0x28
 8005608:	af02      	add	r7, sp, #8
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	4613      	mov	r3, r2
 8005612:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3320      	adds	r3, #32
 800561a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_SPI_Transmit+0x2a>
 800562a:	2302      	movs	r3, #2
 800562c:	e1d7      	b.n	80059de <HAL_SPI_Transmit+0x3da>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005636:	f7fd f84b 	bl	80026d0 <HAL_GetTick>
 800563a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b01      	cmp	r3, #1
 8005646:	d007      	beq.n	8005658 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005648:	2302      	movs	r3, #2
 800564a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005654:	7efb      	ldrb	r3, [r7, #27]
 8005656:	e1c2      	b.n	80059de <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_SPI_Transmit+0x60>
 800565e:	88fb      	ldrh	r3, [r7, #6]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d107      	bne.n	8005674 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005670:	7efb      	ldrb	r3, [r7, #27]
 8005672:	e1b4      	b.n	80059de <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2203      	movs	r2, #3
 8005678:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	88fa      	ldrh	r2, [r7, #6]
 800568e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	88fa      	ldrh	r2, [r7, #6]
 8005696:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80056c4:	d107      	bne.n	80056d6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	4b96      	ldr	r3, [pc, #600]	; (8005938 <HAL_SPI_Transmit+0x334>)
 80056de:	4013      	ands	r3, r2
 80056e0:	88f9      	ldrh	r1, [r7, #6]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	6812      	ldr	r2, [r2, #0]
 80056e6:	430b      	orrs	r3, r1
 80056e8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0201 	orr.w	r2, r2, #1
 80056f8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005702:	d107      	bne.n	8005714 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005712:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	2b0f      	cmp	r3, #15
 800571a:	d947      	bls.n	80057ac <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800571c:	e03f      	b.n	800579e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b02      	cmp	r3, #2
 800572a:	d114      	bne.n	8005756 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6812      	ldr	r2, [r2, #0]
 8005736:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573c:	1d1a      	adds	r2, r3, #4
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b01      	subs	r3, #1
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005754:	e023      	b.n	800579e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005756:	f7fc ffbb 	bl	80026d0 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d803      	bhi.n	800576e <HAL_SPI_Transmit+0x16a>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576c:	d102      	bne.n	8005774 <HAL_SPI_Transmit+0x170>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d114      	bne.n	800579e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 fcfb 	bl	8006170 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005788:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e11f      	b.n	80059de <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1b9      	bne.n	800571e <HAL_SPI_Transmit+0x11a>
 80057aa:	e0f2      	b.n	8005992 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	2b07      	cmp	r3, #7
 80057b2:	f240 80e7 	bls.w	8005984 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80057b6:	e05d      	b.n	8005874 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d132      	bne.n	800582c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d918      	bls.n	8005804 <HAL_SPI_Transmit+0x200>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d014      	beq.n	8005804 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6812      	ldr	r2, [r2, #0]
 80057e4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ea:	1d1a      	adds	r2, r3, #4
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b02      	subs	r3, #2
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005802:	e037      	b.n	8005874 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005808:	881a      	ldrh	r2, [r3, #0]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005812:	1c9a      	adds	r2, r3, #2
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800581e:	b29b      	uxth	r3, r3
 8005820:	3b01      	subs	r3, #1
 8005822:	b29a      	uxth	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800582a:	e023      	b.n	8005874 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800582c:	f7fc ff50 	bl	80026d0 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d803      	bhi.n	8005844 <HAL_SPI_Transmit+0x240>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005842:	d102      	bne.n	800584a <HAL_SPI_Transmit+0x246>
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d114      	bne.n	8005874 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 fc90 	bl	8006170 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800585e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e0b4      	b.n	80059de <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800587a:	b29b      	uxth	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d19b      	bne.n	80057b8 <HAL_SPI_Transmit+0x1b4>
 8005880:	e087      	b.n	8005992 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b02      	cmp	r3, #2
 800588e:	d155      	bne.n	800593c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b03      	cmp	r3, #3
 800589a:	d918      	bls.n	80058ce <HAL_SPI_Transmit+0x2ca>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a0:	2b40      	cmp	r3, #64	; 0x40
 80058a2:	d914      	bls.n	80058ce <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b4:	1d1a      	adds	r2, r3, #4
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	3b04      	subs	r3, #4
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80058cc:	e05a      	b.n	8005984 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d917      	bls.n	800590a <HAL_SPI_Transmit+0x306>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d013      	beq.n	800590a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e6:	881a      	ldrh	r2, [r3, #0]
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f0:	1c9a      	adds	r2, r3, #2
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	3b02      	subs	r3, #2
 8005900:	b29a      	uxth	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005908:	e03c      	b.n	8005984 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3320      	adds	r3, #32
 8005914:	7812      	ldrb	r2, [r2, #0]
 8005916:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591c:	1c5a      	adds	r2, r3, #1
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005928:	b29b      	uxth	r3, r3
 800592a:	3b01      	subs	r3, #1
 800592c:	b29a      	uxth	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005934:	e026      	b.n	8005984 <HAL_SPI_Transmit+0x380>
 8005936:	bf00      	nop
 8005938:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800593c:	f7fc fec8 	bl	80026d0 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d803      	bhi.n	8005954 <HAL_SPI_Transmit+0x350>
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005952:	d102      	bne.n	800595a <HAL_SPI_Transmit+0x356>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d114      	bne.n	8005984 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 fc08 	bl	8006170 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800596e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e02c      	b.n	80059de <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	f47f af78 	bne.w	8005882 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2200      	movs	r2, #0
 800599a:	2108      	movs	r1, #8
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 fc87 	bl	80062b0 <SPI_WaitOnFlagUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d007      	beq.n	80059b8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ae:	f043 0220 	orr.w	r2, r3, #32
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 fbd9 	bl	8006170 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e000      	b.n	80059de <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80059dc:	7efb      	ldrb	r3, [r7, #27]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3720      	adds	r7, #32
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop

080059e8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08a      	sub	sp, #40	; 0x28
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	4613      	mov	r3, r2
 80059f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3330      	adds	r3, #48	; 0x30
 8005a02:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a0c:	d112      	bne.n	8005a34 <HAL_SPI_Receive+0x4c>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10e      	bne.n	8005a34 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2204      	movs	r2, #4
 8005a1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a1e:	88fa      	ldrh	r2, [r7, #6]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	4613      	mov	r3, r2
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	68b9      	ldr	r1, [r7, #8]
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f978 	bl	8005d20 <HAL_SPI_TransmitReceive>
 8005a30:	4603      	mov	r3, r0
 8005a32:	e16f      	b.n	8005d14 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <HAL_SPI_Receive+0x5a>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	e168      	b.n	8005d14 <HAL_SPI_Receive+0x32c>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a4a:	f7fc fe41 	bl	80026d0 <HAL_GetTick>
 8005a4e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d007      	beq.n	8005a6c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005a68:	7ffb      	ldrb	r3, [r7, #31]
 8005a6a:	e153      	b.n	8005d14 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <HAL_SPI_Receive+0x90>
 8005a72:	88fb      	ldrh	r3, [r7, #6]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d107      	bne.n	8005a88 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005a84:	7ffb      	ldrb	r3, [r7, #31]
 8005a86:	e145      	b.n	8005d14 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2204      	movs	r2, #4
 8005a8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	88fa      	ldrh	r2, [r7, #6]
 8005aa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	88fa      	ldrh	r2, [r7, #6]
 8005aaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005ad8:	d107      	bne.n	8005aea <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ae8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	4b8a      	ldr	r3, [pc, #552]	; (8005d1c <HAL_SPI_Receive+0x334>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	88f9      	ldrh	r1, [r7, #6]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	430b      	orrs	r3, r1
 8005afc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0201 	orr.w	r2, r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b16:	d107      	bne.n	8005b28 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b26:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	2b0f      	cmp	r3, #15
 8005b2e:	d948      	bls.n	8005bc2 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005b30:	e040      	b.n	8005bb4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	695a      	ldr	r2, [r3, #20]
 8005b38:	f248 0308 	movw	r3, #32776	; 0x8008
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d014      	beq.n	8005b6c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b4c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b52:	1d1a      	adds	r2, r3, #4
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005b6a:	e023      	b.n	8005bb4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b6c:	f7fc fdb0 	bl	80026d0 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d803      	bhi.n	8005b84 <HAL_SPI_Receive+0x19c>
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b82:	d102      	bne.n	8005b8a <HAL_SPI_Receive+0x1a2>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d114      	bne.n	8005bb4 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 faf0 	bl	8006170 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e0af      	b.n	8005d14 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1b8      	bne.n	8005b32 <HAL_SPI_Receive+0x14a>
 8005bc0:	e095      	b.n	8005cee <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	2b07      	cmp	r3, #7
 8005bc8:	f240 808b 	bls.w	8005ce2 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005bcc:	e03f      	b.n	8005c4e <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d114      	bne.n	8005c06 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	8812      	ldrh	r2, [r2, #0]
 8005be4:	b292      	uxth	r2, r2
 8005be6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bec:	1c9a      	adds	r2, r3, #2
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005c04:	e023      	b.n	8005c4e <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c06:	f7fc fd63 	bl	80026d0 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d803      	bhi.n	8005c1e <HAL_SPI_Receive+0x236>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1c:	d102      	bne.n	8005c24 <HAL_SPI_Receive+0x23c>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d114      	bne.n	8005c4e <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 faa3 	bl	8006170 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e062      	b.n	8005d14 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1b9      	bne.n	8005bce <HAL_SPI_Receive+0x1e6>
 8005c5a:	e048      	b.n	8005cee <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d117      	bne.n	8005c9a <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c76:	7812      	ldrb	r2, [r2, #0]
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005c98:	e023      	b.n	8005ce2 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c9a:	f7fc fd19 	bl	80026d0 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d803      	bhi.n	8005cb2 <HAL_SPI_Receive+0x2ca>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb0:	d102      	bne.n	8005cb8 <HAL_SPI_Receive+0x2d0>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d114      	bne.n	8005ce2 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 fa59 	bl	8006170 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ccc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e018      	b.n	8005d14 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1b6      	bne.n	8005c5c <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 fa3e 	bl	8006170 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8005d12:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3720      	adds	r7, #32
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	ffff0000 	.word	0xffff0000

08005d20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08e      	sub	sp, #56	; 0x38
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3320      	adds	r3, #32
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3330      	adds	r3, #48	; 0x30
 8005d42:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d101      	bne.n	8005d52 <HAL_SPI_TransmitReceive+0x32>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e209      	b.n	8006166 <HAL_SPI_TransmitReceive+0x446>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d5a:	f7fc fcb9 	bl	80026d0 <HAL_GetTick>
 8005d5e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8005d60:	887b      	ldrh	r3, [r7, #2]
 8005d62:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8005d64:	887b      	ldrh	r3, [r7, #2]
 8005d66:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005d6e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d76:	7efb      	ldrb	r3, [r7, #27]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d014      	beq.n	8005da6 <HAL_SPI_TransmitReceive+0x86>
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d82:	d106      	bne.n	8005d92 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d102      	bne.n	8005d92 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005d8c:	7efb      	ldrb	r3, [r7, #27]
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d009      	beq.n	8005da6 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8005d92:	2302      	movs	r3, #2
 8005d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005da0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005da4:	e1df      	b.n	8006166 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <HAL_SPI_TransmitReceive+0x98>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <HAL_SPI_TransmitReceive+0x98>
 8005db2:	887b      	ldrh	r3, [r7, #2]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d109      	bne.n	8005dcc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005dc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005dca:	e1cc      	b.n	8006166 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d003      	beq.n	8005de0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2205      	movs	r2, #5
 8005ddc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	887a      	ldrh	r2, [r7, #2]
 8005df2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	887a      	ldrh	r2, [r7, #2]
 8005dfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	887a      	ldrh	r2, [r7, #2]
 8005e08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	887a      	ldrh	r2, [r7, #2]
 8005e10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	4b82      	ldr	r3, [pc, #520]	; (8006030 <HAL_SPI_TransmitReceive+0x310>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	8879      	ldrh	r1, [r7, #2]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	6812      	ldr	r2, [r2, #0]
 8005e30:	430b      	orrs	r3, r1
 8005e32:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0201 	orr.w	r2, r2, #1
 8005e42:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e4c:	d107      	bne.n	8005e5e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	2b0f      	cmp	r3, #15
 8005e64:	d970      	bls.n	8005f48 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005e66:	e068      	b.n	8005f3a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d11a      	bne.n	8005eac <HAL_SPI_TransmitReceive+0x18c>
 8005e76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d017      	beq.n	8005eac <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e8c:	1d1a      	adds	r2, r3, #4
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005eaa:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	695a      	ldr	r2, [r3, #20]
 8005eb2:	f248 0308 	movw	r3, #32776	; 0x8008
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d01a      	beq.n	8005ef2 <HAL_SPI_TransmitReceive+0x1d2>
 8005ebc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d017      	beq.n	8005ef2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ecc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ed2:	1d1a      	adds	r2, r3, #4
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005ef0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ef2:	f7fc fbed 	bl	80026d0 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d803      	bhi.n	8005f0a <HAL_SPI_TransmitReceive+0x1ea>
 8005f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f08:	d102      	bne.n	8005f10 <HAL_SPI_TransmitReceive+0x1f0>
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d114      	bne.n	8005f3a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 f92d 	bl	8006170 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e115      	b.n	8006166 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005f3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d193      	bne.n	8005e68 <HAL_SPI_TransmitReceive+0x148>
 8005f40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d190      	bne.n	8005e68 <HAL_SPI_TransmitReceive+0x148>
 8005f46:	e0e7      	b.n	8006118 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	2b07      	cmp	r3, #7
 8005f4e:	f240 80dd 	bls.w	800610c <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005f52:	e066      	b.n	8006022 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d119      	bne.n	8005f96 <HAL_SPI_TransmitReceive+0x276>
 8005f62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d016      	beq.n	8005f96 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6c:	881a      	ldrh	r2, [r3, #0]
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f76:	1c9a      	adds	r2, r3, #2
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	3b01      	subs	r3, #1
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005f94:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d11a      	bne.n	8005fda <HAL_SPI_TransmitReceive+0x2ba>
 8005fa4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d017      	beq.n	8005fda <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fae:	6a3a      	ldr	r2, [r7, #32]
 8005fb0:	8812      	ldrh	r2, [r2, #0]
 8005fb2:	b292      	uxth	r2, r2
 8005fb4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fba:	1c9a      	adds	r2, r3, #2
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005fd8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fda:	f7fc fb79 	bl	80026d0 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d803      	bhi.n	8005ff2 <HAL_SPI_TransmitReceive+0x2d2>
 8005fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff0:	d102      	bne.n	8005ff8 <HAL_SPI_TransmitReceive+0x2d8>
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d114      	bne.n	8006022 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 f8b9 	bl	8006170 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800600c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e0a1      	b.n	8006166 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006022:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006024:	2b00      	cmp	r3, #0
 8006026:	d195      	bne.n	8005f54 <HAL_SPI_TransmitReceive+0x234>
 8006028:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800602a:	2b00      	cmp	r3, #0
 800602c:	d192      	bne.n	8005f54 <HAL_SPI_TransmitReceive+0x234>
 800602e:	e073      	b.n	8006118 <HAL_SPI_TransmitReceive+0x3f8>
 8006030:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b02      	cmp	r3, #2
 8006040:	d11b      	bne.n	800607a <HAL_SPI_TransmitReceive+0x35a>
 8006042:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006044:	2b00      	cmp	r3, #0
 8006046:	d018      	beq.n	800607a <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3320      	adds	r3, #32
 8006052:	7812      	ldrb	r2, [r2, #0]
 8006054:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006078:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b01      	cmp	r3, #1
 8006086:	d11d      	bne.n	80060c4 <HAL_SPI_TransmitReceive+0x3a4>
 8006088:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d01a      	beq.n	80060c4 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800609a:	7812      	ldrb	r2, [r2, #0]
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	3b01      	subs	r3, #1
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80060c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060c4:	f7fc fb04 	bl	80026d0 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d803      	bhi.n	80060dc <HAL_SPI_TransmitReceive+0x3bc>
 80060d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060da:	d102      	bne.n	80060e2 <HAL_SPI_TransmitReceive+0x3c2>
 80060dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d114      	bne.n	800610c <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 f844 	bl	8006170 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e02c      	b.n	8006166 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800610c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800610e:	2b00      	cmp	r3, #0
 8006110:	d190      	bne.n	8006034 <HAL_SPI_TransmitReceive+0x314>
 8006112:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006114:	2b00      	cmp	r3, #0
 8006116:	d18d      	bne.n	8006034 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	2200      	movs	r2, #0
 8006120:	2108      	movs	r1, #8
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f000 f8c4 	bl	80062b0 <SPI_WaitOnFlagUntilTimeout>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d007      	beq.n	800613e <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006134:	f043 0220 	orr.w	r2, r3, #32
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f816 	bl	8006170 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e001      	b.n	8006166 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8006162:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006166:	4618      	mov	r0, r3
 8006168:	3730      	adds	r7, #48	; 0x30
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop

08006170 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0208 	orr.w	r2, r2, #8
 800618e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0210 	orr.w	r2, r2, #16
 800619e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0201 	bic.w	r2, r2, #1
 80061ae:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6919      	ldr	r1, [r3, #16]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	4b3c      	ldr	r3, [pc, #240]	; (80062ac <SPI_CloseTransfer+0x13c>)
 80061bc:	400b      	ands	r3, r1
 80061be:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689a      	ldr	r2, [r3, #8]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80061ce:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b04      	cmp	r3, #4
 80061da:	d014      	beq.n	8006206 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00f      	beq.n	8006206 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	699a      	ldr	r2, [r3, #24]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f042 0220 	orr.w	r2, r2, #32
 8006204:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b03      	cmp	r3, #3
 8006210:	d014      	beq.n	800623c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00f      	beq.n	800623c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006222:	f043 0204 	orr.w	r2, r3, #4
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800623a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00f      	beq.n	8006266 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800624c:	f043 0201 	orr.w	r2, r3, #1
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	699a      	ldr	r2, [r3, #24]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006264:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00f      	beq.n	8006290 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006276:	f043 0208 	orr.w	r2, r3, #8
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699a      	ldr	r2, [r3, #24]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800628e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80062a0:	bf00      	nop
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	fffffc90 	.word	0xfffffc90

080062b0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	603b      	str	r3, [r7, #0]
 80062bc:	4613      	mov	r3, r2
 80062be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80062c0:	e010      	b.n	80062e4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062c2:	f7fc fa05 	bl	80026d0 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d803      	bhi.n	80062da <SPI_WaitOnFlagUntilTimeout+0x2a>
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d8:	d102      	bne.n	80062e0 <SPI_WaitOnFlagUntilTimeout+0x30>
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e00f      	b.n	8006304 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	695a      	ldr	r2, [r3, #20]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4013      	ands	r3, r2
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	bf0c      	ite	eq
 80062f4:	2301      	moveq	r3, #1
 80062f6:	2300      	movne	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	461a      	mov	r2, r3
 80062fc:	79fb      	ldrb	r3, [r7, #7]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d0df      	beq.n	80062c2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006318:	095b      	lsrs	r3, r3, #5
 800631a:	3301      	adds	r3, #1
 800631c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	3301      	adds	r3, #1
 8006324:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	3307      	adds	r3, #7
 800632a:	08db      	lsrs	r3, r3, #3
 800632c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	fb02 f303 	mul.w	r3, r2, r3
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b082      	sub	sp, #8
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e049      	b.n	80063e8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d106      	bne.n	800636e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7fb ff97 	bl	800229c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2202      	movs	r2, #2
 8006372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3304      	adds	r3, #4
 800637e:	4619      	mov	r1, r3
 8006380:	4610      	mov	r0, r2
 8006382:	f000 fba7 	bl	8006ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e049      	b.n	8006496 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d106      	bne.n	800641c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7fb ff60 	bl	80022dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3304      	adds	r3, #4
 800642c:	4619      	mov	r1, r3
 800642e:	4610      	mov	r0, r2
 8006430:	f000 fb50 	bl	8006ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d109      	bne.n	80064c4 <HAL_TIM_PWM_Start+0x24>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	bf14      	ite	ne
 80064bc:	2301      	movne	r3, #1
 80064be:	2300      	moveq	r3, #0
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	e03c      	b.n	800653e <HAL_TIM_PWM_Start+0x9e>
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d109      	bne.n	80064de <HAL_TIM_PWM_Start+0x3e>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	bf14      	ite	ne
 80064d6:	2301      	movne	r3, #1
 80064d8:	2300      	moveq	r3, #0
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	e02f      	b.n	800653e <HAL_TIM_PWM_Start+0x9e>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d109      	bne.n	80064f8 <HAL_TIM_PWM_Start+0x58>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	bf14      	ite	ne
 80064f0:	2301      	movne	r3, #1
 80064f2:	2300      	moveq	r3, #0
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	e022      	b.n	800653e <HAL_TIM_PWM_Start+0x9e>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b0c      	cmp	r3, #12
 80064fc:	d109      	bne.n	8006512 <HAL_TIM_PWM_Start+0x72>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b01      	cmp	r3, #1
 8006508:	bf14      	ite	ne
 800650a:	2301      	movne	r3, #1
 800650c:	2300      	moveq	r3, #0
 800650e:	b2db      	uxtb	r3, r3
 8006510:	e015      	b.n	800653e <HAL_TIM_PWM_Start+0x9e>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b10      	cmp	r3, #16
 8006516:	d109      	bne.n	800652c <HAL_TIM_PWM_Start+0x8c>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b01      	cmp	r3, #1
 8006522:	bf14      	ite	ne
 8006524:	2301      	movne	r3, #1
 8006526:	2300      	moveq	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	e008      	b.n	800653e <HAL_TIM_PWM_Start+0x9e>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b01      	cmp	r3, #1
 8006536:	bf14      	ite	ne
 8006538:	2301      	movne	r3, #1
 800653a:	2300      	moveq	r3, #0
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e0a1      	b.n	800668a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d104      	bne.n	8006556 <HAL_TIM_PWM_Start+0xb6>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006554:	e023      	b.n	800659e <HAL_TIM_PWM_Start+0xfe>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b04      	cmp	r3, #4
 800655a:	d104      	bne.n	8006566 <HAL_TIM_PWM_Start+0xc6>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006564:	e01b      	b.n	800659e <HAL_TIM_PWM_Start+0xfe>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b08      	cmp	r3, #8
 800656a:	d104      	bne.n	8006576 <HAL_TIM_PWM_Start+0xd6>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006574:	e013      	b.n	800659e <HAL_TIM_PWM_Start+0xfe>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b0c      	cmp	r3, #12
 800657a:	d104      	bne.n	8006586 <HAL_TIM_PWM_Start+0xe6>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006584:	e00b      	b.n	800659e <HAL_TIM_PWM_Start+0xfe>
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b10      	cmp	r3, #16
 800658a:	d104      	bne.n	8006596 <HAL_TIM_PWM_Start+0xf6>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006594:	e003      	b.n	800659e <HAL_TIM_PWM_Start+0xfe>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2202      	movs	r2, #2
 800659a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2201      	movs	r2, #1
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fea2 	bl	80072f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a38      	ldr	r2, [pc, #224]	; (8006694 <HAL_TIM_PWM_Start+0x1f4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d013      	beq.n	80065de <HAL_TIM_PWM_Start+0x13e>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a37      	ldr	r2, [pc, #220]	; (8006698 <HAL_TIM_PWM_Start+0x1f8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d00e      	beq.n	80065de <HAL_TIM_PWM_Start+0x13e>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a35      	ldr	r2, [pc, #212]	; (800669c <HAL_TIM_PWM_Start+0x1fc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d009      	beq.n	80065de <HAL_TIM_PWM_Start+0x13e>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a34      	ldr	r2, [pc, #208]	; (80066a0 <HAL_TIM_PWM_Start+0x200>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d004      	beq.n	80065de <HAL_TIM_PWM_Start+0x13e>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a32      	ldr	r2, [pc, #200]	; (80066a4 <HAL_TIM_PWM_Start+0x204>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d101      	bne.n	80065e2 <HAL_TIM_PWM_Start+0x142>
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <HAL_TIM_PWM_Start+0x144>
 80065e2:	2300      	movs	r3, #0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d007      	beq.n	80065f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a25      	ldr	r2, [pc, #148]	; (8006694 <HAL_TIM_PWM_Start+0x1f4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d022      	beq.n	8006648 <HAL_TIM_PWM_Start+0x1a8>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660a:	d01d      	beq.n	8006648 <HAL_TIM_PWM_Start+0x1a8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a25      	ldr	r2, [pc, #148]	; (80066a8 <HAL_TIM_PWM_Start+0x208>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d018      	beq.n	8006648 <HAL_TIM_PWM_Start+0x1a8>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a24      	ldr	r2, [pc, #144]	; (80066ac <HAL_TIM_PWM_Start+0x20c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d013      	beq.n	8006648 <HAL_TIM_PWM_Start+0x1a8>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a22      	ldr	r2, [pc, #136]	; (80066b0 <HAL_TIM_PWM_Start+0x210>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00e      	beq.n	8006648 <HAL_TIM_PWM_Start+0x1a8>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a1a      	ldr	r2, [pc, #104]	; (8006698 <HAL_TIM_PWM_Start+0x1f8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d009      	beq.n	8006648 <HAL_TIM_PWM_Start+0x1a8>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a1e      	ldr	r2, [pc, #120]	; (80066b4 <HAL_TIM_PWM_Start+0x214>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d004      	beq.n	8006648 <HAL_TIM_PWM_Start+0x1a8>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a16      	ldr	r2, [pc, #88]	; (800669c <HAL_TIM_PWM_Start+0x1fc>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d115      	bne.n	8006674 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	4b1a      	ldr	r3, [pc, #104]	; (80066b8 <HAL_TIM_PWM_Start+0x218>)
 8006650:	4013      	ands	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b06      	cmp	r3, #6
 8006658:	d015      	beq.n	8006686 <HAL_TIM_PWM_Start+0x1e6>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006660:	d011      	beq.n	8006686 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f042 0201 	orr.w	r2, r2, #1
 8006670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006672:	e008      	b.n	8006686 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0201 	orr.w	r2, r2, #1
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	e000      	b.n	8006688 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006686:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	40010000 	.word	0x40010000
 8006698:	40010400 	.word	0x40010400
 800669c:	40014000 	.word	0x40014000
 80066a0:	40014400 	.word	0x40014400
 80066a4:	40014800 	.word	0x40014800
 80066a8:	40000400 	.word	0x40000400
 80066ac:	40000800 	.word	0x40000800
 80066b0:	40000c00 	.word	0x40000c00
 80066b4:	40001800 	.word	0x40001800
 80066b8:	00010007 	.word	0x00010007

080066bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d101      	bne.n	80066da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066d6:	2302      	movs	r3, #2
 80066d8:	e0ff      	b.n	80068da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b14      	cmp	r3, #20
 80066e6:	f200 80f0 	bhi.w	80068ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80066ea:	a201      	add	r2, pc, #4	; (adr r2, 80066f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f0:	08006745 	.word	0x08006745
 80066f4:	080068cb 	.word	0x080068cb
 80066f8:	080068cb 	.word	0x080068cb
 80066fc:	080068cb 	.word	0x080068cb
 8006700:	08006785 	.word	0x08006785
 8006704:	080068cb 	.word	0x080068cb
 8006708:	080068cb 	.word	0x080068cb
 800670c:	080068cb 	.word	0x080068cb
 8006710:	080067c7 	.word	0x080067c7
 8006714:	080068cb 	.word	0x080068cb
 8006718:	080068cb 	.word	0x080068cb
 800671c:	080068cb 	.word	0x080068cb
 8006720:	08006807 	.word	0x08006807
 8006724:	080068cb 	.word	0x080068cb
 8006728:	080068cb 	.word	0x080068cb
 800672c:	080068cb 	.word	0x080068cb
 8006730:	08006849 	.word	0x08006849
 8006734:	080068cb 	.word	0x080068cb
 8006738:	080068cb 	.word	0x080068cb
 800673c:	080068cb 	.word	0x080068cb
 8006740:	08006889 	.word	0x08006889
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fa5c 	bl	8006c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0208 	orr.w	r2, r2, #8
 800675e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0204 	bic.w	r2, r2, #4
 800676e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6999      	ldr	r1, [r3, #24]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	691a      	ldr	r2, [r3, #16]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	619a      	str	r2, [r3, #24]
      break;
 8006782:	e0a5      	b.n	80068d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68b9      	ldr	r1, [r7, #8]
 800678a:	4618      	mov	r0, r3
 800678c:	f000 facc 	bl	8006d28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800679e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699a      	ldr	r2, [r3, #24]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6999      	ldr	r1, [r3, #24]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	021a      	lsls	r2, r3, #8
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	619a      	str	r2, [r3, #24]
      break;
 80067c4:	e084      	b.n	80068d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68b9      	ldr	r1, [r7, #8]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fb35 	bl	8006e3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	69da      	ldr	r2, [r3, #28]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f042 0208 	orr.w	r2, r2, #8
 80067e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	69da      	ldr	r2, [r3, #28]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0204 	bic.w	r2, r2, #4
 80067f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69d9      	ldr	r1, [r3, #28]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	61da      	str	r2, [r3, #28]
      break;
 8006804:	e064      	b.n	80068d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68b9      	ldr	r1, [r7, #8]
 800680c:	4618      	mov	r0, r3
 800680e:	f000 fb9d 	bl	8006f4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69da      	ldr	r2, [r3, #28]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69da      	ldr	r2, [r3, #28]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69d9      	ldr	r1, [r3, #28]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	021a      	lsls	r2, r3, #8
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	61da      	str	r2, [r3, #28]
      break;
 8006846:	e043      	b.n	80068d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68b9      	ldr	r1, [r7, #8]
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fbe6 	bl	8007020 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0208 	orr.w	r2, r2, #8
 8006862:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0204 	bic.w	r2, r2, #4
 8006872:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	691a      	ldr	r2, [r3, #16]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006886:	e023      	b.n	80068d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68b9      	ldr	r1, [r7, #8]
 800688e:	4618      	mov	r0, r3
 8006890:	f000 fc2a 	bl	80070e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	021a      	lsls	r2, r3, #8
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068c8:	e002      	b.n	80068d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	75fb      	strb	r3, [r7, #23]
      break;
 80068ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop

080068e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_TIM_ConfigClockSource+0x1c>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e0dc      	b.n	8006aba <HAL_TIM_ConfigClockSource+0x1d6>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	4b6a      	ldr	r3, [pc, #424]	; (8006ac4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800691c:	4013      	ands	r3, r2
 800691e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006926:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a64      	ldr	r2, [pc, #400]	; (8006ac8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006936:	4293      	cmp	r3, r2
 8006938:	f000 80a9 	beq.w	8006a8e <HAL_TIM_ConfigClockSource+0x1aa>
 800693c:	4a62      	ldr	r2, [pc, #392]	; (8006ac8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800693e:	4293      	cmp	r3, r2
 8006940:	f200 80ae 	bhi.w	8006aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006944:	4a61      	ldr	r2, [pc, #388]	; (8006acc <HAL_TIM_ConfigClockSource+0x1e8>)
 8006946:	4293      	cmp	r3, r2
 8006948:	f000 80a1 	beq.w	8006a8e <HAL_TIM_ConfigClockSource+0x1aa>
 800694c:	4a5f      	ldr	r2, [pc, #380]	; (8006acc <HAL_TIM_ConfigClockSource+0x1e8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	f200 80a6 	bhi.w	8006aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006954:	4a5e      	ldr	r2, [pc, #376]	; (8006ad0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006956:	4293      	cmp	r3, r2
 8006958:	f000 8099 	beq.w	8006a8e <HAL_TIM_ConfigClockSource+0x1aa>
 800695c:	4a5c      	ldr	r2, [pc, #368]	; (8006ad0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800695e:	4293      	cmp	r3, r2
 8006960:	f200 809e 	bhi.w	8006aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006964:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006968:	f000 8091 	beq.w	8006a8e <HAL_TIM_ConfigClockSource+0x1aa>
 800696c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006970:	f200 8096 	bhi.w	8006aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006974:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006978:	f000 8089 	beq.w	8006a8e <HAL_TIM_ConfigClockSource+0x1aa>
 800697c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006980:	f200 808e 	bhi.w	8006aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006988:	d03e      	beq.n	8006a08 <HAL_TIM_ConfigClockSource+0x124>
 800698a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800698e:	f200 8087 	bhi.w	8006aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006996:	f000 8086 	beq.w	8006aa6 <HAL_TIM_ConfigClockSource+0x1c2>
 800699a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800699e:	d87f      	bhi.n	8006aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80069a0:	2b70      	cmp	r3, #112	; 0x70
 80069a2:	d01a      	beq.n	80069da <HAL_TIM_ConfigClockSource+0xf6>
 80069a4:	2b70      	cmp	r3, #112	; 0x70
 80069a6:	d87b      	bhi.n	8006aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80069a8:	2b60      	cmp	r3, #96	; 0x60
 80069aa:	d050      	beq.n	8006a4e <HAL_TIM_ConfigClockSource+0x16a>
 80069ac:	2b60      	cmp	r3, #96	; 0x60
 80069ae:	d877      	bhi.n	8006aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80069b0:	2b50      	cmp	r3, #80	; 0x50
 80069b2:	d03c      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x14a>
 80069b4:	2b50      	cmp	r3, #80	; 0x50
 80069b6:	d873      	bhi.n	8006aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80069b8:	2b40      	cmp	r3, #64	; 0x40
 80069ba:	d058      	beq.n	8006a6e <HAL_TIM_ConfigClockSource+0x18a>
 80069bc:	2b40      	cmp	r3, #64	; 0x40
 80069be:	d86f      	bhi.n	8006aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80069c0:	2b30      	cmp	r3, #48	; 0x30
 80069c2:	d064      	beq.n	8006a8e <HAL_TIM_ConfigClockSource+0x1aa>
 80069c4:	2b30      	cmp	r3, #48	; 0x30
 80069c6:	d86b      	bhi.n	8006aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80069c8:	2b20      	cmp	r3, #32
 80069ca:	d060      	beq.n	8006a8e <HAL_TIM_ConfigClockSource+0x1aa>
 80069cc:	2b20      	cmp	r3, #32
 80069ce:	d867      	bhi.n	8006aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d05c      	beq.n	8006a8e <HAL_TIM_ConfigClockSource+0x1aa>
 80069d4:	2b10      	cmp	r3, #16
 80069d6:	d05a      	beq.n	8006a8e <HAL_TIM_ConfigClockSource+0x1aa>
 80069d8:	e062      	b.n	8006aa0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	6899      	ldr	r1, [r3, #8]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f000 fc61 	bl	80072b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	609a      	str	r2, [r3, #8]
      break;
 8006a06:	e04f      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6818      	ldr	r0, [r3, #0]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	6899      	ldr	r1, [r3, #8]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f000 fc4a 	bl	80072b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689a      	ldr	r2, [r3, #8]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a2a:	609a      	str	r2, [r3, #8]
      break;
 8006a2c:	e03c      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6818      	ldr	r0, [r3, #0]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	6859      	ldr	r1, [r3, #4]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f000 fbba 	bl	80071b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2150      	movs	r1, #80	; 0x50
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fc14 	bl	8007274 <TIM_ITRx_SetConfig>
      break;
 8006a4c:	e02c      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6818      	ldr	r0, [r3, #0]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	6859      	ldr	r1, [r3, #4]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f000 fbd9 	bl	8007212 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2160      	movs	r1, #96	; 0x60
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 fc04 	bl	8007274 <TIM_ITRx_SetConfig>
      break;
 8006a6c:	e01c      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	6859      	ldr	r1, [r3, #4]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f000 fb9a 	bl	80071b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2140      	movs	r1, #64	; 0x40
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fbf4 	bl	8007274 <TIM_ITRx_SetConfig>
      break;
 8006a8c:	e00c      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4619      	mov	r1, r3
 8006a98:	4610      	mov	r0, r2
 8006a9a:	f000 fbeb 	bl	8007274 <TIM_ITRx_SetConfig>
      break;
 8006a9e:	e003      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8006aa4:	e000      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006aa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	ffceff88 	.word	0xffceff88
 8006ac8:	00100040 	.word	0x00100040
 8006acc:	00100030 	.word	0x00100030
 8006ad0:	00100020 	.word	0x00100020

08006ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a40      	ldr	r2, [pc, #256]	; (8006be8 <TIM_Base_SetConfig+0x114>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d013      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af2:	d00f      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a3d      	ldr	r2, [pc, #244]	; (8006bec <TIM_Base_SetConfig+0x118>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d00b      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a3c      	ldr	r2, [pc, #240]	; (8006bf0 <TIM_Base_SetConfig+0x11c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d007      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a3b      	ldr	r2, [pc, #236]	; (8006bf4 <TIM_Base_SetConfig+0x120>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d003      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a3a      	ldr	r2, [pc, #232]	; (8006bf8 <TIM_Base_SetConfig+0x124>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d108      	bne.n	8006b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a2f      	ldr	r2, [pc, #188]	; (8006be8 <TIM_Base_SetConfig+0x114>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d01f      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b34:	d01b      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a2c      	ldr	r2, [pc, #176]	; (8006bec <TIM_Base_SetConfig+0x118>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d017      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a2b      	ldr	r2, [pc, #172]	; (8006bf0 <TIM_Base_SetConfig+0x11c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d013      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a2a      	ldr	r2, [pc, #168]	; (8006bf4 <TIM_Base_SetConfig+0x120>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d00f      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a29      	ldr	r2, [pc, #164]	; (8006bf8 <TIM_Base_SetConfig+0x124>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00b      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a28      	ldr	r2, [pc, #160]	; (8006bfc <TIM_Base_SetConfig+0x128>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d007      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a27      	ldr	r2, [pc, #156]	; (8006c00 <TIM_Base_SetConfig+0x12c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d003      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a26      	ldr	r2, [pc, #152]	; (8006c04 <TIM_Base_SetConfig+0x130>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d108      	bne.n	8006b80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a10      	ldr	r2, [pc, #64]	; (8006be8 <TIM_Base_SetConfig+0x114>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d00f      	beq.n	8006bcc <TIM_Base_SetConfig+0xf8>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a12      	ldr	r2, [pc, #72]	; (8006bf8 <TIM_Base_SetConfig+0x124>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d00b      	beq.n	8006bcc <TIM_Base_SetConfig+0xf8>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a11      	ldr	r2, [pc, #68]	; (8006bfc <TIM_Base_SetConfig+0x128>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d007      	beq.n	8006bcc <TIM_Base_SetConfig+0xf8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a10      	ldr	r2, [pc, #64]	; (8006c00 <TIM_Base_SetConfig+0x12c>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d003      	beq.n	8006bcc <TIM_Base_SetConfig+0xf8>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a0f      	ldr	r2, [pc, #60]	; (8006c04 <TIM_Base_SetConfig+0x130>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d103      	bne.n	8006bd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	691a      	ldr	r2, [r3, #16]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	615a      	str	r2, [r3, #20]
}
 8006bda:	bf00      	nop
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	40010000 	.word	0x40010000
 8006bec:	40000400 	.word	0x40000400
 8006bf0:	40000800 	.word	0x40000800
 8006bf4:	40000c00 	.word	0x40000c00
 8006bf8:	40010400 	.word	0x40010400
 8006bfc:	40014000 	.word	0x40014000
 8006c00:	40014400 	.word	0x40014400
 8006c04:	40014800 	.word	0x40014800

08006c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	f023 0201 	bic.w	r2, r3, #1
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	4b37      	ldr	r3, [pc, #220]	; (8006d10 <TIM_OC1_SetConfig+0x108>)
 8006c34:	4013      	ands	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0303 	bic.w	r3, r3, #3
 8006c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f023 0302 	bic.w	r3, r3, #2
 8006c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a2d      	ldr	r2, [pc, #180]	; (8006d14 <TIM_OC1_SetConfig+0x10c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d00f      	beq.n	8006c84 <TIM_OC1_SetConfig+0x7c>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a2c      	ldr	r2, [pc, #176]	; (8006d18 <TIM_OC1_SetConfig+0x110>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00b      	beq.n	8006c84 <TIM_OC1_SetConfig+0x7c>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a2b      	ldr	r2, [pc, #172]	; (8006d1c <TIM_OC1_SetConfig+0x114>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d007      	beq.n	8006c84 <TIM_OC1_SetConfig+0x7c>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a2a      	ldr	r2, [pc, #168]	; (8006d20 <TIM_OC1_SetConfig+0x118>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d003      	beq.n	8006c84 <TIM_OC1_SetConfig+0x7c>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a29      	ldr	r2, [pc, #164]	; (8006d24 <TIM_OC1_SetConfig+0x11c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d10c      	bne.n	8006c9e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f023 0308 	bic.w	r3, r3, #8
 8006c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f023 0304 	bic.w	r3, r3, #4
 8006c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a1c      	ldr	r2, [pc, #112]	; (8006d14 <TIM_OC1_SetConfig+0x10c>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d00f      	beq.n	8006cc6 <TIM_OC1_SetConfig+0xbe>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a1b      	ldr	r2, [pc, #108]	; (8006d18 <TIM_OC1_SetConfig+0x110>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d00b      	beq.n	8006cc6 <TIM_OC1_SetConfig+0xbe>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a1a      	ldr	r2, [pc, #104]	; (8006d1c <TIM_OC1_SetConfig+0x114>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d007      	beq.n	8006cc6 <TIM_OC1_SetConfig+0xbe>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a19      	ldr	r2, [pc, #100]	; (8006d20 <TIM_OC1_SetConfig+0x118>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d003      	beq.n	8006cc6 <TIM_OC1_SetConfig+0xbe>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a18      	ldr	r2, [pc, #96]	; (8006d24 <TIM_OC1_SetConfig+0x11c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d111      	bne.n	8006cea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	621a      	str	r2, [r3, #32]
}
 8006d04:	bf00      	nop
 8006d06:	371c      	adds	r7, #28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	fffeff8f 	.word	0xfffeff8f
 8006d14:	40010000 	.word	0x40010000
 8006d18:	40010400 	.word	0x40010400
 8006d1c:	40014000 	.word	0x40014000
 8006d20:	40014400 	.word	0x40014400
 8006d24:	40014800 	.word	0x40014800

08006d28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	f023 0210 	bic.w	r2, r3, #16
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4b34      	ldr	r3, [pc, #208]	; (8006e24 <TIM_OC2_SetConfig+0xfc>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	021b      	lsls	r3, r3, #8
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f023 0320 	bic.w	r3, r3, #32
 8006d72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a29      	ldr	r2, [pc, #164]	; (8006e28 <TIM_OC2_SetConfig+0x100>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d003      	beq.n	8006d90 <TIM_OC2_SetConfig+0x68>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a28      	ldr	r2, [pc, #160]	; (8006e2c <TIM_OC2_SetConfig+0x104>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d10d      	bne.n	8006dac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	011b      	lsls	r3, r3, #4
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006daa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a1e      	ldr	r2, [pc, #120]	; (8006e28 <TIM_OC2_SetConfig+0x100>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d00f      	beq.n	8006dd4 <TIM_OC2_SetConfig+0xac>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a1d      	ldr	r2, [pc, #116]	; (8006e2c <TIM_OC2_SetConfig+0x104>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d00b      	beq.n	8006dd4 <TIM_OC2_SetConfig+0xac>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a1c      	ldr	r2, [pc, #112]	; (8006e30 <TIM_OC2_SetConfig+0x108>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d007      	beq.n	8006dd4 <TIM_OC2_SetConfig+0xac>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a1b      	ldr	r2, [pc, #108]	; (8006e34 <TIM_OC2_SetConfig+0x10c>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d003      	beq.n	8006dd4 <TIM_OC2_SetConfig+0xac>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a1a      	ldr	r2, [pc, #104]	; (8006e38 <TIM_OC2_SetConfig+0x110>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d113      	bne.n	8006dfc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006de2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	621a      	str	r2, [r3, #32]
}
 8006e16:	bf00      	nop
 8006e18:	371c      	adds	r7, #28
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	feff8fff 	.word	0xfeff8fff
 8006e28:	40010000 	.word	0x40010000
 8006e2c:	40010400 	.word	0x40010400
 8006e30:	40014000 	.word	0x40014000
 8006e34:	40014400 	.word	0x40014400
 8006e38:	40014800 	.word	0x40014800

08006e3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4b33      	ldr	r3, [pc, #204]	; (8006f34 <TIM_OC3_SetConfig+0xf8>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 0303 	bic.w	r3, r3, #3
 8006e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	021b      	lsls	r3, r3, #8
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a28      	ldr	r2, [pc, #160]	; (8006f38 <TIM_OC3_SetConfig+0xfc>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d003      	beq.n	8006ea2 <TIM_OC3_SetConfig+0x66>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a27      	ldr	r2, [pc, #156]	; (8006f3c <TIM_OC3_SetConfig+0x100>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d10d      	bne.n	8006ebe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	021b      	lsls	r3, r3, #8
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a1d      	ldr	r2, [pc, #116]	; (8006f38 <TIM_OC3_SetConfig+0xfc>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d00f      	beq.n	8006ee6 <TIM_OC3_SetConfig+0xaa>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a1c      	ldr	r2, [pc, #112]	; (8006f3c <TIM_OC3_SetConfig+0x100>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d00b      	beq.n	8006ee6 <TIM_OC3_SetConfig+0xaa>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a1b      	ldr	r2, [pc, #108]	; (8006f40 <TIM_OC3_SetConfig+0x104>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d007      	beq.n	8006ee6 <TIM_OC3_SetConfig+0xaa>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a1a      	ldr	r2, [pc, #104]	; (8006f44 <TIM_OC3_SetConfig+0x108>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d003      	beq.n	8006ee6 <TIM_OC3_SetConfig+0xaa>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a19      	ldr	r2, [pc, #100]	; (8006f48 <TIM_OC3_SetConfig+0x10c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d113      	bne.n	8006f0e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	011b      	lsls	r3, r3, #4
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	011b      	lsls	r3, r3, #4
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	621a      	str	r2, [r3, #32]
}
 8006f28:	bf00      	nop
 8006f2a:	371c      	adds	r7, #28
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	fffeff8f 	.word	0xfffeff8f
 8006f38:	40010000 	.word	0x40010000
 8006f3c:	40010400 	.word	0x40010400
 8006f40:	40014000 	.word	0x40014000
 8006f44:	40014400 	.word	0x40014400
 8006f48:	40014800 	.word	0x40014800

08006f4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	4b24      	ldr	r3, [pc, #144]	; (8007008 <TIM_OC4_SetConfig+0xbc>)
 8006f78:	4013      	ands	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	021b      	lsls	r3, r3, #8
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	031b      	lsls	r3, r3, #12
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a19      	ldr	r2, [pc, #100]	; (800700c <TIM_OC4_SetConfig+0xc0>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d00f      	beq.n	8006fcc <TIM_OC4_SetConfig+0x80>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a18      	ldr	r2, [pc, #96]	; (8007010 <TIM_OC4_SetConfig+0xc4>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00b      	beq.n	8006fcc <TIM_OC4_SetConfig+0x80>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a17      	ldr	r2, [pc, #92]	; (8007014 <TIM_OC4_SetConfig+0xc8>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d007      	beq.n	8006fcc <TIM_OC4_SetConfig+0x80>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a16      	ldr	r2, [pc, #88]	; (8007018 <TIM_OC4_SetConfig+0xcc>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d003      	beq.n	8006fcc <TIM_OC4_SetConfig+0x80>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a15      	ldr	r2, [pc, #84]	; (800701c <TIM_OC4_SetConfig+0xd0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d109      	bne.n	8006fe0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	019b      	lsls	r3, r3, #6
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	621a      	str	r2, [r3, #32]
}
 8006ffa:	bf00      	nop
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	feff8fff 	.word	0xfeff8fff
 800700c:	40010000 	.word	0x40010000
 8007010:	40010400 	.word	0x40010400
 8007014:	40014000 	.word	0x40014000
 8007018:	40014400 	.word	0x40014400
 800701c:	40014800 	.word	0x40014800

08007020 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	4b21      	ldr	r3, [pc, #132]	; (80070d0 <TIM_OC5_SetConfig+0xb0>)
 800704c:	4013      	ands	r3, r2
 800704e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	4313      	orrs	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007060:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	041b      	lsls	r3, r3, #16
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	4313      	orrs	r3, r2
 800706c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a18      	ldr	r2, [pc, #96]	; (80070d4 <TIM_OC5_SetConfig+0xb4>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00f      	beq.n	8007096 <TIM_OC5_SetConfig+0x76>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a17      	ldr	r2, [pc, #92]	; (80070d8 <TIM_OC5_SetConfig+0xb8>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d00b      	beq.n	8007096 <TIM_OC5_SetConfig+0x76>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a16      	ldr	r2, [pc, #88]	; (80070dc <TIM_OC5_SetConfig+0xbc>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d007      	beq.n	8007096 <TIM_OC5_SetConfig+0x76>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a15      	ldr	r2, [pc, #84]	; (80070e0 <TIM_OC5_SetConfig+0xc0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d003      	beq.n	8007096 <TIM_OC5_SetConfig+0x76>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a14      	ldr	r2, [pc, #80]	; (80070e4 <TIM_OC5_SetConfig+0xc4>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d109      	bne.n	80070aa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800709c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	021b      	lsls	r3, r3, #8
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	621a      	str	r2, [r3, #32]
}
 80070c4:	bf00      	nop
 80070c6:	371c      	adds	r7, #28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	fffeff8f 	.word	0xfffeff8f
 80070d4:	40010000 	.word	0x40010000
 80070d8:	40010400 	.word	0x40010400
 80070dc:	40014000 	.word	0x40014000
 80070e0:	40014400 	.word	0x40014400
 80070e4:	40014800 	.word	0x40014800

080070e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4b22      	ldr	r3, [pc, #136]	; (800719c <TIM_OC6_SetConfig+0xb4>)
 8007114:	4013      	ands	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	021b      	lsls	r3, r3, #8
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800712a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	051b      	lsls	r3, r3, #20
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	4313      	orrs	r3, r2
 8007136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a19      	ldr	r2, [pc, #100]	; (80071a0 <TIM_OC6_SetConfig+0xb8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d00f      	beq.n	8007160 <TIM_OC6_SetConfig+0x78>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a18      	ldr	r2, [pc, #96]	; (80071a4 <TIM_OC6_SetConfig+0xbc>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d00b      	beq.n	8007160 <TIM_OC6_SetConfig+0x78>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a17      	ldr	r2, [pc, #92]	; (80071a8 <TIM_OC6_SetConfig+0xc0>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d007      	beq.n	8007160 <TIM_OC6_SetConfig+0x78>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a16      	ldr	r2, [pc, #88]	; (80071ac <TIM_OC6_SetConfig+0xc4>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d003      	beq.n	8007160 <TIM_OC6_SetConfig+0x78>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a15      	ldr	r2, [pc, #84]	; (80071b0 <TIM_OC6_SetConfig+0xc8>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d109      	bne.n	8007174 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007166:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	029b      	lsls	r3, r3, #10
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	4313      	orrs	r3, r2
 8007172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	621a      	str	r2, [r3, #32]
}
 800718e:	bf00      	nop
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	feff8fff 	.word	0xfeff8fff
 80071a0:	40010000 	.word	0x40010000
 80071a4:	40010400 	.word	0x40010400
 80071a8:	40014000 	.word	0x40014000
 80071ac:	40014400 	.word	0x40014400
 80071b0:	40014800 	.word	0x40014800

080071b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	f023 0201 	bic.w	r2, r3, #1
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	011b      	lsls	r3, r3, #4
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f023 030a 	bic.w	r3, r3, #10
 80071f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	621a      	str	r2, [r3, #32]
}
 8007206:	bf00      	nop
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007212:	b480      	push	{r7}
 8007214:	b087      	sub	sp, #28
 8007216:	af00      	add	r7, sp, #0
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	f023 0210 	bic.w	r2, r3, #16
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800723c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	031b      	lsls	r3, r3, #12
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	4313      	orrs	r3, r2
 8007246:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800724e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	011b      	lsls	r3, r3, #4
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	4313      	orrs	r3, r2
 8007258:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	621a      	str	r2, [r3, #32]
}
 8007266:	bf00      	nop
 8007268:	371c      	adds	r7, #28
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
	...

08007274 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	4b09      	ldr	r3, [pc, #36]	; (80072ac <TIM_ITRx_SetConfig+0x38>)
 8007288:	4013      	ands	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	4313      	orrs	r3, r2
 8007292:	f043 0307 	orr.w	r3, r3, #7
 8007296:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	609a      	str	r2, [r3, #8]
}
 800729e:	bf00      	nop
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	ffcfff8f 	.word	0xffcfff8f

080072b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	021a      	lsls	r2, r3, #8
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	431a      	orrs	r2, r3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	4313      	orrs	r3, r2
 80072dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	609a      	str	r2, [r3, #8]
}
 80072e4:	bf00      	nop
 80072e6:	371c      	adds	r7, #28
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	f003 031f 	and.w	r3, r3, #31
 8007302:	2201      	movs	r2, #1
 8007304:	fa02 f303 	lsl.w	r3, r2, r3
 8007308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6a1a      	ldr	r2, [r3, #32]
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	43db      	mvns	r3, r3
 8007312:	401a      	ands	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6a1a      	ldr	r2, [r3, #32]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f003 031f 	and.w	r3, r3, #31
 8007322:	6879      	ldr	r1, [r7, #4]
 8007324:	fa01 f303 	lsl.w	r3, r1, r3
 8007328:	431a      	orrs	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	621a      	str	r2, [r3, #32]
}
 800732e:	bf00      	nop
 8007330:	371c      	adds	r7, #28
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
	...

0800733c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800734c:	2b01      	cmp	r3, #1
 800734e:	d101      	bne.n	8007354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007350:	2302      	movs	r3, #2
 8007352:	e06d      	b.n	8007430 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a30      	ldr	r2, [pc, #192]	; (800743c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d004      	beq.n	8007388 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a2f      	ldr	r2, [pc, #188]	; (8007440 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d108      	bne.n	800739a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800738e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a20      	ldr	r2, [pc, #128]	; (800743c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d022      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c6:	d01d      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a1d      	ldr	r2, [pc, #116]	; (8007444 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d018      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a1c      	ldr	r2, [pc, #112]	; (8007448 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d013      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a1a      	ldr	r2, [pc, #104]	; (800744c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d00e      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a15      	ldr	r2, [pc, #84]	; (8007440 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d009      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a16      	ldr	r2, [pc, #88]	; (8007450 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d004      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a15      	ldr	r2, [pc, #84]	; (8007454 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d10c      	bne.n	800741e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800740a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	4313      	orrs	r3, r2
 8007414:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	40010000 	.word	0x40010000
 8007440:	40010400 	.word	0x40010400
 8007444:	40000400 	.word	0x40000400
 8007448:	40000800 	.word	0x40000800
 800744c:	40000c00 	.word	0x40000c00
 8007450:	40001800 	.word	0x40001800
 8007454:	40014000 	.word	0x40014000

08007458 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e042      	b.n	80074f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007470:	2b00      	cmp	r3, #0
 8007472:	d106      	bne.n	8007482 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7fa ffb1 	bl	80023e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2224      	movs	r2, #36	; 0x24
 8007486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0201 	bic.w	r2, r2, #1
 8007498:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f8c2 	bl	8007624 <UART_SetConfig>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d101      	bne.n	80074aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e022      	b.n	80074f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fe1e 	bl	80080f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689a      	ldr	r2, [r3, #8]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f042 0201 	orr.w	r2, r2, #1
 80074e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fea5 	bl	8008238 <UART_CheckIdleState>
 80074ee:	4603      	mov	r3, r0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08a      	sub	sp, #40	; 0x28
 80074fc:	af02      	add	r7, sp, #8
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	603b      	str	r3, [r7, #0]
 8007504:	4613      	mov	r3, r2
 8007506:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800750e:	2b20      	cmp	r3, #32
 8007510:	f040 8083 	bne.w	800761a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <HAL_UART_Transmit+0x28>
 800751a:	88fb      	ldrh	r3, [r7, #6]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d101      	bne.n	8007524 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e07b      	b.n	800761c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800752a:	2b01      	cmp	r3, #1
 800752c:	d101      	bne.n	8007532 <HAL_UART_Transmit+0x3a>
 800752e:	2302      	movs	r3, #2
 8007530:	e074      	b.n	800761c <HAL_UART_Transmit+0x124>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2221      	movs	r2, #33	; 0x21
 8007546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800754a:	f7fb f8c1 	bl	80026d0 <HAL_GetTick>
 800754e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	88fa      	ldrh	r2, [r7, #6]
 8007554:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	88fa      	ldrh	r2, [r7, #6]
 800755c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007568:	d108      	bne.n	800757c <HAL_UART_Transmit+0x84>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d104      	bne.n	800757c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007572:	2300      	movs	r3, #0
 8007574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	e003      	b.n	8007584 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007580:	2300      	movs	r3, #0
 8007582:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800758c:	e02c      	b.n	80075e8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	2200      	movs	r2, #0
 8007596:	2180      	movs	r1, #128	; 0x80
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 fe98 	bl	80082ce <UART_WaitOnFlagUntilTimeout>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e039      	b.n	800761c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10b      	bne.n	80075c6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	3302      	adds	r3, #2
 80075c2:	61bb      	str	r3, [r7, #24]
 80075c4:	e007      	b.n	80075d6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	781a      	ldrb	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	3301      	adds	r3, #1
 80075d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80075dc:	b29b      	uxth	r3, r3
 80075de:	3b01      	subs	r3, #1
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1cc      	bne.n	800758e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2200      	movs	r2, #0
 80075fc:	2140      	movs	r1, #64	; 0x40
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 fe65 	bl	80082ce <UART_WaitOnFlagUntilTimeout>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e006      	b.n	800761c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2220      	movs	r2, #32
 8007612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	e000      	b.n	800761c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800761a:	2302      	movs	r3, #2
  }
}
 800761c:	4618      	mov	r0, r3
 800761e:	3720      	adds	r7, #32
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007628:	b092      	sub	sp, #72	; 0x48
 800762a:	af00      	add	r7, sp, #0
 800762c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	431a      	orrs	r2, r3
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	431a      	orrs	r2, r3
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	4313      	orrs	r3, r2
 800764a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	4bbe      	ldr	r3, [pc, #760]	; (800794c <UART_SetConfig+0x328>)
 8007654:	4013      	ands	r3, r2
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	6812      	ldr	r2, [r2, #0]
 800765a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800765c:	430b      	orrs	r3, r1
 800765e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4ab3      	ldr	r2, [pc, #716]	; (8007950 <UART_SetConfig+0x32c>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d004      	beq.n	8007690 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800768c:	4313      	orrs	r3, r2
 800768e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689a      	ldr	r2, [r3, #8]
 8007696:	4baf      	ldr	r3, [pc, #700]	; (8007954 <UART_SetConfig+0x330>)
 8007698:	4013      	ands	r3, r2
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	6812      	ldr	r2, [r2, #0]
 800769e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076a0:	430b      	orrs	r3, r1
 80076a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076aa:	f023 010f 	bic.w	r1, r3, #15
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4aa6      	ldr	r2, [pc, #664]	; (8007958 <UART_SetConfig+0x334>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d177      	bne.n	80077b4 <UART_SetConfig+0x190>
 80076c4:	4ba5      	ldr	r3, [pc, #660]	; (800795c <UART_SetConfig+0x338>)
 80076c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076cc:	2b28      	cmp	r3, #40	; 0x28
 80076ce:	d86d      	bhi.n	80077ac <UART_SetConfig+0x188>
 80076d0:	a201      	add	r2, pc, #4	; (adr r2, 80076d8 <UART_SetConfig+0xb4>)
 80076d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d6:	bf00      	nop
 80076d8:	0800777d 	.word	0x0800777d
 80076dc:	080077ad 	.word	0x080077ad
 80076e0:	080077ad 	.word	0x080077ad
 80076e4:	080077ad 	.word	0x080077ad
 80076e8:	080077ad 	.word	0x080077ad
 80076ec:	080077ad 	.word	0x080077ad
 80076f0:	080077ad 	.word	0x080077ad
 80076f4:	080077ad 	.word	0x080077ad
 80076f8:	08007785 	.word	0x08007785
 80076fc:	080077ad 	.word	0x080077ad
 8007700:	080077ad 	.word	0x080077ad
 8007704:	080077ad 	.word	0x080077ad
 8007708:	080077ad 	.word	0x080077ad
 800770c:	080077ad 	.word	0x080077ad
 8007710:	080077ad 	.word	0x080077ad
 8007714:	080077ad 	.word	0x080077ad
 8007718:	0800778d 	.word	0x0800778d
 800771c:	080077ad 	.word	0x080077ad
 8007720:	080077ad 	.word	0x080077ad
 8007724:	080077ad 	.word	0x080077ad
 8007728:	080077ad 	.word	0x080077ad
 800772c:	080077ad 	.word	0x080077ad
 8007730:	080077ad 	.word	0x080077ad
 8007734:	080077ad 	.word	0x080077ad
 8007738:	08007795 	.word	0x08007795
 800773c:	080077ad 	.word	0x080077ad
 8007740:	080077ad 	.word	0x080077ad
 8007744:	080077ad 	.word	0x080077ad
 8007748:	080077ad 	.word	0x080077ad
 800774c:	080077ad 	.word	0x080077ad
 8007750:	080077ad 	.word	0x080077ad
 8007754:	080077ad 	.word	0x080077ad
 8007758:	0800779d 	.word	0x0800779d
 800775c:	080077ad 	.word	0x080077ad
 8007760:	080077ad 	.word	0x080077ad
 8007764:	080077ad 	.word	0x080077ad
 8007768:	080077ad 	.word	0x080077ad
 800776c:	080077ad 	.word	0x080077ad
 8007770:	080077ad 	.word	0x080077ad
 8007774:	080077ad 	.word	0x080077ad
 8007778:	080077a5 	.word	0x080077a5
 800777c:	2301      	movs	r3, #1
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007782:	e222      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007784:	2304      	movs	r3, #4
 8007786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800778a:	e21e      	b.n	8007bca <UART_SetConfig+0x5a6>
 800778c:	2308      	movs	r3, #8
 800778e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007792:	e21a      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007794:	2310      	movs	r3, #16
 8007796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800779a:	e216      	b.n	8007bca <UART_SetConfig+0x5a6>
 800779c:	2320      	movs	r3, #32
 800779e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077a2:	e212      	b.n	8007bca <UART_SetConfig+0x5a6>
 80077a4:	2340      	movs	r3, #64	; 0x40
 80077a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077aa:	e20e      	b.n	8007bca <UART_SetConfig+0x5a6>
 80077ac:	2380      	movs	r3, #128	; 0x80
 80077ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077b2:	e20a      	b.n	8007bca <UART_SetConfig+0x5a6>
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a69      	ldr	r2, [pc, #420]	; (8007960 <UART_SetConfig+0x33c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d130      	bne.n	8007820 <UART_SetConfig+0x1fc>
 80077be:	4b67      	ldr	r3, [pc, #412]	; (800795c <UART_SetConfig+0x338>)
 80077c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	2b05      	cmp	r3, #5
 80077c8:	d826      	bhi.n	8007818 <UART_SetConfig+0x1f4>
 80077ca:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <UART_SetConfig+0x1ac>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	080077e9 	.word	0x080077e9
 80077d4:	080077f1 	.word	0x080077f1
 80077d8:	080077f9 	.word	0x080077f9
 80077dc:	08007801 	.word	0x08007801
 80077e0:	08007809 	.word	0x08007809
 80077e4:	08007811 	.word	0x08007811
 80077e8:	2300      	movs	r3, #0
 80077ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ee:	e1ec      	b.n	8007bca <UART_SetConfig+0x5a6>
 80077f0:	2304      	movs	r3, #4
 80077f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077f6:	e1e8      	b.n	8007bca <UART_SetConfig+0x5a6>
 80077f8:	2308      	movs	r3, #8
 80077fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077fe:	e1e4      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007800:	2310      	movs	r3, #16
 8007802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007806:	e1e0      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007808:	2320      	movs	r3, #32
 800780a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800780e:	e1dc      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007810:	2340      	movs	r3, #64	; 0x40
 8007812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007816:	e1d8      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007818:	2380      	movs	r3, #128	; 0x80
 800781a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800781e:	e1d4      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a4f      	ldr	r2, [pc, #316]	; (8007964 <UART_SetConfig+0x340>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d130      	bne.n	800788c <UART_SetConfig+0x268>
 800782a:	4b4c      	ldr	r3, [pc, #304]	; (800795c <UART_SetConfig+0x338>)
 800782c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	2b05      	cmp	r3, #5
 8007834:	d826      	bhi.n	8007884 <UART_SetConfig+0x260>
 8007836:	a201      	add	r2, pc, #4	; (adr r2, 800783c <UART_SetConfig+0x218>)
 8007838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783c:	08007855 	.word	0x08007855
 8007840:	0800785d 	.word	0x0800785d
 8007844:	08007865 	.word	0x08007865
 8007848:	0800786d 	.word	0x0800786d
 800784c:	08007875 	.word	0x08007875
 8007850:	0800787d 	.word	0x0800787d
 8007854:	2300      	movs	r3, #0
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800785a:	e1b6      	b.n	8007bca <UART_SetConfig+0x5a6>
 800785c:	2304      	movs	r3, #4
 800785e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007862:	e1b2      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007864:	2308      	movs	r3, #8
 8007866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800786a:	e1ae      	b.n	8007bca <UART_SetConfig+0x5a6>
 800786c:	2310      	movs	r3, #16
 800786e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007872:	e1aa      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007874:	2320      	movs	r3, #32
 8007876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800787a:	e1a6      	b.n	8007bca <UART_SetConfig+0x5a6>
 800787c:	2340      	movs	r3, #64	; 0x40
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007882:	e1a2      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007884:	2380      	movs	r3, #128	; 0x80
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800788a:	e19e      	b.n	8007bca <UART_SetConfig+0x5a6>
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a35      	ldr	r2, [pc, #212]	; (8007968 <UART_SetConfig+0x344>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d130      	bne.n	80078f8 <UART_SetConfig+0x2d4>
 8007896:	4b31      	ldr	r3, [pc, #196]	; (800795c <UART_SetConfig+0x338>)
 8007898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	2b05      	cmp	r3, #5
 80078a0:	d826      	bhi.n	80078f0 <UART_SetConfig+0x2cc>
 80078a2:	a201      	add	r2, pc, #4	; (adr r2, 80078a8 <UART_SetConfig+0x284>)
 80078a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a8:	080078c1 	.word	0x080078c1
 80078ac:	080078c9 	.word	0x080078c9
 80078b0:	080078d1 	.word	0x080078d1
 80078b4:	080078d9 	.word	0x080078d9
 80078b8:	080078e1 	.word	0x080078e1
 80078bc:	080078e9 	.word	0x080078e9
 80078c0:	2300      	movs	r3, #0
 80078c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078c6:	e180      	b.n	8007bca <UART_SetConfig+0x5a6>
 80078c8:	2304      	movs	r3, #4
 80078ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ce:	e17c      	b.n	8007bca <UART_SetConfig+0x5a6>
 80078d0:	2308      	movs	r3, #8
 80078d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078d6:	e178      	b.n	8007bca <UART_SetConfig+0x5a6>
 80078d8:	2310      	movs	r3, #16
 80078da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078de:	e174      	b.n	8007bca <UART_SetConfig+0x5a6>
 80078e0:	2320      	movs	r3, #32
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078e6:	e170      	b.n	8007bca <UART_SetConfig+0x5a6>
 80078e8:	2340      	movs	r3, #64	; 0x40
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ee:	e16c      	b.n	8007bca <UART_SetConfig+0x5a6>
 80078f0:	2380      	movs	r3, #128	; 0x80
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078f6:	e168      	b.n	8007bca <UART_SetConfig+0x5a6>
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a1b      	ldr	r2, [pc, #108]	; (800796c <UART_SetConfig+0x348>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d142      	bne.n	8007988 <UART_SetConfig+0x364>
 8007902:	4b16      	ldr	r3, [pc, #88]	; (800795c <UART_SetConfig+0x338>)
 8007904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	2b05      	cmp	r3, #5
 800790c:	d838      	bhi.n	8007980 <UART_SetConfig+0x35c>
 800790e:	a201      	add	r2, pc, #4	; (adr r2, 8007914 <UART_SetConfig+0x2f0>)
 8007910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007914:	0800792d 	.word	0x0800792d
 8007918:	08007935 	.word	0x08007935
 800791c:	0800793d 	.word	0x0800793d
 8007920:	08007945 	.word	0x08007945
 8007924:	08007971 	.word	0x08007971
 8007928:	08007979 	.word	0x08007979
 800792c:	2300      	movs	r3, #0
 800792e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007932:	e14a      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007934:	2304      	movs	r3, #4
 8007936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800793a:	e146      	b.n	8007bca <UART_SetConfig+0x5a6>
 800793c:	2308      	movs	r3, #8
 800793e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007942:	e142      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007944:	2310      	movs	r3, #16
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800794a:	e13e      	b.n	8007bca <UART_SetConfig+0x5a6>
 800794c:	cfff69f3 	.word	0xcfff69f3
 8007950:	58000c00 	.word	0x58000c00
 8007954:	11fff4ff 	.word	0x11fff4ff
 8007958:	40011000 	.word	0x40011000
 800795c:	58024400 	.word	0x58024400
 8007960:	40004400 	.word	0x40004400
 8007964:	40004800 	.word	0x40004800
 8007968:	40004c00 	.word	0x40004c00
 800796c:	40005000 	.word	0x40005000
 8007970:	2320      	movs	r3, #32
 8007972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007976:	e128      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007978:	2340      	movs	r3, #64	; 0x40
 800797a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800797e:	e124      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007980:	2380      	movs	r3, #128	; 0x80
 8007982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007986:	e120      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4acb      	ldr	r2, [pc, #812]	; (8007cbc <UART_SetConfig+0x698>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d176      	bne.n	8007a80 <UART_SetConfig+0x45c>
 8007992:	4bcb      	ldr	r3, [pc, #812]	; (8007cc0 <UART_SetConfig+0x69c>)
 8007994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007996:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800799a:	2b28      	cmp	r3, #40	; 0x28
 800799c:	d86c      	bhi.n	8007a78 <UART_SetConfig+0x454>
 800799e:	a201      	add	r2, pc, #4	; (adr r2, 80079a4 <UART_SetConfig+0x380>)
 80079a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a4:	08007a49 	.word	0x08007a49
 80079a8:	08007a79 	.word	0x08007a79
 80079ac:	08007a79 	.word	0x08007a79
 80079b0:	08007a79 	.word	0x08007a79
 80079b4:	08007a79 	.word	0x08007a79
 80079b8:	08007a79 	.word	0x08007a79
 80079bc:	08007a79 	.word	0x08007a79
 80079c0:	08007a79 	.word	0x08007a79
 80079c4:	08007a51 	.word	0x08007a51
 80079c8:	08007a79 	.word	0x08007a79
 80079cc:	08007a79 	.word	0x08007a79
 80079d0:	08007a79 	.word	0x08007a79
 80079d4:	08007a79 	.word	0x08007a79
 80079d8:	08007a79 	.word	0x08007a79
 80079dc:	08007a79 	.word	0x08007a79
 80079e0:	08007a79 	.word	0x08007a79
 80079e4:	08007a59 	.word	0x08007a59
 80079e8:	08007a79 	.word	0x08007a79
 80079ec:	08007a79 	.word	0x08007a79
 80079f0:	08007a79 	.word	0x08007a79
 80079f4:	08007a79 	.word	0x08007a79
 80079f8:	08007a79 	.word	0x08007a79
 80079fc:	08007a79 	.word	0x08007a79
 8007a00:	08007a79 	.word	0x08007a79
 8007a04:	08007a61 	.word	0x08007a61
 8007a08:	08007a79 	.word	0x08007a79
 8007a0c:	08007a79 	.word	0x08007a79
 8007a10:	08007a79 	.word	0x08007a79
 8007a14:	08007a79 	.word	0x08007a79
 8007a18:	08007a79 	.word	0x08007a79
 8007a1c:	08007a79 	.word	0x08007a79
 8007a20:	08007a79 	.word	0x08007a79
 8007a24:	08007a69 	.word	0x08007a69
 8007a28:	08007a79 	.word	0x08007a79
 8007a2c:	08007a79 	.word	0x08007a79
 8007a30:	08007a79 	.word	0x08007a79
 8007a34:	08007a79 	.word	0x08007a79
 8007a38:	08007a79 	.word	0x08007a79
 8007a3c:	08007a79 	.word	0x08007a79
 8007a40:	08007a79 	.word	0x08007a79
 8007a44:	08007a71 	.word	0x08007a71
 8007a48:	2301      	movs	r3, #1
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a4e:	e0bc      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007a50:	2304      	movs	r3, #4
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a56:	e0b8      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007a58:	2308      	movs	r3, #8
 8007a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a5e:	e0b4      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007a60:	2310      	movs	r3, #16
 8007a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a66:	e0b0      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007a68:	2320      	movs	r3, #32
 8007a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a6e:	e0ac      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007a70:	2340      	movs	r3, #64	; 0x40
 8007a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a76:	e0a8      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007a78:	2380      	movs	r3, #128	; 0x80
 8007a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a7e:	e0a4      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a8f      	ldr	r2, [pc, #572]	; (8007cc4 <UART_SetConfig+0x6a0>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d130      	bne.n	8007aec <UART_SetConfig+0x4c8>
 8007a8a:	4b8d      	ldr	r3, [pc, #564]	; (8007cc0 <UART_SetConfig+0x69c>)
 8007a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a8e:	f003 0307 	and.w	r3, r3, #7
 8007a92:	2b05      	cmp	r3, #5
 8007a94:	d826      	bhi.n	8007ae4 <UART_SetConfig+0x4c0>
 8007a96:	a201      	add	r2, pc, #4	; (adr r2, 8007a9c <UART_SetConfig+0x478>)
 8007a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9c:	08007ab5 	.word	0x08007ab5
 8007aa0:	08007abd 	.word	0x08007abd
 8007aa4:	08007ac5 	.word	0x08007ac5
 8007aa8:	08007acd 	.word	0x08007acd
 8007aac:	08007ad5 	.word	0x08007ad5
 8007ab0:	08007add 	.word	0x08007add
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aba:	e086      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007abc:	2304      	movs	r3, #4
 8007abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ac2:	e082      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007ac4:	2308      	movs	r3, #8
 8007ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aca:	e07e      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007acc:	2310      	movs	r3, #16
 8007ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ad2:	e07a      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007ad4:	2320      	movs	r3, #32
 8007ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ada:	e076      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007adc:	2340      	movs	r3, #64	; 0x40
 8007ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ae2:	e072      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007ae4:	2380      	movs	r3, #128	; 0x80
 8007ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aea:	e06e      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a75      	ldr	r2, [pc, #468]	; (8007cc8 <UART_SetConfig+0x6a4>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d130      	bne.n	8007b58 <UART_SetConfig+0x534>
 8007af6:	4b72      	ldr	r3, [pc, #456]	; (8007cc0 <UART_SetConfig+0x69c>)
 8007af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007afa:	f003 0307 	and.w	r3, r3, #7
 8007afe:	2b05      	cmp	r3, #5
 8007b00:	d826      	bhi.n	8007b50 <UART_SetConfig+0x52c>
 8007b02:	a201      	add	r2, pc, #4	; (adr r2, 8007b08 <UART_SetConfig+0x4e4>)
 8007b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b08:	08007b21 	.word	0x08007b21
 8007b0c:	08007b29 	.word	0x08007b29
 8007b10:	08007b31 	.word	0x08007b31
 8007b14:	08007b39 	.word	0x08007b39
 8007b18:	08007b41 	.word	0x08007b41
 8007b1c:	08007b49 	.word	0x08007b49
 8007b20:	2300      	movs	r3, #0
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b26:	e050      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007b28:	2304      	movs	r3, #4
 8007b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b2e:	e04c      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007b30:	2308      	movs	r3, #8
 8007b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b36:	e048      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007b38:	2310      	movs	r3, #16
 8007b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b3e:	e044      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007b40:	2320      	movs	r3, #32
 8007b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b46:	e040      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007b48:	2340      	movs	r3, #64	; 0x40
 8007b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b4e:	e03c      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007b50:	2380      	movs	r3, #128	; 0x80
 8007b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b56:	e038      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a5b      	ldr	r2, [pc, #364]	; (8007ccc <UART_SetConfig+0x6a8>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d130      	bne.n	8007bc4 <UART_SetConfig+0x5a0>
 8007b62:	4b57      	ldr	r3, [pc, #348]	; (8007cc0 <UART_SetConfig+0x69c>)
 8007b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	2b05      	cmp	r3, #5
 8007b6c:	d826      	bhi.n	8007bbc <UART_SetConfig+0x598>
 8007b6e:	a201      	add	r2, pc, #4	; (adr r2, 8007b74 <UART_SetConfig+0x550>)
 8007b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b74:	08007b8d 	.word	0x08007b8d
 8007b78:	08007b95 	.word	0x08007b95
 8007b7c:	08007b9d 	.word	0x08007b9d
 8007b80:	08007ba5 	.word	0x08007ba5
 8007b84:	08007bad 	.word	0x08007bad
 8007b88:	08007bb5 	.word	0x08007bb5
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b92:	e01a      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007b94:	2304      	movs	r3, #4
 8007b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b9a:	e016      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007b9c:	2308      	movs	r3, #8
 8007b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ba2:	e012      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007ba4:	2310      	movs	r3, #16
 8007ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007baa:	e00e      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007bac:	2320      	movs	r3, #32
 8007bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bb2:	e00a      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007bb4:	2340      	movs	r3, #64	; 0x40
 8007bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bba:	e006      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007bbc:	2380      	movs	r3, #128	; 0x80
 8007bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bc2:	e002      	b.n	8007bca <UART_SetConfig+0x5a6>
 8007bc4:	2380      	movs	r3, #128	; 0x80
 8007bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a3f      	ldr	r2, [pc, #252]	; (8007ccc <UART_SetConfig+0x6a8>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	f040 80f8 	bne.w	8007dc6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bd6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	dc46      	bgt.n	8007c6c <UART_SetConfig+0x648>
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	f2c0 8082 	blt.w	8007ce8 <UART_SetConfig+0x6c4>
 8007be4:	3b02      	subs	r3, #2
 8007be6:	2b1e      	cmp	r3, #30
 8007be8:	d87e      	bhi.n	8007ce8 <UART_SetConfig+0x6c4>
 8007bea:	a201      	add	r2, pc, #4	; (adr r2, 8007bf0 <UART_SetConfig+0x5cc>)
 8007bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf0:	08007c73 	.word	0x08007c73
 8007bf4:	08007ce9 	.word	0x08007ce9
 8007bf8:	08007c7b 	.word	0x08007c7b
 8007bfc:	08007ce9 	.word	0x08007ce9
 8007c00:	08007ce9 	.word	0x08007ce9
 8007c04:	08007ce9 	.word	0x08007ce9
 8007c08:	08007c8b 	.word	0x08007c8b
 8007c0c:	08007ce9 	.word	0x08007ce9
 8007c10:	08007ce9 	.word	0x08007ce9
 8007c14:	08007ce9 	.word	0x08007ce9
 8007c18:	08007ce9 	.word	0x08007ce9
 8007c1c:	08007ce9 	.word	0x08007ce9
 8007c20:	08007ce9 	.word	0x08007ce9
 8007c24:	08007ce9 	.word	0x08007ce9
 8007c28:	08007c9b 	.word	0x08007c9b
 8007c2c:	08007ce9 	.word	0x08007ce9
 8007c30:	08007ce9 	.word	0x08007ce9
 8007c34:	08007ce9 	.word	0x08007ce9
 8007c38:	08007ce9 	.word	0x08007ce9
 8007c3c:	08007ce9 	.word	0x08007ce9
 8007c40:	08007ce9 	.word	0x08007ce9
 8007c44:	08007ce9 	.word	0x08007ce9
 8007c48:	08007ce9 	.word	0x08007ce9
 8007c4c:	08007ce9 	.word	0x08007ce9
 8007c50:	08007ce9 	.word	0x08007ce9
 8007c54:	08007ce9 	.word	0x08007ce9
 8007c58:	08007ce9 	.word	0x08007ce9
 8007c5c:	08007ce9 	.word	0x08007ce9
 8007c60:	08007ce9 	.word	0x08007ce9
 8007c64:	08007ce9 	.word	0x08007ce9
 8007c68:	08007cdb 	.word	0x08007cdb
 8007c6c:	2b40      	cmp	r3, #64	; 0x40
 8007c6e:	d037      	beq.n	8007ce0 <UART_SetConfig+0x6bc>
 8007c70:	e03a      	b.n	8007ce8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007c72:	f7fc ff9f 	bl	8004bb4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007c76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c78:	e03c      	b.n	8007cf4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fc ffae 	bl	8004be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c88:	e034      	b.n	8007cf4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c8a:	f107 0318 	add.w	r3, r7, #24
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fd f8fa 	bl	8004e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c98:	e02c      	b.n	8007cf4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c9a:	4b09      	ldr	r3, [pc, #36]	; (8007cc0 <UART_SetConfig+0x69c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0320 	and.w	r3, r3, #32
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d016      	beq.n	8007cd4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ca6:	4b06      	ldr	r3, [pc, #24]	; (8007cc0 <UART_SetConfig+0x69c>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	08db      	lsrs	r3, r3, #3
 8007cac:	f003 0303 	and.w	r3, r3, #3
 8007cb0:	4a07      	ldr	r2, [pc, #28]	; (8007cd0 <UART_SetConfig+0x6ac>)
 8007cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007cb8:	e01c      	b.n	8007cf4 <UART_SetConfig+0x6d0>
 8007cba:	bf00      	nop
 8007cbc:	40011400 	.word	0x40011400
 8007cc0:	58024400 	.word	0x58024400
 8007cc4:	40007800 	.word	0x40007800
 8007cc8:	40007c00 	.word	0x40007c00
 8007ccc:	58000c00 	.word	0x58000c00
 8007cd0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007cd4:	4b9d      	ldr	r3, [pc, #628]	; (8007f4c <UART_SetConfig+0x928>)
 8007cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cd8:	e00c      	b.n	8007cf4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cda:	4b9d      	ldr	r3, [pc, #628]	; (8007f50 <UART_SetConfig+0x92c>)
 8007cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cde:	e009      	b.n	8007cf4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ce6:	e005      	b.n	8007cf4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007cf2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 81de 	beq.w	80080b8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d00:	4a94      	ldr	r2, [pc, #592]	; (8007f54 <UART_SetConfig+0x930>)
 8007d02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d06:	461a      	mov	r2, r3
 8007d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d0e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	4613      	mov	r3, r2
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	4413      	add	r3, r2
 8007d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d305      	bcc.n	8007d2c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d903      	bls.n	8007d34 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007d32:	e1c1      	b.n	80080b8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d36:	2200      	movs	r2, #0
 8007d38:	60bb      	str	r3, [r7, #8]
 8007d3a:	60fa      	str	r2, [r7, #12]
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d40:	4a84      	ldr	r2, [pc, #528]	; (8007f54 <UART_SetConfig+0x930>)
 8007d42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	2200      	movs	r2, #0
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	607a      	str	r2, [r7, #4]
 8007d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d56:	f7f8 fb1b 	bl	8000390 <__aeabi_uldivmod>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4610      	mov	r0, r2
 8007d60:	4619      	mov	r1, r3
 8007d62:	f04f 0200 	mov.w	r2, #0
 8007d66:	f04f 0300 	mov.w	r3, #0
 8007d6a:	020b      	lsls	r3, r1, #8
 8007d6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d70:	0202      	lsls	r2, r0, #8
 8007d72:	6979      	ldr	r1, [r7, #20]
 8007d74:	6849      	ldr	r1, [r1, #4]
 8007d76:	0849      	lsrs	r1, r1, #1
 8007d78:	2000      	movs	r0, #0
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	eb12 0804 	adds.w	r8, r2, r4
 8007d82:	eb43 0905 	adc.w	r9, r3, r5
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	469a      	mov	sl, r3
 8007d8e:	4693      	mov	fp, r2
 8007d90:	4652      	mov	r2, sl
 8007d92:	465b      	mov	r3, fp
 8007d94:	4640      	mov	r0, r8
 8007d96:	4649      	mov	r1, r9
 8007d98:	f7f8 fafa 	bl	8000390 <__aeabi_uldivmod>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4613      	mov	r3, r2
 8007da2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007daa:	d308      	bcc.n	8007dbe <UART_SetConfig+0x79a>
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007db2:	d204      	bcs.n	8007dbe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dba:	60da      	str	r2, [r3, #12]
 8007dbc:	e17c      	b.n	80080b8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007dc4:	e178      	b.n	80080b8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dce:	f040 80c5 	bne.w	8007f5c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007dd2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007dd6:	2b20      	cmp	r3, #32
 8007dd8:	dc48      	bgt.n	8007e6c <UART_SetConfig+0x848>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	db7b      	blt.n	8007ed6 <UART_SetConfig+0x8b2>
 8007dde:	2b20      	cmp	r3, #32
 8007de0:	d879      	bhi.n	8007ed6 <UART_SetConfig+0x8b2>
 8007de2:	a201      	add	r2, pc, #4	; (adr r2, 8007de8 <UART_SetConfig+0x7c4>)
 8007de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de8:	08007e73 	.word	0x08007e73
 8007dec:	08007e7b 	.word	0x08007e7b
 8007df0:	08007ed7 	.word	0x08007ed7
 8007df4:	08007ed7 	.word	0x08007ed7
 8007df8:	08007e83 	.word	0x08007e83
 8007dfc:	08007ed7 	.word	0x08007ed7
 8007e00:	08007ed7 	.word	0x08007ed7
 8007e04:	08007ed7 	.word	0x08007ed7
 8007e08:	08007e93 	.word	0x08007e93
 8007e0c:	08007ed7 	.word	0x08007ed7
 8007e10:	08007ed7 	.word	0x08007ed7
 8007e14:	08007ed7 	.word	0x08007ed7
 8007e18:	08007ed7 	.word	0x08007ed7
 8007e1c:	08007ed7 	.word	0x08007ed7
 8007e20:	08007ed7 	.word	0x08007ed7
 8007e24:	08007ed7 	.word	0x08007ed7
 8007e28:	08007ea3 	.word	0x08007ea3
 8007e2c:	08007ed7 	.word	0x08007ed7
 8007e30:	08007ed7 	.word	0x08007ed7
 8007e34:	08007ed7 	.word	0x08007ed7
 8007e38:	08007ed7 	.word	0x08007ed7
 8007e3c:	08007ed7 	.word	0x08007ed7
 8007e40:	08007ed7 	.word	0x08007ed7
 8007e44:	08007ed7 	.word	0x08007ed7
 8007e48:	08007ed7 	.word	0x08007ed7
 8007e4c:	08007ed7 	.word	0x08007ed7
 8007e50:	08007ed7 	.word	0x08007ed7
 8007e54:	08007ed7 	.word	0x08007ed7
 8007e58:	08007ed7 	.word	0x08007ed7
 8007e5c:	08007ed7 	.word	0x08007ed7
 8007e60:	08007ed7 	.word	0x08007ed7
 8007e64:	08007ed7 	.word	0x08007ed7
 8007e68:	08007ec9 	.word	0x08007ec9
 8007e6c:	2b40      	cmp	r3, #64	; 0x40
 8007e6e:	d02e      	beq.n	8007ece <UART_SetConfig+0x8aa>
 8007e70:	e031      	b.n	8007ed6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e72:	f7fb ff2d 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 8007e76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e78:	e033      	b.n	8007ee2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e7a:	f7fb ff3f 	bl	8003cfc <HAL_RCC_GetPCLK2Freq>
 8007e7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e80:	e02f      	b.n	8007ee2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fc feaa 	bl	8004be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e90:	e027      	b.n	8007ee2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e92:	f107 0318 	add.w	r3, r7, #24
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fc fff6 	bl	8004e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ea0:	e01f      	b.n	8007ee2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ea2:	4b2d      	ldr	r3, [pc, #180]	; (8007f58 <UART_SetConfig+0x934>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d009      	beq.n	8007ec2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007eae:	4b2a      	ldr	r3, [pc, #168]	; (8007f58 <UART_SetConfig+0x934>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	08db      	lsrs	r3, r3, #3
 8007eb4:	f003 0303 	and.w	r3, r3, #3
 8007eb8:	4a24      	ldr	r2, [pc, #144]	; (8007f4c <UART_SetConfig+0x928>)
 8007eba:	fa22 f303 	lsr.w	r3, r2, r3
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ec0:	e00f      	b.n	8007ee2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007ec2:	4b22      	ldr	r3, [pc, #136]	; (8007f4c <UART_SetConfig+0x928>)
 8007ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ec6:	e00c      	b.n	8007ee2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ec8:	4b21      	ldr	r3, [pc, #132]	; (8007f50 <UART_SetConfig+0x92c>)
 8007eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ecc:	e009      	b.n	8007ee2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ed4:	e005      	b.n	8007ee2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007ee0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 80e7 	beq.w	80080b8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eee:	4a19      	ldr	r2, [pc, #100]	; (8007f54 <UART_SetConfig+0x930>)
 8007ef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007efc:	005a      	lsls	r2, r3, #1
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	085b      	lsrs	r3, r3, #1
 8007f04:	441a      	add	r2, r3
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f0e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f12:	2b0f      	cmp	r3, #15
 8007f14:	d916      	bls.n	8007f44 <UART_SetConfig+0x920>
 8007f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f1c:	d212      	bcs.n	8007f44 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	f023 030f 	bic.w	r3, r3, #15
 8007f26:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2a:	085b      	lsrs	r3, r3, #1
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	f003 0307 	and.w	r3, r3, #7
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007f36:	4313      	orrs	r3, r2
 8007f38:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007f40:	60da      	str	r2, [r3, #12]
 8007f42:	e0b9      	b.n	80080b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007f4a:	e0b5      	b.n	80080b8 <UART_SetConfig+0xa94>
 8007f4c:	03d09000 	.word	0x03d09000
 8007f50:	003d0900 	.word	0x003d0900
 8007f54:	08009520 	.word	0x08009520
 8007f58:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f5c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f60:	2b20      	cmp	r3, #32
 8007f62:	dc49      	bgt.n	8007ff8 <UART_SetConfig+0x9d4>
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	db7c      	blt.n	8008062 <UART_SetConfig+0xa3e>
 8007f68:	2b20      	cmp	r3, #32
 8007f6a:	d87a      	bhi.n	8008062 <UART_SetConfig+0xa3e>
 8007f6c:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <UART_SetConfig+0x950>)
 8007f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f72:	bf00      	nop
 8007f74:	08007fff 	.word	0x08007fff
 8007f78:	08008007 	.word	0x08008007
 8007f7c:	08008063 	.word	0x08008063
 8007f80:	08008063 	.word	0x08008063
 8007f84:	0800800f 	.word	0x0800800f
 8007f88:	08008063 	.word	0x08008063
 8007f8c:	08008063 	.word	0x08008063
 8007f90:	08008063 	.word	0x08008063
 8007f94:	0800801f 	.word	0x0800801f
 8007f98:	08008063 	.word	0x08008063
 8007f9c:	08008063 	.word	0x08008063
 8007fa0:	08008063 	.word	0x08008063
 8007fa4:	08008063 	.word	0x08008063
 8007fa8:	08008063 	.word	0x08008063
 8007fac:	08008063 	.word	0x08008063
 8007fb0:	08008063 	.word	0x08008063
 8007fb4:	0800802f 	.word	0x0800802f
 8007fb8:	08008063 	.word	0x08008063
 8007fbc:	08008063 	.word	0x08008063
 8007fc0:	08008063 	.word	0x08008063
 8007fc4:	08008063 	.word	0x08008063
 8007fc8:	08008063 	.word	0x08008063
 8007fcc:	08008063 	.word	0x08008063
 8007fd0:	08008063 	.word	0x08008063
 8007fd4:	08008063 	.word	0x08008063
 8007fd8:	08008063 	.word	0x08008063
 8007fdc:	08008063 	.word	0x08008063
 8007fe0:	08008063 	.word	0x08008063
 8007fe4:	08008063 	.word	0x08008063
 8007fe8:	08008063 	.word	0x08008063
 8007fec:	08008063 	.word	0x08008063
 8007ff0:	08008063 	.word	0x08008063
 8007ff4:	08008055 	.word	0x08008055
 8007ff8:	2b40      	cmp	r3, #64	; 0x40
 8007ffa:	d02e      	beq.n	800805a <UART_SetConfig+0xa36>
 8007ffc:	e031      	b.n	8008062 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ffe:	f7fb fe67 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 8008002:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008004:	e033      	b.n	800806e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008006:	f7fb fe79 	bl	8003cfc <HAL_RCC_GetPCLK2Freq>
 800800a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800800c:	e02f      	b.n	800806e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800800e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008012:	4618      	mov	r0, r3
 8008014:	f7fc fde4 	bl	8004be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800801c:	e027      	b.n	800806e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800801e:	f107 0318 	add.w	r3, r7, #24
 8008022:	4618      	mov	r0, r3
 8008024:	f7fc ff30 	bl	8004e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800802c:	e01f      	b.n	800806e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800802e:	4b2d      	ldr	r3, [pc, #180]	; (80080e4 <UART_SetConfig+0xac0>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0320 	and.w	r3, r3, #32
 8008036:	2b00      	cmp	r3, #0
 8008038:	d009      	beq.n	800804e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800803a:	4b2a      	ldr	r3, [pc, #168]	; (80080e4 <UART_SetConfig+0xac0>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	08db      	lsrs	r3, r3, #3
 8008040:	f003 0303 	and.w	r3, r3, #3
 8008044:	4a28      	ldr	r2, [pc, #160]	; (80080e8 <UART_SetConfig+0xac4>)
 8008046:	fa22 f303 	lsr.w	r3, r2, r3
 800804a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800804c:	e00f      	b.n	800806e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800804e:	4b26      	ldr	r3, [pc, #152]	; (80080e8 <UART_SetConfig+0xac4>)
 8008050:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008052:	e00c      	b.n	800806e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008054:	4b25      	ldr	r3, [pc, #148]	; (80080ec <UART_SetConfig+0xac8>)
 8008056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008058:	e009      	b.n	800806e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800805a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800805e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008060:	e005      	b.n	800806e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800806c:	bf00      	nop
    }

    if (pclk != 0U)
 800806e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008070:	2b00      	cmp	r3, #0
 8008072:	d021      	beq.n	80080b8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	4a1d      	ldr	r2, [pc, #116]	; (80080f0 <UART_SetConfig+0xacc>)
 800807a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800807e:	461a      	mov	r2, r3
 8008080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008082:	fbb3 f2f2 	udiv	r2, r3, r2
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	085b      	lsrs	r3, r3, #1
 800808c:	441a      	add	r2, r3
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	fbb2 f3f3 	udiv	r3, r2, r3
 8008096:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809a:	2b0f      	cmp	r3, #15
 800809c:	d909      	bls.n	80080b2 <UART_SetConfig+0xa8e>
 800809e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a4:	d205      	bcs.n	80080b2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	60da      	str	r2, [r3, #12]
 80080b0:	e002      	b.n	80080b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	2200      	movs	r2, #0
 80080cc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2200      	movs	r2, #0
 80080d2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80080d4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3748      	adds	r7, #72	; 0x48
 80080dc:	46bd      	mov	sp, r7
 80080de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080e2:	bf00      	nop
 80080e4:	58024400 	.word	0x58024400
 80080e8:	03d09000 	.word	0x03d09000
 80080ec:	003d0900 	.word	0x003d0900
 80080f0:	08009520 	.word	0x08009520

080080f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008100:	f003 0301 	and.w	r3, r3, #1
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00a      	beq.n	800811e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	430a      	orrs	r2, r1
 800811c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00a      	beq.n	8008140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	430a      	orrs	r2, r1
 800813e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008144:	f003 0304 	and.w	r3, r3, #4
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00a      	beq.n	8008162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	430a      	orrs	r2, r1
 8008160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008166:	f003 0308 	and.w	r3, r3, #8
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00a      	beq.n	8008184 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	430a      	orrs	r2, r1
 8008182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008188:	f003 0310 	and.w	r3, r3, #16
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00a      	beq.n	80081a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081aa:	f003 0320 	and.w	r3, r3, #32
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00a      	beq.n	80081c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	430a      	orrs	r2, r1
 80081c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d01a      	beq.n	800820a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	430a      	orrs	r2, r1
 80081e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081f2:	d10a      	bne.n	800820a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	430a      	orrs	r2, r1
 8008208:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00a      	beq.n	800822c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	430a      	orrs	r2, r1
 800822a:	605a      	str	r2, [r3, #4]
  }
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af02      	add	r7, sp, #8
 800823e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008248:	f7fa fa42 	bl	80026d0 <HAL_GetTick>
 800824c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0308 	and.w	r3, r3, #8
 8008258:	2b08      	cmp	r3, #8
 800825a:	d10e      	bne.n	800827a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800825c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f82f 	bl	80082ce <UART_WaitOnFlagUntilTimeout>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e025      	b.n	80082c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 0304 	and.w	r3, r3, #4
 8008284:	2b04      	cmp	r3, #4
 8008286:	d10e      	bne.n	80082a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008288:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f819 	bl	80082ce <UART_WaitOnFlagUntilTimeout>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e00f      	b.n	80082c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2220      	movs	r2, #32
 80082aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2220      	movs	r2, #32
 80082b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b09c      	sub	sp, #112	; 0x70
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	603b      	str	r3, [r7, #0]
 80082da:	4613      	mov	r3, r2
 80082dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082de:	e0a9      	b.n	8008434 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e6:	f000 80a5 	beq.w	8008434 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ea:	f7fa f9f1 	bl	80026d0 <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d302      	bcc.n	8008300 <UART_WaitOnFlagUntilTimeout+0x32>
 80082fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d140      	bne.n	8008382 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008308:	e853 3f00 	ldrex	r3, [r3]
 800830c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800830e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008310:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008314:	667b      	str	r3, [r7, #100]	; 0x64
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800831e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008320:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008322:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008324:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008326:	e841 2300 	strex	r3, r2, [r1]
 800832a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800832c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1e6      	bne.n	8008300 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3308      	adds	r3, #8
 8008338:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800833c:	e853 3f00 	ldrex	r3, [r3]
 8008340:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008344:	f023 0301 	bic.w	r3, r3, #1
 8008348:	663b      	str	r3, [r7, #96]	; 0x60
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	3308      	adds	r3, #8
 8008350:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008352:	64ba      	str	r2, [r7, #72]	; 0x48
 8008354:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008356:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800835a:	e841 2300 	strex	r3, r2, [r1]
 800835e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1e5      	bne.n	8008332 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2220      	movs	r2, #32
 800836a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2220      	movs	r2, #32
 8008372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e069      	b.n	8008456 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0304 	and.w	r3, r3, #4
 800838c:	2b00      	cmp	r3, #0
 800838e:	d051      	beq.n	8008434 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800839a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800839e:	d149      	bne.n	8008434 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b2:	e853 3f00 	ldrex	r3, [r3]
 80083b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	461a      	mov	r2, r3
 80083c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083c8:	637b      	str	r3, [r7, #52]	; 0x34
 80083ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083d0:	e841 2300 	strex	r3, r2, [r1]
 80083d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1e6      	bne.n	80083aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3308      	adds	r3, #8
 80083e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	e853 3f00 	ldrex	r3, [r3]
 80083ea:	613b      	str	r3, [r7, #16]
   return(result);
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	f023 0301 	bic.w	r3, r3, #1
 80083f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3308      	adds	r3, #8
 80083fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083fc:	623a      	str	r2, [r7, #32]
 80083fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008400:	69f9      	ldr	r1, [r7, #28]
 8008402:	6a3a      	ldr	r2, [r7, #32]
 8008404:	e841 2300 	strex	r3, r2, [r1]
 8008408:	61bb      	str	r3, [r7, #24]
   return(result);
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1e5      	bne.n	80083dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2220      	movs	r2, #32
 8008414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2220      	movs	r2, #32
 800841c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2220      	movs	r2, #32
 8008424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e010      	b.n	8008456 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	69da      	ldr	r2, [r3, #28]
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	4013      	ands	r3, r2
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	429a      	cmp	r2, r3
 8008442:	bf0c      	ite	eq
 8008444:	2301      	moveq	r3, #1
 8008446:	2300      	movne	r3, #0
 8008448:	b2db      	uxtb	r3, r3
 800844a:	461a      	mov	r2, r3
 800844c:	79fb      	ldrb	r3, [r7, #7]
 800844e:	429a      	cmp	r2, r3
 8008450:	f43f af46 	beq.w	80082e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3770      	adds	r7, #112	; 0x70
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800845e:	b480      	push	{r7}
 8008460:	b085      	sub	sp, #20
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800846c:	2b01      	cmp	r3, #1
 800846e:	d101      	bne.n	8008474 <HAL_UARTEx_DisableFifoMode+0x16>
 8008470:	2302      	movs	r3, #2
 8008472:	e027      	b.n	80084c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2224      	movs	r2, #36	; 0x24
 8008480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 0201 	bic.w	r2, r2, #1
 800849a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80084a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2220      	movs	r2, #32
 80084b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d101      	bne.n	80084e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084e4:	2302      	movs	r3, #2
 80084e6:	e02d      	b.n	8008544 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2224      	movs	r2, #36	; 0x24
 80084f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f022 0201 	bic.w	r2, r2, #1
 800850e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f84f 	bl	80085c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2220      	movs	r2, #32
 8008536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800855c:	2b01      	cmp	r3, #1
 800855e:	d101      	bne.n	8008564 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008560:	2302      	movs	r3, #2
 8008562:	e02d      	b.n	80085c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2224      	movs	r2, #36	; 0x24
 8008570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 0201 	bic.w	r2, r2, #1
 800858a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	430a      	orrs	r2, r1
 800859e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f811 	bl	80085c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2220      	movs	r2, #32
 80085b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d108      	bne.n	80085ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085e8:	e031      	b.n	800864e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085ea:	2310      	movs	r3, #16
 80085ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085ee:	2310      	movs	r3, #16
 80085f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	0e5b      	lsrs	r3, r3, #25
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	f003 0307 	and.w	r3, r3, #7
 8008600:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	0f5b      	lsrs	r3, r3, #29
 800860a:	b2db      	uxtb	r3, r3
 800860c:	f003 0307 	and.w	r3, r3, #7
 8008610:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008612:	7bbb      	ldrb	r3, [r7, #14]
 8008614:	7b3a      	ldrb	r2, [r7, #12]
 8008616:	4911      	ldr	r1, [pc, #68]	; (800865c <UARTEx_SetNbDataToProcess+0x94>)
 8008618:	5c8a      	ldrb	r2, [r1, r2]
 800861a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800861e:	7b3a      	ldrb	r2, [r7, #12]
 8008620:	490f      	ldr	r1, [pc, #60]	; (8008660 <UARTEx_SetNbDataToProcess+0x98>)
 8008622:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008624:	fb93 f3f2 	sdiv	r3, r3, r2
 8008628:	b29a      	uxth	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008630:	7bfb      	ldrb	r3, [r7, #15]
 8008632:	7b7a      	ldrb	r2, [r7, #13]
 8008634:	4909      	ldr	r1, [pc, #36]	; (800865c <UARTEx_SetNbDataToProcess+0x94>)
 8008636:	5c8a      	ldrb	r2, [r1, r2]
 8008638:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800863c:	7b7a      	ldrb	r2, [r7, #13]
 800863e:	4908      	ldr	r1, [pc, #32]	; (8008660 <UARTEx_SetNbDataToProcess+0x98>)
 8008640:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008642:	fb93 f3f2 	sdiv	r3, r3, r2
 8008646:	b29a      	uxth	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800864e:	bf00      	nop
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	08009538 	.word	0x08009538
 8008660:	08009540 	.word	0x08009540

08008664 <__errno>:
 8008664:	4b01      	ldr	r3, [pc, #4]	; (800866c <__errno+0x8>)
 8008666:	6818      	ldr	r0, [r3, #0]
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	24000018 	.word	0x24000018

08008670 <__libc_init_array>:
 8008670:	b570      	push	{r4, r5, r6, lr}
 8008672:	4d0d      	ldr	r5, [pc, #52]	; (80086a8 <__libc_init_array+0x38>)
 8008674:	4c0d      	ldr	r4, [pc, #52]	; (80086ac <__libc_init_array+0x3c>)
 8008676:	1b64      	subs	r4, r4, r5
 8008678:	10a4      	asrs	r4, r4, #2
 800867a:	2600      	movs	r6, #0
 800867c:	42a6      	cmp	r6, r4
 800867e:	d109      	bne.n	8008694 <__libc_init_array+0x24>
 8008680:	4d0b      	ldr	r5, [pc, #44]	; (80086b0 <__libc_init_array+0x40>)
 8008682:	4c0c      	ldr	r4, [pc, #48]	; (80086b4 <__libc_init_array+0x44>)
 8008684:	f000 fc8e 	bl	8008fa4 <_init>
 8008688:	1b64      	subs	r4, r4, r5
 800868a:	10a4      	asrs	r4, r4, #2
 800868c:	2600      	movs	r6, #0
 800868e:	42a6      	cmp	r6, r4
 8008690:	d105      	bne.n	800869e <__libc_init_array+0x2e>
 8008692:	bd70      	pop	{r4, r5, r6, pc}
 8008694:	f855 3b04 	ldr.w	r3, [r5], #4
 8008698:	4798      	blx	r3
 800869a:	3601      	adds	r6, #1
 800869c:	e7ee      	b.n	800867c <__libc_init_array+0xc>
 800869e:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a2:	4798      	blx	r3
 80086a4:	3601      	adds	r6, #1
 80086a6:	e7f2      	b.n	800868e <__libc_init_array+0x1e>
 80086a8:	080095e4 	.word	0x080095e4
 80086ac:	080095e4 	.word	0x080095e4
 80086b0:	080095e4 	.word	0x080095e4
 80086b4:	080095e8 	.word	0x080095e8

080086b8 <memcpy>:
 80086b8:	440a      	add	r2, r1
 80086ba:	4291      	cmp	r1, r2
 80086bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80086c0:	d100      	bne.n	80086c4 <memcpy+0xc>
 80086c2:	4770      	bx	lr
 80086c4:	b510      	push	{r4, lr}
 80086c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086ce:	4291      	cmp	r1, r2
 80086d0:	d1f9      	bne.n	80086c6 <memcpy+0xe>
 80086d2:	bd10      	pop	{r4, pc}

080086d4 <memset>:
 80086d4:	4402      	add	r2, r0
 80086d6:	4603      	mov	r3, r0
 80086d8:	4293      	cmp	r3, r2
 80086da:	d100      	bne.n	80086de <memset+0xa>
 80086dc:	4770      	bx	lr
 80086de:	f803 1b01 	strb.w	r1, [r3], #1
 80086e2:	e7f9      	b.n	80086d8 <memset+0x4>

080086e4 <siprintf>:
 80086e4:	b40e      	push	{r1, r2, r3}
 80086e6:	b500      	push	{lr}
 80086e8:	b09c      	sub	sp, #112	; 0x70
 80086ea:	ab1d      	add	r3, sp, #116	; 0x74
 80086ec:	9002      	str	r0, [sp, #8]
 80086ee:	9006      	str	r0, [sp, #24]
 80086f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086f4:	4809      	ldr	r0, [pc, #36]	; (800871c <siprintf+0x38>)
 80086f6:	9107      	str	r1, [sp, #28]
 80086f8:	9104      	str	r1, [sp, #16]
 80086fa:	4909      	ldr	r1, [pc, #36]	; (8008720 <siprintf+0x3c>)
 80086fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008700:	9105      	str	r1, [sp, #20]
 8008702:	6800      	ldr	r0, [r0, #0]
 8008704:	9301      	str	r3, [sp, #4]
 8008706:	a902      	add	r1, sp, #8
 8008708:	f000 f8fe 	bl	8008908 <_svfiprintf_r>
 800870c:	9b02      	ldr	r3, [sp, #8]
 800870e:	2200      	movs	r2, #0
 8008710:	701a      	strb	r2, [r3, #0]
 8008712:	b01c      	add	sp, #112	; 0x70
 8008714:	f85d eb04 	ldr.w	lr, [sp], #4
 8008718:	b003      	add	sp, #12
 800871a:	4770      	bx	lr
 800871c:	24000018 	.word	0x24000018
 8008720:	ffff0208 	.word	0xffff0208

08008724 <__retarget_lock_acquire_recursive>:
 8008724:	4770      	bx	lr

08008726 <__retarget_lock_release_recursive>:
 8008726:	4770      	bx	lr

08008728 <sbrk_aligned>:
 8008728:	b570      	push	{r4, r5, r6, lr}
 800872a:	4e0e      	ldr	r6, [pc, #56]	; (8008764 <sbrk_aligned+0x3c>)
 800872c:	460c      	mov	r4, r1
 800872e:	6831      	ldr	r1, [r6, #0]
 8008730:	4605      	mov	r5, r0
 8008732:	b911      	cbnz	r1, 800873a <sbrk_aligned+0x12>
 8008734:	f000 fb7c 	bl	8008e30 <_sbrk_r>
 8008738:	6030      	str	r0, [r6, #0]
 800873a:	4621      	mov	r1, r4
 800873c:	4628      	mov	r0, r5
 800873e:	f000 fb77 	bl	8008e30 <_sbrk_r>
 8008742:	1c43      	adds	r3, r0, #1
 8008744:	d00a      	beq.n	800875c <sbrk_aligned+0x34>
 8008746:	1cc4      	adds	r4, r0, #3
 8008748:	f024 0403 	bic.w	r4, r4, #3
 800874c:	42a0      	cmp	r0, r4
 800874e:	d007      	beq.n	8008760 <sbrk_aligned+0x38>
 8008750:	1a21      	subs	r1, r4, r0
 8008752:	4628      	mov	r0, r5
 8008754:	f000 fb6c 	bl	8008e30 <_sbrk_r>
 8008758:	3001      	adds	r0, #1
 800875a:	d101      	bne.n	8008760 <sbrk_aligned+0x38>
 800875c:	f04f 34ff 	mov.w	r4, #4294967295
 8008760:	4620      	mov	r0, r4
 8008762:	bd70      	pop	{r4, r5, r6, pc}
 8008764:	240003c0 	.word	0x240003c0

08008768 <_malloc_r>:
 8008768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800876c:	1ccd      	adds	r5, r1, #3
 800876e:	f025 0503 	bic.w	r5, r5, #3
 8008772:	3508      	adds	r5, #8
 8008774:	2d0c      	cmp	r5, #12
 8008776:	bf38      	it	cc
 8008778:	250c      	movcc	r5, #12
 800877a:	2d00      	cmp	r5, #0
 800877c:	4607      	mov	r7, r0
 800877e:	db01      	blt.n	8008784 <_malloc_r+0x1c>
 8008780:	42a9      	cmp	r1, r5
 8008782:	d905      	bls.n	8008790 <_malloc_r+0x28>
 8008784:	230c      	movs	r3, #12
 8008786:	603b      	str	r3, [r7, #0]
 8008788:	2600      	movs	r6, #0
 800878a:	4630      	mov	r0, r6
 800878c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008790:	4e2e      	ldr	r6, [pc, #184]	; (800884c <_malloc_r+0xe4>)
 8008792:	f000 fb77 	bl	8008e84 <__malloc_lock>
 8008796:	6833      	ldr	r3, [r6, #0]
 8008798:	461c      	mov	r4, r3
 800879a:	bb34      	cbnz	r4, 80087ea <_malloc_r+0x82>
 800879c:	4629      	mov	r1, r5
 800879e:	4638      	mov	r0, r7
 80087a0:	f7ff ffc2 	bl	8008728 <sbrk_aligned>
 80087a4:	1c43      	adds	r3, r0, #1
 80087a6:	4604      	mov	r4, r0
 80087a8:	d14d      	bne.n	8008846 <_malloc_r+0xde>
 80087aa:	6834      	ldr	r4, [r6, #0]
 80087ac:	4626      	mov	r6, r4
 80087ae:	2e00      	cmp	r6, #0
 80087b0:	d140      	bne.n	8008834 <_malloc_r+0xcc>
 80087b2:	6823      	ldr	r3, [r4, #0]
 80087b4:	4631      	mov	r1, r6
 80087b6:	4638      	mov	r0, r7
 80087b8:	eb04 0803 	add.w	r8, r4, r3
 80087bc:	f000 fb38 	bl	8008e30 <_sbrk_r>
 80087c0:	4580      	cmp	r8, r0
 80087c2:	d13a      	bne.n	800883a <_malloc_r+0xd2>
 80087c4:	6821      	ldr	r1, [r4, #0]
 80087c6:	3503      	adds	r5, #3
 80087c8:	1a6d      	subs	r5, r5, r1
 80087ca:	f025 0503 	bic.w	r5, r5, #3
 80087ce:	3508      	adds	r5, #8
 80087d0:	2d0c      	cmp	r5, #12
 80087d2:	bf38      	it	cc
 80087d4:	250c      	movcc	r5, #12
 80087d6:	4629      	mov	r1, r5
 80087d8:	4638      	mov	r0, r7
 80087da:	f7ff ffa5 	bl	8008728 <sbrk_aligned>
 80087de:	3001      	adds	r0, #1
 80087e0:	d02b      	beq.n	800883a <_malloc_r+0xd2>
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	442b      	add	r3, r5
 80087e6:	6023      	str	r3, [r4, #0]
 80087e8:	e00e      	b.n	8008808 <_malloc_r+0xa0>
 80087ea:	6822      	ldr	r2, [r4, #0]
 80087ec:	1b52      	subs	r2, r2, r5
 80087ee:	d41e      	bmi.n	800882e <_malloc_r+0xc6>
 80087f0:	2a0b      	cmp	r2, #11
 80087f2:	d916      	bls.n	8008822 <_malloc_r+0xba>
 80087f4:	1961      	adds	r1, r4, r5
 80087f6:	42a3      	cmp	r3, r4
 80087f8:	6025      	str	r5, [r4, #0]
 80087fa:	bf18      	it	ne
 80087fc:	6059      	strne	r1, [r3, #4]
 80087fe:	6863      	ldr	r3, [r4, #4]
 8008800:	bf08      	it	eq
 8008802:	6031      	streq	r1, [r6, #0]
 8008804:	5162      	str	r2, [r4, r5]
 8008806:	604b      	str	r3, [r1, #4]
 8008808:	4638      	mov	r0, r7
 800880a:	f104 060b 	add.w	r6, r4, #11
 800880e:	f000 fb3f 	bl	8008e90 <__malloc_unlock>
 8008812:	f026 0607 	bic.w	r6, r6, #7
 8008816:	1d23      	adds	r3, r4, #4
 8008818:	1af2      	subs	r2, r6, r3
 800881a:	d0b6      	beq.n	800878a <_malloc_r+0x22>
 800881c:	1b9b      	subs	r3, r3, r6
 800881e:	50a3      	str	r3, [r4, r2]
 8008820:	e7b3      	b.n	800878a <_malloc_r+0x22>
 8008822:	6862      	ldr	r2, [r4, #4]
 8008824:	42a3      	cmp	r3, r4
 8008826:	bf0c      	ite	eq
 8008828:	6032      	streq	r2, [r6, #0]
 800882a:	605a      	strne	r2, [r3, #4]
 800882c:	e7ec      	b.n	8008808 <_malloc_r+0xa0>
 800882e:	4623      	mov	r3, r4
 8008830:	6864      	ldr	r4, [r4, #4]
 8008832:	e7b2      	b.n	800879a <_malloc_r+0x32>
 8008834:	4634      	mov	r4, r6
 8008836:	6876      	ldr	r6, [r6, #4]
 8008838:	e7b9      	b.n	80087ae <_malloc_r+0x46>
 800883a:	230c      	movs	r3, #12
 800883c:	603b      	str	r3, [r7, #0]
 800883e:	4638      	mov	r0, r7
 8008840:	f000 fb26 	bl	8008e90 <__malloc_unlock>
 8008844:	e7a1      	b.n	800878a <_malloc_r+0x22>
 8008846:	6025      	str	r5, [r4, #0]
 8008848:	e7de      	b.n	8008808 <_malloc_r+0xa0>
 800884a:	bf00      	nop
 800884c:	240003bc 	.word	0x240003bc

08008850 <__ssputs_r>:
 8008850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008854:	688e      	ldr	r6, [r1, #8]
 8008856:	429e      	cmp	r6, r3
 8008858:	4682      	mov	sl, r0
 800885a:	460c      	mov	r4, r1
 800885c:	4690      	mov	r8, r2
 800885e:	461f      	mov	r7, r3
 8008860:	d838      	bhi.n	80088d4 <__ssputs_r+0x84>
 8008862:	898a      	ldrh	r2, [r1, #12]
 8008864:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008868:	d032      	beq.n	80088d0 <__ssputs_r+0x80>
 800886a:	6825      	ldr	r5, [r4, #0]
 800886c:	6909      	ldr	r1, [r1, #16]
 800886e:	eba5 0901 	sub.w	r9, r5, r1
 8008872:	6965      	ldr	r5, [r4, #20]
 8008874:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008878:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800887c:	3301      	adds	r3, #1
 800887e:	444b      	add	r3, r9
 8008880:	106d      	asrs	r5, r5, #1
 8008882:	429d      	cmp	r5, r3
 8008884:	bf38      	it	cc
 8008886:	461d      	movcc	r5, r3
 8008888:	0553      	lsls	r3, r2, #21
 800888a:	d531      	bpl.n	80088f0 <__ssputs_r+0xa0>
 800888c:	4629      	mov	r1, r5
 800888e:	f7ff ff6b 	bl	8008768 <_malloc_r>
 8008892:	4606      	mov	r6, r0
 8008894:	b950      	cbnz	r0, 80088ac <__ssputs_r+0x5c>
 8008896:	230c      	movs	r3, #12
 8008898:	f8ca 3000 	str.w	r3, [sl]
 800889c:	89a3      	ldrh	r3, [r4, #12]
 800889e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a2:	81a3      	strh	r3, [r4, #12]
 80088a4:	f04f 30ff 	mov.w	r0, #4294967295
 80088a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ac:	6921      	ldr	r1, [r4, #16]
 80088ae:	464a      	mov	r2, r9
 80088b0:	f7ff ff02 	bl	80086b8 <memcpy>
 80088b4:	89a3      	ldrh	r3, [r4, #12]
 80088b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088be:	81a3      	strh	r3, [r4, #12]
 80088c0:	6126      	str	r6, [r4, #16]
 80088c2:	6165      	str	r5, [r4, #20]
 80088c4:	444e      	add	r6, r9
 80088c6:	eba5 0509 	sub.w	r5, r5, r9
 80088ca:	6026      	str	r6, [r4, #0]
 80088cc:	60a5      	str	r5, [r4, #8]
 80088ce:	463e      	mov	r6, r7
 80088d0:	42be      	cmp	r6, r7
 80088d2:	d900      	bls.n	80088d6 <__ssputs_r+0x86>
 80088d4:	463e      	mov	r6, r7
 80088d6:	6820      	ldr	r0, [r4, #0]
 80088d8:	4632      	mov	r2, r6
 80088da:	4641      	mov	r1, r8
 80088dc:	f000 fab8 	bl	8008e50 <memmove>
 80088e0:	68a3      	ldr	r3, [r4, #8]
 80088e2:	1b9b      	subs	r3, r3, r6
 80088e4:	60a3      	str	r3, [r4, #8]
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	4433      	add	r3, r6
 80088ea:	6023      	str	r3, [r4, #0]
 80088ec:	2000      	movs	r0, #0
 80088ee:	e7db      	b.n	80088a8 <__ssputs_r+0x58>
 80088f0:	462a      	mov	r2, r5
 80088f2:	f000 fb1f 	bl	8008f34 <_realloc_r>
 80088f6:	4606      	mov	r6, r0
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d1e1      	bne.n	80088c0 <__ssputs_r+0x70>
 80088fc:	6921      	ldr	r1, [r4, #16]
 80088fe:	4650      	mov	r0, sl
 8008900:	f000 facc 	bl	8008e9c <_free_r>
 8008904:	e7c7      	b.n	8008896 <__ssputs_r+0x46>
	...

08008908 <_svfiprintf_r>:
 8008908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890c:	4698      	mov	r8, r3
 800890e:	898b      	ldrh	r3, [r1, #12]
 8008910:	061b      	lsls	r3, r3, #24
 8008912:	b09d      	sub	sp, #116	; 0x74
 8008914:	4607      	mov	r7, r0
 8008916:	460d      	mov	r5, r1
 8008918:	4614      	mov	r4, r2
 800891a:	d50e      	bpl.n	800893a <_svfiprintf_r+0x32>
 800891c:	690b      	ldr	r3, [r1, #16]
 800891e:	b963      	cbnz	r3, 800893a <_svfiprintf_r+0x32>
 8008920:	2140      	movs	r1, #64	; 0x40
 8008922:	f7ff ff21 	bl	8008768 <_malloc_r>
 8008926:	6028      	str	r0, [r5, #0]
 8008928:	6128      	str	r0, [r5, #16]
 800892a:	b920      	cbnz	r0, 8008936 <_svfiprintf_r+0x2e>
 800892c:	230c      	movs	r3, #12
 800892e:	603b      	str	r3, [r7, #0]
 8008930:	f04f 30ff 	mov.w	r0, #4294967295
 8008934:	e0d1      	b.n	8008ada <_svfiprintf_r+0x1d2>
 8008936:	2340      	movs	r3, #64	; 0x40
 8008938:	616b      	str	r3, [r5, #20]
 800893a:	2300      	movs	r3, #0
 800893c:	9309      	str	r3, [sp, #36]	; 0x24
 800893e:	2320      	movs	r3, #32
 8008940:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008944:	f8cd 800c 	str.w	r8, [sp, #12]
 8008948:	2330      	movs	r3, #48	; 0x30
 800894a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008af4 <_svfiprintf_r+0x1ec>
 800894e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008952:	f04f 0901 	mov.w	r9, #1
 8008956:	4623      	mov	r3, r4
 8008958:	469a      	mov	sl, r3
 800895a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800895e:	b10a      	cbz	r2, 8008964 <_svfiprintf_r+0x5c>
 8008960:	2a25      	cmp	r2, #37	; 0x25
 8008962:	d1f9      	bne.n	8008958 <_svfiprintf_r+0x50>
 8008964:	ebba 0b04 	subs.w	fp, sl, r4
 8008968:	d00b      	beq.n	8008982 <_svfiprintf_r+0x7a>
 800896a:	465b      	mov	r3, fp
 800896c:	4622      	mov	r2, r4
 800896e:	4629      	mov	r1, r5
 8008970:	4638      	mov	r0, r7
 8008972:	f7ff ff6d 	bl	8008850 <__ssputs_r>
 8008976:	3001      	adds	r0, #1
 8008978:	f000 80aa 	beq.w	8008ad0 <_svfiprintf_r+0x1c8>
 800897c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800897e:	445a      	add	r2, fp
 8008980:	9209      	str	r2, [sp, #36]	; 0x24
 8008982:	f89a 3000 	ldrb.w	r3, [sl]
 8008986:	2b00      	cmp	r3, #0
 8008988:	f000 80a2 	beq.w	8008ad0 <_svfiprintf_r+0x1c8>
 800898c:	2300      	movs	r3, #0
 800898e:	f04f 32ff 	mov.w	r2, #4294967295
 8008992:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008996:	f10a 0a01 	add.w	sl, sl, #1
 800899a:	9304      	str	r3, [sp, #16]
 800899c:	9307      	str	r3, [sp, #28]
 800899e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089a2:	931a      	str	r3, [sp, #104]	; 0x68
 80089a4:	4654      	mov	r4, sl
 80089a6:	2205      	movs	r2, #5
 80089a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ac:	4851      	ldr	r0, [pc, #324]	; (8008af4 <_svfiprintf_r+0x1ec>)
 80089ae:	f7f7 fc9f 	bl	80002f0 <memchr>
 80089b2:	9a04      	ldr	r2, [sp, #16]
 80089b4:	b9d8      	cbnz	r0, 80089ee <_svfiprintf_r+0xe6>
 80089b6:	06d0      	lsls	r0, r2, #27
 80089b8:	bf44      	itt	mi
 80089ba:	2320      	movmi	r3, #32
 80089bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089c0:	0711      	lsls	r1, r2, #28
 80089c2:	bf44      	itt	mi
 80089c4:	232b      	movmi	r3, #43	; 0x2b
 80089c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089ca:	f89a 3000 	ldrb.w	r3, [sl]
 80089ce:	2b2a      	cmp	r3, #42	; 0x2a
 80089d0:	d015      	beq.n	80089fe <_svfiprintf_r+0xf6>
 80089d2:	9a07      	ldr	r2, [sp, #28]
 80089d4:	4654      	mov	r4, sl
 80089d6:	2000      	movs	r0, #0
 80089d8:	f04f 0c0a 	mov.w	ip, #10
 80089dc:	4621      	mov	r1, r4
 80089de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089e2:	3b30      	subs	r3, #48	; 0x30
 80089e4:	2b09      	cmp	r3, #9
 80089e6:	d94e      	bls.n	8008a86 <_svfiprintf_r+0x17e>
 80089e8:	b1b0      	cbz	r0, 8008a18 <_svfiprintf_r+0x110>
 80089ea:	9207      	str	r2, [sp, #28]
 80089ec:	e014      	b.n	8008a18 <_svfiprintf_r+0x110>
 80089ee:	eba0 0308 	sub.w	r3, r0, r8
 80089f2:	fa09 f303 	lsl.w	r3, r9, r3
 80089f6:	4313      	orrs	r3, r2
 80089f8:	9304      	str	r3, [sp, #16]
 80089fa:	46a2      	mov	sl, r4
 80089fc:	e7d2      	b.n	80089a4 <_svfiprintf_r+0x9c>
 80089fe:	9b03      	ldr	r3, [sp, #12]
 8008a00:	1d19      	adds	r1, r3, #4
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	9103      	str	r1, [sp, #12]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	bfbb      	ittet	lt
 8008a0a:	425b      	neglt	r3, r3
 8008a0c:	f042 0202 	orrlt.w	r2, r2, #2
 8008a10:	9307      	strge	r3, [sp, #28]
 8008a12:	9307      	strlt	r3, [sp, #28]
 8008a14:	bfb8      	it	lt
 8008a16:	9204      	strlt	r2, [sp, #16]
 8008a18:	7823      	ldrb	r3, [r4, #0]
 8008a1a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a1c:	d10c      	bne.n	8008a38 <_svfiprintf_r+0x130>
 8008a1e:	7863      	ldrb	r3, [r4, #1]
 8008a20:	2b2a      	cmp	r3, #42	; 0x2a
 8008a22:	d135      	bne.n	8008a90 <_svfiprintf_r+0x188>
 8008a24:	9b03      	ldr	r3, [sp, #12]
 8008a26:	1d1a      	adds	r2, r3, #4
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	9203      	str	r2, [sp, #12]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	bfb8      	it	lt
 8008a30:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a34:	3402      	adds	r4, #2
 8008a36:	9305      	str	r3, [sp, #20]
 8008a38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b04 <_svfiprintf_r+0x1fc>
 8008a3c:	7821      	ldrb	r1, [r4, #0]
 8008a3e:	2203      	movs	r2, #3
 8008a40:	4650      	mov	r0, sl
 8008a42:	f7f7 fc55 	bl	80002f0 <memchr>
 8008a46:	b140      	cbz	r0, 8008a5a <_svfiprintf_r+0x152>
 8008a48:	2340      	movs	r3, #64	; 0x40
 8008a4a:	eba0 000a 	sub.w	r0, r0, sl
 8008a4e:	fa03 f000 	lsl.w	r0, r3, r0
 8008a52:	9b04      	ldr	r3, [sp, #16]
 8008a54:	4303      	orrs	r3, r0
 8008a56:	3401      	adds	r4, #1
 8008a58:	9304      	str	r3, [sp, #16]
 8008a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a5e:	4826      	ldr	r0, [pc, #152]	; (8008af8 <_svfiprintf_r+0x1f0>)
 8008a60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a64:	2206      	movs	r2, #6
 8008a66:	f7f7 fc43 	bl	80002f0 <memchr>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	d038      	beq.n	8008ae0 <_svfiprintf_r+0x1d8>
 8008a6e:	4b23      	ldr	r3, [pc, #140]	; (8008afc <_svfiprintf_r+0x1f4>)
 8008a70:	bb1b      	cbnz	r3, 8008aba <_svfiprintf_r+0x1b2>
 8008a72:	9b03      	ldr	r3, [sp, #12]
 8008a74:	3307      	adds	r3, #7
 8008a76:	f023 0307 	bic.w	r3, r3, #7
 8008a7a:	3308      	adds	r3, #8
 8008a7c:	9303      	str	r3, [sp, #12]
 8008a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a80:	4433      	add	r3, r6
 8008a82:	9309      	str	r3, [sp, #36]	; 0x24
 8008a84:	e767      	b.n	8008956 <_svfiprintf_r+0x4e>
 8008a86:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	2001      	movs	r0, #1
 8008a8e:	e7a5      	b.n	80089dc <_svfiprintf_r+0xd4>
 8008a90:	2300      	movs	r3, #0
 8008a92:	3401      	adds	r4, #1
 8008a94:	9305      	str	r3, [sp, #20]
 8008a96:	4619      	mov	r1, r3
 8008a98:	f04f 0c0a 	mov.w	ip, #10
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aa2:	3a30      	subs	r2, #48	; 0x30
 8008aa4:	2a09      	cmp	r2, #9
 8008aa6:	d903      	bls.n	8008ab0 <_svfiprintf_r+0x1a8>
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d0c5      	beq.n	8008a38 <_svfiprintf_r+0x130>
 8008aac:	9105      	str	r1, [sp, #20]
 8008aae:	e7c3      	b.n	8008a38 <_svfiprintf_r+0x130>
 8008ab0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e7f0      	b.n	8008a9c <_svfiprintf_r+0x194>
 8008aba:	ab03      	add	r3, sp, #12
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	462a      	mov	r2, r5
 8008ac0:	4b0f      	ldr	r3, [pc, #60]	; (8008b00 <_svfiprintf_r+0x1f8>)
 8008ac2:	a904      	add	r1, sp, #16
 8008ac4:	4638      	mov	r0, r7
 8008ac6:	f3af 8000 	nop.w
 8008aca:	1c42      	adds	r2, r0, #1
 8008acc:	4606      	mov	r6, r0
 8008ace:	d1d6      	bne.n	8008a7e <_svfiprintf_r+0x176>
 8008ad0:	89ab      	ldrh	r3, [r5, #12]
 8008ad2:	065b      	lsls	r3, r3, #25
 8008ad4:	f53f af2c 	bmi.w	8008930 <_svfiprintf_r+0x28>
 8008ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ada:	b01d      	add	sp, #116	; 0x74
 8008adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae0:	ab03      	add	r3, sp, #12
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	462a      	mov	r2, r5
 8008ae6:	4b06      	ldr	r3, [pc, #24]	; (8008b00 <_svfiprintf_r+0x1f8>)
 8008ae8:	a904      	add	r1, sp, #16
 8008aea:	4638      	mov	r0, r7
 8008aec:	f000 f87a 	bl	8008be4 <_printf_i>
 8008af0:	e7eb      	b.n	8008aca <_svfiprintf_r+0x1c2>
 8008af2:	bf00      	nop
 8008af4:	080095a8 	.word	0x080095a8
 8008af8:	080095b2 	.word	0x080095b2
 8008afc:	00000000 	.word	0x00000000
 8008b00:	08008851 	.word	0x08008851
 8008b04:	080095ae 	.word	0x080095ae

08008b08 <_printf_common>:
 8008b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b0c:	4616      	mov	r6, r2
 8008b0e:	4699      	mov	r9, r3
 8008b10:	688a      	ldr	r2, [r1, #8]
 8008b12:	690b      	ldr	r3, [r1, #16]
 8008b14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	bfb8      	it	lt
 8008b1c:	4613      	movlt	r3, r2
 8008b1e:	6033      	str	r3, [r6, #0]
 8008b20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b24:	4607      	mov	r7, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	b10a      	cbz	r2, 8008b2e <_printf_common+0x26>
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	6033      	str	r3, [r6, #0]
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	0699      	lsls	r1, r3, #26
 8008b32:	bf42      	ittt	mi
 8008b34:	6833      	ldrmi	r3, [r6, #0]
 8008b36:	3302      	addmi	r3, #2
 8008b38:	6033      	strmi	r3, [r6, #0]
 8008b3a:	6825      	ldr	r5, [r4, #0]
 8008b3c:	f015 0506 	ands.w	r5, r5, #6
 8008b40:	d106      	bne.n	8008b50 <_printf_common+0x48>
 8008b42:	f104 0a19 	add.w	sl, r4, #25
 8008b46:	68e3      	ldr	r3, [r4, #12]
 8008b48:	6832      	ldr	r2, [r6, #0]
 8008b4a:	1a9b      	subs	r3, r3, r2
 8008b4c:	42ab      	cmp	r3, r5
 8008b4e:	dc26      	bgt.n	8008b9e <_printf_common+0x96>
 8008b50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b54:	1e13      	subs	r3, r2, #0
 8008b56:	6822      	ldr	r2, [r4, #0]
 8008b58:	bf18      	it	ne
 8008b5a:	2301      	movne	r3, #1
 8008b5c:	0692      	lsls	r2, r2, #26
 8008b5e:	d42b      	bmi.n	8008bb8 <_printf_common+0xb0>
 8008b60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b64:	4649      	mov	r1, r9
 8008b66:	4638      	mov	r0, r7
 8008b68:	47c0      	blx	r8
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	d01e      	beq.n	8008bac <_printf_common+0xa4>
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	68e5      	ldr	r5, [r4, #12]
 8008b72:	6832      	ldr	r2, [r6, #0]
 8008b74:	f003 0306 	and.w	r3, r3, #6
 8008b78:	2b04      	cmp	r3, #4
 8008b7a:	bf08      	it	eq
 8008b7c:	1aad      	subeq	r5, r5, r2
 8008b7e:	68a3      	ldr	r3, [r4, #8]
 8008b80:	6922      	ldr	r2, [r4, #16]
 8008b82:	bf0c      	ite	eq
 8008b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b88:	2500      	movne	r5, #0
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	bfc4      	itt	gt
 8008b8e:	1a9b      	subgt	r3, r3, r2
 8008b90:	18ed      	addgt	r5, r5, r3
 8008b92:	2600      	movs	r6, #0
 8008b94:	341a      	adds	r4, #26
 8008b96:	42b5      	cmp	r5, r6
 8008b98:	d11a      	bne.n	8008bd0 <_printf_common+0xc8>
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	e008      	b.n	8008bb0 <_printf_common+0xa8>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	4652      	mov	r2, sl
 8008ba2:	4649      	mov	r1, r9
 8008ba4:	4638      	mov	r0, r7
 8008ba6:	47c0      	blx	r8
 8008ba8:	3001      	adds	r0, #1
 8008baa:	d103      	bne.n	8008bb4 <_printf_common+0xac>
 8008bac:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb4:	3501      	adds	r5, #1
 8008bb6:	e7c6      	b.n	8008b46 <_printf_common+0x3e>
 8008bb8:	18e1      	adds	r1, r4, r3
 8008bba:	1c5a      	adds	r2, r3, #1
 8008bbc:	2030      	movs	r0, #48	; 0x30
 8008bbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bc2:	4422      	add	r2, r4
 8008bc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bcc:	3302      	adds	r3, #2
 8008bce:	e7c7      	b.n	8008b60 <_printf_common+0x58>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	4622      	mov	r2, r4
 8008bd4:	4649      	mov	r1, r9
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	47c0      	blx	r8
 8008bda:	3001      	adds	r0, #1
 8008bdc:	d0e6      	beq.n	8008bac <_printf_common+0xa4>
 8008bde:	3601      	adds	r6, #1
 8008be0:	e7d9      	b.n	8008b96 <_printf_common+0x8e>
	...

08008be4 <_printf_i>:
 8008be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008be8:	7e0f      	ldrb	r7, [r1, #24]
 8008bea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bec:	2f78      	cmp	r7, #120	; 0x78
 8008bee:	4691      	mov	r9, r2
 8008bf0:	4680      	mov	r8, r0
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	469a      	mov	sl, r3
 8008bf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bfa:	d807      	bhi.n	8008c0c <_printf_i+0x28>
 8008bfc:	2f62      	cmp	r7, #98	; 0x62
 8008bfe:	d80a      	bhi.n	8008c16 <_printf_i+0x32>
 8008c00:	2f00      	cmp	r7, #0
 8008c02:	f000 80d8 	beq.w	8008db6 <_printf_i+0x1d2>
 8008c06:	2f58      	cmp	r7, #88	; 0x58
 8008c08:	f000 80a3 	beq.w	8008d52 <_printf_i+0x16e>
 8008c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c14:	e03a      	b.n	8008c8c <_printf_i+0xa8>
 8008c16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c1a:	2b15      	cmp	r3, #21
 8008c1c:	d8f6      	bhi.n	8008c0c <_printf_i+0x28>
 8008c1e:	a101      	add	r1, pc, #4	; (adr r1, 8008c24 <_printf_i+0x40>)
 8008c20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c24:	08008c7d 	.word	0x08008c7d
 8008c28:	08008c91 	.word	0x08008c91
 8008c2c:	08008c0d 	.word	0x08008c0d
 8008c30:	08008c0d 	.word	0x08008c0d
 8008c34:	08008c0d 	.word	0x08008c0d
 8008c38:	08008c0d 	.word	0x08008c0d
 8008c3c:	08008c91 	.word	0x08008c91
 8008c40:	08008c0d 	.word	0x08008c0d
 8008c44:	08008c0d 	.word	0x08008c0d
 8008c48:	08008c0d 	.word	0x08008c0d
 8008c4c:	08008c0d 	.word	0x08008c0d
 8008c50:	08008d9d 	.word	0x08008d9d
 8008c54:	08008cc1 	.word	0x08008cc1
 8008c58:	08008d7f 	.word	0x08008d7f
 8008c5c:	08008c0d 	.word	0x08008c0d
 8008c60:	08008c0d 	.word	0x08008c0d
 8008c64:	08008dbf 	.word	0x08008dbf
 8008c68:	08008c0d 	.word	0x08008c0d
 8008c6c:	08008cc1 	.word	0x08008cc1
 8008c70:	08008c0d 	.word	0x08008c0d
 8008c74:	08008c0d 	.word	0x08008c0d
 8008c78:	08008d87 	.word	0x08008d87
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	1d1a      	adds	r2, r3, #4
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	602a      	str	r2, [r5, #0]
 8008c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e0a3      	b.n	8008dd8 <_printf_i+0x1f4>
 8008c90:	6820      	ldr	r0, [r4, #0]
 8008c92:	6829      	ldr	r1, [r5, #0]
 8008c94:	0606      	lsls	r6, r0, #24
 8008c96:	f101 0304 	add.w	r3, r1, #4
 8008c9a:	d50a      	bpl.n	8008cb2 <_printf_i+0xce>
 8008c9c:	680e      	ldr	r6, [r1, #0]
 8008c9e:	602b      	str	r3, [r5, #0]
 8008ca0:	2e00      	cmp	r6, #0
 8008ca2:	da03      	bge.n	8008cac <_printf_i+0xc8>
 8008ca4:	232d      	movs	r3, #45	; 0x2d
 8008ca6:	4276      	negs	r6, r6
 8008ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cac:	485e      	ldr	r0, [pc, #376]	; (8008e28 <_printf_i+0x244>)
 8008cae:	230a      	movs	r3, #10
 8008cb0:	e019      	b.n	8008ce6 <_printf_i+0x102>
 8008cb2:	680e      	ldr	r6, [r1, #0]
 8008cb4:	602b      	str	r3, [r5, #0]
 8008cb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cba:	bf18      	it	ne
 8008cbc:	b236      	sxthne	r6, r6
 8008cbe:	e7ef      	b.n	8008ca0 <_printf_i+0xbc>
 8008cc0:	682b      	ldr	r3, [r5, #0]
 8008cc2:	6820      	ldr	r0, [r4, #0]
 8008cc4:	1d19      	adds	r1, r3, #4
 8008cc6:	6029      	str	r1, [r5, #0]
 8008cc8:	0601      	lsls	r1, r0, #24
 8008cca:	d501      	bpl.n	8008cd0 <_printf_i+0xec>
 8008ccc:	681e      	ldr	r6, [r3, #0]
 8008cce:	e002      	b.n	8008cd6 <_printf_i+0xf2>
 8008cd0:	0646      	lsls	r6, r0, #25
 8008cd2:	d5fb      	bpl.n	8008ccc <_printf_i+0xe8>
 8008cd4:	881e      	ldrh	r6, [r3, #0]
 8008cd6:	4854      	ldr	r0, [pc, #336]	; (8008e28 <_printf_i+0x244>)
 8008cd8:	2f6f      	cmp	r7, #111	; 0x6f
 8008cda:	bf0c      	ite	eq
 8008cdc:	2308      	moveq	r3, #8
 8008cde:	230a      	movne	r3, #10
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ce6:	6865      	ldr	r5, [r4, #4]
 8008ce8:	60a5      	str	r5, [r4, #8]
 8008cea:	2d00      	cmp	r5, #0
 8008cec:	bfa2      	ittt	ge
 8008cee:	6821      	ldrge	r1, [r4, #0]
 8008cf0:	f021 0104 	bicge.w	r1, r1, #4
 8008cf4:	6021      	strge	r1, [r4, #0]
 8008cf6:	b90e      	cbnz	r6, 8008cfc <_printf_i+0x118>
 8008cf8:	2d00      	cmp	r5, #0
 8008cfa:	d04d      	beq.n	8008d98 <_printf_i+0x1b4>
 8008cfc:	4615      	mov	r5, r2
 8008cfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d02:	fb03 6711 	mls	r7, r3, r1, r6
 8008d06:	5dc7      	ldrb	r7, [r0, r7]
 8008d08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d0c:	4637      	mov	r7, r6
 8008d0e:	42bb      	cmp	r3, r7
 8008d10:	460e      	mov	r6, r1
 8008d12:	d9f4      	bls.n	8008cfe <_printf_i+0x11a>
 8008d14:	2b08      	cmp	r3, #8
 8008d16:	d10b      	bne.n	8008d30 <_printf_i+0x14c>
 8008d18:	6823      	ldr	r3, [r4, #0]
 8008d1a:	07de      	lsls	r6, r3, #31
 8008d1c:	d508      	bpl.n	8008d30 <_printf_i+0x14c>
 8008d1e:	6923      	ldr	r3, [r4, #16]
 8008d20:	6861      	ldr	r1, [r4, #4]
 8008d22:	4299      	cmp	r1, r3
 8008d24:	bfde      	ittt	le
 8008d26:	2330      	movle	r3, #48	; 0x30
 8008d28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d30:	1b52      	subs	r2, r2, r5
 8008d32:	6122      	str	r2, [r4, #16]
 8008d34:	f8cd a000 	str.w	sl, [sp]
 8008d38:	464b      	mov	r3, r9
 8008d3a:	aa03      	add	r2, sp, #12
 8008d3c:	4621      	mov	r1, r4
 8008d3e:	4640      	mov	r0, r8
 8008d40:	f7ff fee2 	bl	8008b08 <_printf_common>
 8008d44:	3001      	adds	r0, #1
 8008d46:	d14c      	bne.n	8008de2 <_printf_i+0x1fe>
 8008d48:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4c:	b004      	add	sp, #16
 8008d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d52:	4835      	ldr	r0, [pc, #212]	; (8008e28 <_printf_i+0x244>)
 8008d54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d58:	6829      	ldr	r1, [r5, #0]
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d60:	6029      	str	r1, [r5, #0]
 8008d62:	061d      	lsls	r5, r3, #24
 8008d64:	d514      	bpl.n	8008d90 <_printf_i+0x1ac>
 8008d66:	07df      	lsls	r7, r3, #31
 8008d68:	bf44      	itt	mi
 8008d6a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d6e:	6023      	strmi	r3, [r4, #0]
 8008d70:	b91e      	cbnz	r6, 8008d7a <_printf_i+0x196>
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	f023 0320 	bic.w	r3, r3, #32
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	2310      	movs	r3, #16
 8008d7c:	e7b0      	b.n	8008ce0 <_printf_i+0xfc>
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	f043 0320 	orr.w	r3, r3, #32
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	2378      	movs	r3, #120	; 0x78
 8008d88:	4828      	ldr	r0, [pc, #160]	; (8008e2c <_printf_i+0x248>)
 8008d8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d8e:	e7e3      	b.n	8008d58 <_printf_i+0x174>
 8008d90:	0659      	lsls	r1, r3, #25
 8008d92:	bf48      	it	mi
 8008d94:	b2b6      	uxthmi	r6, r6
 8008d96:	e7e6      	b.n	8008d66 <_printf_i+0x182>
 8008d98:	4615      	mov	r5, r2
 8008d9a:	e7bb      	b.n	8008d14 <_printf_i+0x130>
 8008d9c:	682b      	ldr	r3, [r5, #0]
 8008d9e:	6826      	ldr	r6, [r4, #0]
 8008da0:	6961      	ldr	r1, [r4, #20]
 8008da2:	1d18      	adds	r0, r3, #4
 8008da4:	6028      	str	r0, [r5, #0]
 8008da6:	0635      	lsls	r5, r6, #24
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	d501      	bpl.n	8008db0 <_printf_i+0x1cc>
 8008dac:	6019      	str	r1, [r3, #0]
 8008dae:	e002      	b.n	8008db6 <_printf_i+0x1d2>
 8008db0:	0670      	lsls	r0, r6, #25
 8008db2:	d5fb      	bpl.n	8008dac <_printf_i+0x1c8>
 8008db4:	8019      	strh	r1, [r3, #0]
 8008db6:	2300      	movs	r3, #0
 8008db8:	6123      	str	r3, [r4, #16]
 8008dba:	4615      	mov	r5, r2
 8008dbc:	e7ba      	b.n	8008d34 <_printf_i+0x150>
 8008dbe:	682b      	ldr	r3, [r5, #0]
 8008dc0:	1d1a      	adds	r2, r3, #4
 8008dc2:	602a      	str	r2, [r5, #0]
 8008dc4:	681d      	ldr	r5, [r3, #0]
 8008dc6:	6862      	ldr	r2, [r4, #4]
 8008dc8:	2100      	movs	r1, #0
 8008dca:	4628      	mov	r0, r5
 8008dcc:	f7f7 fa90 	bl	80002f0 <memchr>
 8008dd0:	b108      	cbz	r0, 8008dd6 <_printf_i+0x1f2>
 8008dd2:	1b40      	subs	r0, r0, r5
 8008dd4:	6060      	str	r0, [r4, #4]
 8008dd6:	6863      	ldr	r3, [r4, #4]
 8008dd8:	6123      	str	r3, [r4, #16]
 8008dda:	2300      	movs	r3, #0
 8008ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008de0:	e7a8      	b.n	8008d34 <_printf_i+0x150>
 8008de2:	6923      	ldr	r3, [r4, #16]
 8008de4:	462a      	mov	r2, r5
 8008de6:	4649      	mov	r1, r9
 8008de8:	4640      	mov	r0, r8
 8008dea:	47d0      	blx	sl
 8008dec:	3001      	adds	r0, #1
 8008dee:	d0ab      	beq.n	8008d48 <_printf_i+0x164>
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	079b      	lsls	r3, r3, #30
 8008df4:	d413      	bmi.n	8008e1e <_printf_i+0x23a>
 8008df6:	68e0      	ldr	r0, [r4, #12]
 8008df8:	9b03      	ldr	r3, [sp, #12]
 8008dfa:	4298      	cmp	r0, r3
 8008dfc:	bfb8      	it	lt
 8008dfe:	4618      	movlt	r0, r3
 8008e00:	e7a4      	b.n	8008d4c <_printf_i+0x168>
 8008e02:	2301      	movs	r3, #1
 8008e04:	4632      	mov	r2, r6
 8008e06:	4649      	mov	r1, r9
 8008e08:	4640      	mov	r0, r8
 8008e0a:	47d0      	blx	sl
 8008e0c:	3001      	adds	r0, #1
 8008e0e:	d09b      	beq.n	8008d48 <_printf_i+0x164>
 8008e10:	3501      	adds	r5, #1
 8008e12:	68e3      	ldr	r3, [r4, #12]
 8008e14:	9903      	ldr	r1, [sp, #12]
 8008e16:	1a5b      	subs	r3, r3, r1
 8008e18:	42ab      	cmp	r3, r5
 8008e1a:	dcf2      	bgt.n	8008e02 <_printf_i+0x21e>
 8008e1c:	e7eb      	b.n	8008df6 <_printf_i+0x212>
 8008e1e:	2500      	movs	r5, #0
 8008e20:	f104 0619 	add.w	r6, r4, #25
 8008e24:	e7f5      	b.n	8008e12 <_printf_i+0x22e>
 8008e26:	bf00      	nop
 8008e28:	080095b9 	.word	0x080095b9
 8008e2c:	080095ca 	.word	0x080095ca

08008e30 <_sbrk_r>:
 8008e30:	b538      	push	{r3, r4, r5, lr}
 8008e32:	4d06      	ldr	r5, [pc, #24]	; (8008e4c <_sbrk_r+0x1c>)
 8008e34:	2300      	movs	r3, #0
 8008e36:	4604      	mov	r4, r0
 8008e38:	4608      	mov	r0, r1
 8008e3a:	602b      	str	r3, [r5, #0]
 8008e3c:	f7f9 fb62 	bl	8002504 <_sbrk>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d102      	bne.n	8008e4a <_sbrk_r+0x1a>
 8008e44:	682b      	ldr	r3, [r5, #0]
 8008e46:	b103      	cbz	r3, 8008e4a <_sbrk_r+0x1a>
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	240003c4 	.word	0x240003c4

08008e50 <memmove>:
 8008e50:	4288      	cmp	r0, r1
 8008e52:	b510      	push	{r4, lr}
 8008e54:	eb01 0402 	add.w	r4, r1, r2
 8008e58:	d902      	bls.n	8008e60 <memmove+0x10>
 8008e5a:	4284      	cmp	r4, r0
 8008e5c:	4623      	mov	r3, r4
 8008e5e:	d807      	bhi.n	8008e70 <memmove+0x20>
 8008e60:	1e43      	subs	r3, r0, #1
 8008e62:	42a1      	cmp	r1, r4
 8008e64:	d008      	beq.n	8008e78 <memmove+0x28>
 8008e66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e6e:	e7f8      	b.n	8008e62 <memmove+0x12>
 8008e70:	4402      	add	r2, r0
 8008e72:	4601      	mov	r1, r0
 8008e74:	428a      	cmp	r2, r1
 8008e76:	d100      	bne.n	8008e7a <memmove+0x2a>
 8008e78:	bd10      	pop	{r4, pc}
 8008e7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e82:	e7f7      	b.n	8008e74 <memmove+0x24>

08008e84 <__malloc_lock>:
 8008e84:	4801      	ldr	r0, [pc, #4]	; (8008e8c <__malloc_lock+0x8>)
 8008e86:	f7ff bc4d 	b.w	8008724 <__retarget_lock_acquire_recursive>
 8008e8a:	bf00      	nop
 8008e8c:	240003b8 	.word	0x240003b8

08008e90 <__malloc_unlock>:
 8008e90:	4801      	ldr	r0, [pc, #4]	; (8008e98 <__malloc_unlock+0x8>)
 8008e92:	f7ff bc48 	b.w	8008726 <__retarget_lock_release_recursive>
 8008e96:	bf00      	nop
 8008e98:	240003b8 	.word	0x240003b8

08008e9c <_free_r>:
 8008e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e9e:	2900      	cmp	r1, #0
 8008ea0:	d044      	beq.n	8008f2c <_free_r+0x90>
 8008ea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ea6:	9001      	str	r0, [sp, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f1a1 0404 	sub.w	r4, r1, #4
 8008eae:	bfb8      	it	lt
 8008eb0:	18e4      	addlt	r4, r4, r3
 8008eb2:	f7ff ffe7 	bl	8008e84 <__malloc_lock>
 8008eb6:	4a1e      	ldr	r2, [pc, #120]	; (8008f30 <_free_r+0x94>)
 8008eb8:	9801      	ldr	r0, [sp, #4]
 8008eba:	6813      	ldr	r3, [r2, #0]
 8008ebc:	b933      	cbnz	r3, 8008ecc <_free_r+0x30>
 8008ebe:	6063      	str	r3, [r4, #4]
 8008ec0:	6014      	str	r4, [r2, #0]
 8008ec2:	b003      	add	sp, #12
 8008ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ec8:	f7ff bfe2 	b.w	8008e90 <__malloc_unlock>
 8008ecc:	42a3      	cmp	r3, r4
 8008ece:	d908      	bls.n	8008ee2 <_free_r+0x46>
 8008ed0:	6825      	ldr	r5, [r4, #0]
 8008ed2:	1961      	adds	r1, r4, r5
 8008ed4:	428b      	cmp	r3, r1
 8008ed6:	bf01      	itttt	eq
 8008ed8:	6819      	ldreq	r1, [r3, #0]
 8008eda:	685b      	ldreq	r3, [r3, #4]
 8008edc:	1949      	addeq	r1, r1, r5
 8008ede:	6021      	streq	r1, [r4, #0]
 8008ee0:	e7ed      	b.n	8008ebe <_free_r+0x22>
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	b10b      	cbz	r3, 8008eec <_free_r+0x50>
 8008ee8:	42a3      	cmp	r3, r4
 8008eea:	d9fa      	bls.n	8008ee2 <_free_r+0x46>
 8008eec:	6811      	ldr	r1, [r2, #0]
 8008eee:	1855      	adds	r5, r2, r1
 8008ef0:	42a5      	cmp	r5, r4
 8008ef2:	d10b      	bne.n	8008f0c <_free_r+0x70>
 8008ef4:	6824      	ldr	r4, [r4, #0]
 8008ef6:	4421      	add	r1, r4
 8008ef8:	1854      	adds	r4, r2, r1
 8008efa:	42a3      	cmp	r3, r4
 8008efc:	6011      	str	r1, [r2, #0]
 8008efe:	d1e0      	bne.n	8008ec2 <_free_r+0x26>
 8008f00:	681c      	ldr	r4, [r3, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	6053      	str	r3, [r2, #4]
 8008f06:	4421      	add	r1, r4
 8008f08:	6011      	str	r1, [r2, #0]
 8008f0a:	e7da      	b.n	8008ec2 <_free_r+0x26>
 8008f0c:	d902      	bls.n	8008f14 <_free_r+0x78>
 8008f0e:	230c      	movs	r3, #12
 8008f10:	6003      	str	r3, [r0, #0]
 8008f12:	e7d6      	b.n	8008ec2 <_free_r+0x26>
 8008f14:	6825      	ldr	r5, [r4, #0]
 8008f16:	1961      	adds	r1, r4, r5
 8008f18:	428b      	cmp	r3, r1
 8008f1a:	bf04      	itt	eq
 8008f1c:	6819      	ldreq	r1, [r3, #0]
 8008f1e:	685b      	ldreq	r3, [r3, #4]
 8008f20:	6063      	str	r3, [r4, #4]
 8008f22:	bf04      	itt	eq
 8008f24:	1949      	addeq	r1, r1, r5
 8008f26:	6021      	streq	r1, [r4, #0]
 8008f28:	6054      	str	r4, [r2, #4]
 8008f2a:	e7ca      	b.n	8008ec2 <_free_r+0x26>
 8008f2c:	b003      	add	sp, #12
 8008f2e:	bd30      	pop	{r4, r5, pc}
 8008f30:	240003bc 	.word	0x240003bc

08008f34 <_realloc_r>:
 8008f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f38:	4680      	mov	r8, r0
 8008f3a:	4614      	mov	r4, r2
 8008f3c:	460e      	mov	r6, r1
 8008f3e:	b921      	cbnz	r1, 8008f4a <_realloc_r+0x16>
 8008f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f44:	4611      	mov	r1, r2
 8008f46:	f7ff bc0f 	b.w	8008768 <_malloc_r>
 8008f4a:	b92a      	cbnz	r2, 8008f58 <_realloc_r+0x24>
 8008f4c:	f7ff ffa6 	bl	8008e9c <_free_r>
 8008f50:	4625      	mov	r5, r4
 8008f52:	4628      	mov	r0, r5
 8008f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f58:	f000 f81b 	bl	8008f92 <_malloc_usable_size_r>
 8008f5c:	4284      	cmp	r4, r0
 8008f5e:	4607      	mov	r7, r0
 8008f60:	d802      	bhi.n	8008f68 <_realloc_r+0x34>
 8008f62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f66:	d812      	bhi.n	8008f8e <_realloc_r+0x5a>
 8008f68:	4621      	mov	r1, r4
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	f7ff fbfc 	bl	8008768 <_malloc_r>
 8008f70:	4605      	mov	r5, r0
 8008f72:	2800      	cmp	r0, #0
 8008f74:	d0ed      	beq.n	8008f52 <_realloc_r+0x1e>
 8008f76:	42bc      	cmp	r4, r7
 8008f78:	4622      	mov	r2, r4
 8008f7a:	4631      	mov	r1, r6
 8008f7c:	bf28      	it	cs
 8008f7e:	463a      	movcs	r2, r7
 8008f80:	f7ff fb9a 	bl	80086b8 <memcpy>
 8008f84:	4631      	mov	r1, r6
 8008f86:	4640      	mov	r0, r8
 8008f88:	f7ff ff88 	bl	8008e9c <_free_r>
 8008f8c:	e7e1      	b.n	8008f52 <_realloc_r+0x1e>
 8008f8e:	4635      	mov	r5, r6
 8008f90:	e7df      	b.n	8008f52 <_realloc_r+0x1e>

08008f92 <_malloc_usable_size_r>:
 8008f92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f96:	1f18      	subs	r0, r3, #4
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	bfbc      	itt	lt
 8008f9c:	580b      	ldrlt	r3, [r1, r0]
 8008f9e:	18c0      	addlt	r0, r0, r3
 8008fa0:	4770      	bx	lr
	...

08008fa4 <_init>:
 8008fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa6:	bf00      	nop
 8008fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008faa:	bc08      	pop	{r3}
 8008fac:	469e      	mov	lr, r3
 8008fae:	4770      	bx	lr

08008fb0 <_fini>:
 8008fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb2:	bf00      	nop
 8008fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb6:	bc08      	pop	{r3}
 8008fb8:	469e      	mov	lr, r3
 8008fba:	4770      	bx	lr
