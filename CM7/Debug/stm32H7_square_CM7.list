
stm32H7_square_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ac8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  08008d68  08008d68  00018d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009388  08009388  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009388  08009388  00019388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009390  08009390  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009390  08009390  00019390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009394  08009394  00019394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  24000000  08009398  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  24000080  08009414  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000394  08009414  00020394  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f0c  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a2f  00000000  00000000  00038fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  0003b9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001368  00000000  00000000  0003ce48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b242  00000000  00000000  0003e1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018575  00000000  00000000  000793f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00189374  00000000  00000000  00091967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021acdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c34  00000000  00000000  0021ad2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008d50 	.word	0x08008d50

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08008d50 	.word	0x08008d50

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f002 f8f3 	bl	8002a08 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 f8ea 	bl	8002a08 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	240000ac 	.word	0x240000ac
 8000840:	240000b0 	.word	0x240000b0

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f002 f8d3 	bl	8002a08 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f002 f8ca 	bl	8002a08 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	240000ac 	.word	0x240000ac
 8000880:	240000b2 	.word	0x240000b2

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f004 fd78 	bl	800539c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f004 ff62 	bl	8005780 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	240000b4 	.word	0x240000b4

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f004 fd4d 	bl	800539c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f004 ff38 	bl	8005780 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	240000b4 	.word	0x240000b4

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f004 fd23 	bl	800539c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	240000b4 	.word	0x240000b4

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f004 fd03 	bl	800539c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f004 fcfc 	bl	800539c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	240000b4 	.word	0x240000b4

080009b8 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80009bc:	21ff      	movs	r1, #255	; 0xff
 80009be:	20e1      	movs	r0, #225	; 0xe1
 80009c0:	f7ff ffb0 	bl	8000924 <NRF24_write_register>
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80009cc:	21ff      	movs	r1, #255	; 0xff
 80009ce:	20e2      	movs	r0, #226	; 0xe2
 80009d0:	f7ff ffa8 	bl	8000924 <NRF24_write_register>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80009d8:	b082      	sub	sp, #8
 80009da:	b580      	push	{r7, lr}
 80009dc:	b084      	sub	sp, #16
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	460b      	mov	r3, r1
 80009e6:	807b      	strh	r3, [r7, #2]
 80009e8:	4613      	mov	r3, r2
 80009ea:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80009ec:	4b66      	ldr	r3, [pc, #408]	; (8000b88 <NRF24_begin+0x1b0>)
 80009ee:	4618      	mov	r0, r3
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	2288      	movs	r2, #136	; 0x88
 80009f6:	4619      	mov	r1, r3
 80009f8:	f007 fd34 	bl	8008464 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80009fc:	4a63      	ldr	r2, [pc, #396]	; (8000b8c <NRF24_begin+0x1b4>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a02:	4a63      	ldr	r2, [pc, #396]	; (8000b90 <NRF24_begin+0x1b8>)
 8000a04:	887b      	ldrh	r3, [r7, #2]
 8000a06:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a08:	4a62      	ldr	r2, [pc, #392]	; (8000b94 <NRF24_begin+0x1bc>)
 8000a0a:	883b      	ldrh	r3, [r7, #0]
 8000a0c:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff fef8 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff ff15 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a1a:	2005      	movs	r0, #5
 8000a1c:	f001 fd30 	bl	8002480 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a20:	2108      	movs	r1, #8
 8000a22:	2000      	movs	r0, #0
 8000a24:	f7ff ff7e 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000a28:	213f      	movs	r1, #63	; 0x3f
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f7ff ff7a 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000a30:	2103      	movs	r1, #3
 8000a32:	2002      	movs	r0, #2
 8000a34:	f7ff ff76 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000a38:	2103      	movs	r1, #3
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	f7ff ff72 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000a40:	2103      	movs	r1, #3
 8000a42:	2004      	movs	r0, #4
 8000a44:	f7ff ff6e 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000a48:	2102      	movs	r1, #2
 8000a4a:	2005      	movs	r0, #5
 8000a4c:	f7ff ff6a 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000a50:	210f      	movs	r1, #15
 8000a52:	2006      	movs	r0, #6
 8000a54:	f7ff ff66 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000a58:	210e      	movs	r1, #14
 8000a5a:	2007      	movs	r0, #7
 8000a5c:	f7ff ff62 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000a60:	2100      	movs	r1, #0
 8000a62:	2008      	movs	r0, #8
 8000a64:	f7ff ff5e 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2009      	movs	r0, #9
 8000a6c:	f7ff ff5a 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000a70:	23e7      	movs	r3, #231	; 0xe7
 8000a72:	733b      	strb	r3, [r7, #12]
 8000a74:	23e7      	movs	r3, #231	; 0xe7
 8000a76:	72fb      	strb	r3, [r7, #11]
 8000a78:	23e7      	movs	r3, #231	; 0xe7
 8000a7a:	72bb      	strb	r3, [r7, #10]
 8000a7c:	23e7      	movs	r3, #231	; 0xe7
 8000a7e:	727b      	strb	r3, [r7, #9]
 8000a80:	23e7      	movs	r3, #231	; 0xe7
 8000a82:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	2205      	movs	r2, #5
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	200a      	movs	r0, #10
 8000a8e:	f7ff ff6b 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000a92:	23c2      	movs	r3, #194	; 0xc2
 8000a94:	733b      	strb	r3, [r7, #12]
 8000a96:	23c2      	movs	r3, #194	; 0xc2
 8000a98:	72fb      	strb	r3, [r7, #11]
 8000a9a:	23c2      	movs	r3, #194	; 0xc2
 8000a9c:	72bb      	strb	r3, [r7, #10]
 8000a9e:	23c2      	movs	r3, #194	; 0xc2
 8000aa0:	727b      	strb	r3, [r7, #9]
 8000aa2:	23c2      	movs	r3, #194	; 0xc2
 8000aa4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	2205      	movs	r2, #5
 8000aac:	4619      	mov	r1, r3
 8000aae:	200b      	movs	r0, #11
 8000ab0:	f7ff ff5a 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000ab4:	21c3      	movs	r1, #195	; 0xc3
 8000ab6:	200c      	movs	r0, #12
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000abc:	21c4      	movs	r1, #196	; 0xc4
 8000abe:	200d      	movs	r0, #13
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000ac4:	21c5      	movs	r1, #197	; 0xc5
 8000ac6:	200e      	movs	r0, #14
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000acc:	21c6      	movs	r1, #198	; 0xc6
 8000ace:	200f      	movs	r0, #15
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000ad4:	23e7      	movs	r3, #231	; 0xe7
 8000ad6:	733b      	strb	r3, [r7, #12]
 8000ad8:	23e7      	movs	r3, #231	; 0xe7
 8000ada:	72fb      	strb	r3, [r7, #11]
 8000adc:	23e7      	movs	r3, #231	; 0xe7
 8000ade:	72bb      	strb	r3, [r7, #10]
 8000ae0:	23e7      	movs	r3, #231	; 0xe7
 8000ae2:	727b      	strb	r3, [r7, #9]
 8000ae4:	23e7      	movs	r3, #231	; 0xe7
 8000ae6:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	2205      	movs	r2, #5
 8000aee:	4619      	mov	r1, r3
 8000af0:	2010      	movs	r0, #16
 8000af2:	f7ff ff39 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000af6:	2100      	movs	r1, #0
 8000af8:	2011      	movs	r0, #17
 8000afa:	f7ff ff13 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000afe:	2100      	movs	r1, #0
 8000b00:	2012      	movs	r0, #18
 8000b02:	f7ff ff0f 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b06:	2100      	movs	r1, #0
 8000b08:	2013      	movs	r0, #19
 8000b0a:	f7ff ff0b 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2014      	movs	r0, #20
 8000b12:	f7ff ff07 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b16:	2100      	movs	r1, #0
 8000b18:	2015      	movs	r0, #21
 8000b1a:	f7ff ff03 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2016      	movs	r0, #22
 8000b22:	f7ff feff 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000b26:	f000 f9df 	bl	8000ee8 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	201c      	movs	r0, #28
 8000b2e:	f7ff fef9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000b32:	2100      	movs	r1, #0
 8000b34:	201d      	movs	r0, #29
 8000b36:	f7ff fef5 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000b3a:	f000 f9ef 	bl	8000f1c <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000b3e:	210f      	movs	r1, #15
 8000b40:	200f      	movs	r0, #15
 8000b42:	f000 f89d 	bl	8000c80 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000b46:	2003      	movs	r0, #3
 8000b48:	f000 f90f 	bl	8000d6a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 f945 	bl	8000ddc <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000b52:	2002      	movs	r0, #2
 8000b54:	f000 f988 	bl	8000e68 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000b58:	f000 f8da 	bl	8000d10 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000b5c:	2020      	movs	r0, #32
 8000b5e:	f000 f8bf 	bl	8000ce0 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000b62:	f000 f9b8 	bl	8000ed6 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000b66:	204c      	movs	r0, #76	; 0x4c
 8000b68:	f000 f8a5 	bl	8000cb6 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000b6c:	f7ff ff24 	bl	80009b8 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000b70:	f7ff ff2a 	bl	80009c8 <NRF24_flush_rx>

	NRF24_powerDown();
 8000b74:	f000 f9a0 	bl	8000eb8 <NRF24_powerDown>

}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b82:	b002      	add	sp, #8
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	240000b4 	.word	0x240000b4
 8000b8c:	240000ac 	.word	0x240000ac
 8000b90:	240000b0 	.word	0x240000b0
 8000b94:	240000b2 	.word	0x240000b2

08000b98 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f7ff fe71 	bl	8000884 <NRF24_read_register>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	f043 0303 	orr.w	r3, r3, #3
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4619      	mov	r1, r3
 8000bac:	2000      	movs	r0, #0
 8000bae:	f7ff feb9 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <NRF24_startListening+0x48>)
 8000bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	d004      	beq.n	8000bc6 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000bbc:	2205      	movs	r2, #5
 8000bbe:	4908      	ldr	r1, [pc, #32]	; (8000be0 <NRF24_startListening+0x48>)
 8000bc0:	200a      	movs	r0, #10
 8000bc2:	f7ff fed1 	bl	8000968 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000bc6:	f7ff fef7 	bl	80009b8 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bca:	f7ff fefd 	bl	80009c8 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f7ff fe38 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000bd4:	2096      	movs	r0, #150	; 0x96
 8000bd6:	f7ff fdf3 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	240000a0 	.word	0x240000a0

08000be4 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4601      	mov	r1, r0
 8000bec:	e9c7 2300 	strd	r2, r3, [r7]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d104      	bne.n	8000c04 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bfe:	491c      	ldr	r1, [pc, #112]	; (8000c70 <NRF24_openReadingPipe+0x8c>)
 8000c00:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d82d      	bhi.n	8000c66 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d808      	bhi.n	8000c22 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <NRF24_openReadingPipe+0x90>)
 8000c14:	5cd3      	ldrb	r3, [r2, r3]
 8000c16:	4639      	mov	r1, r7
 8000c18:	2205      	movs	r2, #5
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fea4 	bl	8000968 <NRF24_write_registerN>
 8000c20:	e007      	b.n	8000c32 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <NRF24_openReadingPipe+0x90>)
 8000c26:	5cd3      	ldrb	r3, [r2, r3]
 8000c28:	4639      	mov	r1, r7
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fe9b 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <NRF24_openReadingPipe+0x94>)
 8000c36:	5cd3      	ldrb	r3, [r2, r3]
 8000c38:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <NRF24_openReadingPipe+0x98>)
 8000c3a:	7812      	ldrb	r2, [r2, #0]
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fe70 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000c44:	2002      	movs	r0, #2
 8000c46:	f7ff fe1d 	bl	8000884 <NRF24_read_register>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b25a      	sxtb	r2, r3
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	2101      	movs	r1, #1
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	b25b      	sxtb	r3, r3
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4619      	mov	r1, r3
 8000c60:	2002      	movs	r0, #2
 8000c62:	f7ff fe5f 	bl	8000924 <NRF24_write_register>
	}

}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	240000a0 	.word	0x240000a0
 8000c74:	080092bc 	.word	0x080092bc
 8000c78:	080092c4 	.word	0x080092c4
 8000c7c:	240000a8 	.word	0x240000a8

08000c80 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	460a      	mov	r2, r1
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	011b      	lsls	r3, r3, #4
 8000c94:	b25a      	sxtb	r2, r3
 8000c96:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	2004      	movs	r0, #4
 8000caa:	f7ff fe3b 	bl	8000924 <NRF24_write_register>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b084      	sub	sp, #16
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000cc0:	237f      	movs	r3, #127	; 0x7f
 8000cc2:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000cc4:	7bfa      	ldrb	r2, [r7, #15]
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	bf28      	it	cs
 8000ccc:	4613      	movcs	r3, r2
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	2005      	movs	r0, #5
 8000cd4:	f7ff fe26 	bl	8000924 <NRF24_write_register>
}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000cea:	2320      	movs	r3, #32
 8000cec:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	bf28      	it	cs
 8000cf6:	4613      	movcs	r3, r2
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <NRF24_setPayloadSize+0x2c>)
 8000cfc:	701a      	strb	r2, [r3, #0]
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	240000a8 	.word	0x240000a8

08000d10 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000d14:	201d      	movs	r0, #29
 8000d16:	f7ff fdb5 	bl	8000884 <NRF24_read_register>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f023 0304 	bic.w	r3, r3, #4
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4619      	mov	r1, r3
 8000d24:	201d      	movs	r0, #29
 8000d26:	f7ff fdfd 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	201c      	movs	r0, #28
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000d32:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <NRF24_disableDynamicPayloads+0x2c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	240000a9 	.word	0x240000a9

08000d40 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d004      	beq.n	8000d5a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000d50:	213f      	movs	r1, #63	; 0x3f
 8000d52:	2001      	movs	r0, #1
 8000d54:	f7ff fde6 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000d58:	e003      	b.n	8000d62 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f7ff fde1 	bl	8000924 <NRF24_write_register>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000d74:	2006      	movs	r0, #6
 8000d76:	f7ff fd85 	bl	8000884 <NRF24_read_register>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	f023 0306 	bic.w	r3, r3, #6
 8000d84:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d104      	bne.n	8000d96 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	f043 0306 	orr.w	r3, r3, #6
 8000d92:	73fb      	strb	r3, [r7, #15]
 8000d94:	e019      	b.n	8000dca <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d104      	bne.n	8000da6 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	e011      	b.n	8000dca <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d104      	bne.n	8000db6 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	e009      	b.n	8000dca <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d006      	beq.n	8000dca <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	d103      	bne.n	8000dca <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	f043 0306 	orr.w	r3, r3, #6
 8000dc8:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	2006      	movs	r0, #6
 8000dd0:	f7ff fda8 	bl	8000924 <NRF24_write_register>
}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000de6:	2300      	movs	r3, #0
 8000de8:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000dea:	2006      	movs	r0, #6
 8000dec:	f7ff fd4a 	bl	8000884 <NRF24_read_register>
 8000df0:	4603      	mov	r3, r0
 8000df2:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <NRF24_setDataRate+0x88>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000e00:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d107      	bne.n	8000e18 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <NRF24_setDataRate+0x88>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
 8000e10:	f043 0320 	orr.w	r3, r3, #32
 8000e14:	73bb      	strb	r3, [r7, #14]
 8000e16:	e00d      	b.n	8000e34 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d107      	bne.n	8000e2e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <NRF24_setDataRate+0x88>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000e24:	7bbb      	ldrb	r3, [r7, #14]
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	73bb      	strb	r3, [r7, #14]
 8000e2c:	e002      	b.n	8000e34 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <NRF24_setDataRate+0x88>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000e34:	7bbb      	ldrb	r3, [r7, #14]
 8000e36:	4619      	mov	r1, r3
 8000e38:	2006      	movs	r0, #6
 8000e3a:	f7ff fd73 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000e3e:	2006      	movs	r0, #6
 8000e40:	f7ff fd20 	bl	8000884 <NRF24_read_register>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461a      	mov	r2, r3
 8000e48:	7bbb      	ldrb	r3, [r7, #14]
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d102      	bne.n	8000e54 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	73fb      	strb	r3, [r7, #15]
 8000e52:	e002      	b.n	8000e5a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <NRF24_setDataRate+0x88>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	240000aa 	.word	0x240000aa

08000e68 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff fd06 	bl	8000884 <NRF24_read_register>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	f023 030c 	bic.w	r3, r3, #12
 8000e7e:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00f      	beq.n	8000ea6 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d104      	bne.n	8000e96 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	f043 0308 	orr.w	r3, r3, #8
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e007      	b.n	8000ea6 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f7ff fd3a 	bl	8000924 <NRF24_write_register>
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f7ff fce1 	bl	8000884 <NRF24_read_register>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	f023 0302 	bic.w	r3, r3, #2
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4619      	mov	r1, r3
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff fd29 	bl	8000924 <NRF24_write_register>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000eda:	2170      	movs	r1, #112	; 0x70
 8000edc:	2007      	movs	r0, #7
 8000ede:	f7ff fd21 	bl	8000924 <NRF24_write_register>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f7ff fc88 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000ef4:	2350      	movs	r3, #80	; 0x50
 8000ef6:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000ef8:	2373      	movs	r3, #115	; 0x73
 8000efa:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000efc:	1d39      	adds	r1, r7, #4
 8000efe:	2364      	movs	r3, #100	; 0x64
 8000f00:	2202      	movs	r2, #2
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <NRF24_ACTIVATE_cmd+0x30>)
 8000f04:	f004 fa4a 	bl	800539c <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff fc7b 	bl	8000804 <NRF24_csn>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	240000b4 	.word	0x240000b4

08000f1c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f1e:	b0a1      	sub	sp, #132	; 0x84
 8000f20:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	49c3      	ldr	r1, [pc, #780]	; (8001234 <printRadioSettings+0x318>)
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f007 fab1 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff f9d4 	bl	80002e0 <strlen>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	f107 0108 	add.w	r1, r7, #8
 8000f40:	230a      	movs	r3, #10
 8000f42:	48bd      	ldr	r0, [pc, #756]	; (8001238 <printRadioSettings+0x31c>)
 8000f44:	f006 f9ae 	bl	80072a4 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f7ff fc9b 	bl	8000884 <NRF24_read_register>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000f54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f58:	f003 0308 	and.w	r3, r3, #8
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d013      	beq.n	8000f88 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000f60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d006      	beq.n	8000f7a <printRadioSettings+0x5e>
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	49b2      	ldr	r1, [pc, #712]	; (800123c <printRadioSettings+0x320>)
 8000f72:	4618      	mov	r0, r3
 8000f74:	f007 fa8c 	bl	8008490 <siprintf>
 8000f78:	e00c      	b.n	8000f94 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	49b0      	ldr	r1, [pc, #704]	; (8001240 <printRadioSettings+0x324>)
 8000f80:	4618      	mov	r0, r3
 8000f82:	f007 fa85 	bl	8008490 <siprintf>
 8000f86:	e005      	b.n	8000f94 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	49ad      	ldr	r1, [pc, #692]	; (8001244 <printRadioSettings+0x328>)
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f007 fa7e 	bl	8008490 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff f9a1 	bl	80002e0 <strlen>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	f107 0108 	add.w	r1, r7, #8
 8000fa6:	230a      	movs	r3, #10
 8000fa8:	48a3      	ldr	r0, [pc, #652]	; (8001238 <printRadioSettings+0x31c>)
 8000faa:	f006 f97b 	bl	80072a4 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f7ff fc68 	bl	8000884 <NRF24_read_register>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fbe:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	bfcc      	ite	gt
 8000fc6:	2301      	movgt	r3, #1
 8000fc8:	2300      	movle	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fd2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	bfcc      	ite	gt
 8000fda:	2301      	movgt	r3, #1
 8000fdc:	2300      	movle	r3, #0
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fe2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fe6:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	bfcc      	ite	gt
 8000fee:	2301      	movgt	r3, #1
 8000ff0:	2300      	movle	r3, #0
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ff6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ffa:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bfcc      	ite	gt
 8001002:	2301      	movgt	r3, #1
 8001004:	2300      	movle	r3, #0
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800100a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800100e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001012:	2b00      	cmp	r3, #0
 8001014:	bfcc      	ite	gt
 8001016:	2301      	movgt	r3, #1
 8001018:	2300      	movle	r3, #0
 800101a:	b2db      	uxtb	r3, r3
 800101c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800101e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001022:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001026:	2b00      	cmp	r3, #0
 8001028:	bfcc      	ite	gt
 800102a:	2301      	movgt	r3, #1
 800102c:	2300      	movle	r3, #0
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f107 0008 	add.w	r0, r7, #8
 8001034:	9303      	str	r3, [sp, #12]
 8001036:	9402      	str	r4, [sp, #8]
 8001038:	9101      	str	r1, [sp, #4]
 800103a:	9200      	str	r2, [sp, #0]
 800103c:	4633      	mov	r3, r6
 800103e:	462a      	mov	r2, r5
 8001040:	4981      	ldr	r1, [pc, #516]	; (8001248 <printRadioSettings+0x32c>)
 8001042:	f007 fa25 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff f948 	bl	80002e0 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	b29a      	uxth	r2, r3
 8001054:	f107 0108 	add.w	r1, r7, #8
 8001058:	230a      	movs	r3, #10
 800105a:	4877      	ldr	r0, [pc, #476]	; (8001238 <printRadioSettings+0x31c>)
 800105c:	f006 f922 	bl	80072a4 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001060:	2002      	movs	r0, #2
 8001062:	f7ff fc0f 	bl	8000884 <NRF24_read_register>
 8001066:	4603      	mov	r3, r0
 8001068:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800106c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001070:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001074:	2b00      	cmp	r3, #0
 8001076:	bfcc      	ite	gt
 8001078:	2301      	movgt	r3, #1
 800107a:	2300      	movle	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001080:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001084:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001088:	2b00      	cmp	r3, #0
 800108a:	bfcc      	ite	gt
 800108c:	2301      	movgt	r3, #1
 800108e:	2300      	movle	r3, #0
 8001090:	b2db      	uxtb	r3, r3
 8001092:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001094:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001098:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800109c:	2b00      	cmp	r3, #0
 800109e:	bfcc      	ite	gt
 80010a0:	2301      	movgt	r3, #1
 80010a2:	2300      	movle	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010ac:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	bfcc      	ite	gt
 80010b4:	2301      	movgt	r3, #1
 80010b6:	2300      	movle	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010c0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	bfcc      	ite	gt
 80010c8:	2301      	movgt	r3, #1
 80010ca:	2300      	movle	r3, #0
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010d4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bfcc      	ite	gt
 80010dc:	2301      	movgt	r3, #1
 80010de:	2300      	movle	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	f107 0008 	add.w	r0, r7, #8
 80010e6:	9303      	str	r3, [sp, #12]
 80010e8:	9402      	str	r4, [sp, #8]
 80010ea:	9101      	str	r1, [sp, #4]
 80010ec:	9200      	str	r2, [sp, #0]
 80010ee:	4633      	mov	r3, r6
 80010f0:	462a      	mov	r2, r5
 80010f2:	4956      	ldr	r1, [pc, #344]	; (800124c <printRadioSettings+0x330>)
 80010f4:	f007 f9cc 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f8ef 	bl	80002e0 <strlen>
 8001102:	4603      	mov	r3, r0
 8001104:	b29a      	uxth	r2, r3
 8001106:	f107 0108 	add.w	r1, r7, #8
 800110a:	230a      	movs	r3, #10
 800110c:	484a      	ldr	r0, [pc, #296]	; (8001238 <printRadioSettings+0x31c>)
 800110e:	f006 f8c9 	bl	80072a4 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001112:	2003      	movs	r0, #3
 8001114:	f7ff fbb6 	bl	8000884 <NRF24_read_register>
 8001118:	4603      	mov	r3, r0
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001122:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001126:	3302      	adds	r3, #2
 8001128:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800112c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	4946      	ldr	r1, [pc, #280]	; (8001250 <printRadioSettings+0x334>)
 8001136:	4618      	mov	r0, r3
 8001138:	f007 f9aa 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f8cd 	bl	80002e0 <strlen>
 8001146:	4603      	mov	r3, r0
 8001148:	b29a      	uxth	r2, r3
 800114a:	f107 0108 	add.w	r1, r7, #8
 800114e:	230a      	movs	r3, #10
 8001150:	4839      	ldr	r0, [pc, #228]	; (8001238 <printRadioSettings+0x31c>)
 8001152:	f006 f8a7 	bl	80072a4 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001156:	2005      	movs	r0, #5
 8001158:	f7ff fb94 	bl	8000884 <NRF24_read_register>
 800115c:	4603      	mov	r3, r0
 800115e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001162:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4939      	ldr	r1, [pc, #228]	; (8001254 <printRadioSettings+0x338>)
 8001170:	4618      	mov	r0, r3
 8001172:	f007 f98d 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f8b0 	bl	80002e0 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	b29a      	uxth	r2, r3
 8001184:	f107 0108 	add.w	r1, r7, #8
 8001188:	230a      	movs	r3, #10
 800118a:	482b      	ldr	r0, [pc, #172]	; (8001238 <printRadioSettings+0x31c>)
 800118c:	f006 f88a 	bl	80072a4 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001190:	2006      	movs	r0, #6
 8001192:	f7ff fb77 	bl	8000884 <NRF24_read_register>
 8001196:	4603      	mov	r3, r0
 8001198:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800119c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <printRadioSettings+0x29a>
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	492a      	ldr	r1, [pc, #168]	; (8001258 <printRadioSettings+0x33c>)
 80011ae:	4618      	mov	r0, r3
 80011b0:	f007 f96e 	bl	8008490 <siprintf>
 80011b4:	e005      	b.n	80011c2 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	4928      	ldr	r1, [pc, #160]	; (800125c <printRadioSettings+0x340>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f007 f967 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f88a 	bl	80002e0 <strlen>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	f107 0108 	add.w	r1, r7, #8
 80011d4:	230a      	movs	r3, #10
 80011d6:	4818      	ldr	r0, [pc, #96]	; (8001238 <printRadioSettings+0x31c>)
 80011d8:	f006 f864 	bl	80072a4 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80011dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011e0:	f003 0306 	and.w	r3, r3, #6
 80011e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80011e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011ec:	085b      	lsrs	r3, r3, #1
 80011ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80011f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d106      	bne.n	8001208 <printRadioSettings+0x2ec>
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	4918      	ldr	r1, [pc, #96]	; (8001260 <printRadioSettings+0x344>)
 8001200:	4618      	mov	r0, r3
 8001202:	f007 f945 	bl	8008490 <siprintf>
 8001206:	e03b      	b.n	8001280 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001208:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800120c:	2b01      	cmp	r3, #1
 800120e:	d106      	bne.n	800121e <printRadioSettings+0x302>
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	4913      	ldr	r1, [pc, #76]	; (8001264 <printRadioSettings+0x348>)
 8001216:	4618      	mov	r0, r3
 8001218:	f007 f93a 	bl	8008490 <siprintf>
 800121c:	e030      	b.n	8001280 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800121e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001222:	2b02      	cmp	r3, #2
 8001224:	d122      	bne.n	800126c <printRadioSettings+0x350>
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	490f      	ldr	r1, [pc, #60]	; (8001268 <printRadioSettings+0x34c>)
 800122c:	4618      	mov	r0, r3
 800122e:	f007 f92f 	bl	8008490 <siprintf>
 8001232:	e025      	b.n	8001280 <printRadioSettings+0x364>
 8001234:	08008d68 	.word	0x08008d68
 8001238:	2400013c 	.word	0x2400013c
 800123c:	08008d9c 	.word	0x08008d9c
 8001240:	08008db8 	.word	0x08008db8
 8001244:	08008dd4 	.word	0x08008dd4
 8001248:	08008de8 	.word	0x08008de8
 800124c:	08008e2c 	.word	0x08008e2c
 8001250:	08008e78 	.word	0x08008e78
 8001254:	08008e94 	.word	0x08008e94
 8001258:	08008ea8 	.word	0x08008ea8
 800125c:	08008ec0 	.word	0x08008ec0
 8001260:	08008ed8 	.word	0x08008ed8
 8001264:	08008eec 	.word	0x08008eec
 8001268:	08008f00 	.word	0x08008f00
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 800126c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001270:	2b03      	cmp	r3, #3
 8001272:	d105      	bne.n	8001280 <printRadioSettings+0x364>
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	49d7      	ldr	r1, [pc, #860]	; (80015d8 <printRadioSettings+0x6bc>)
 800127a:	4618      	mov	r0, r3
 800127c:	f007 f908 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f82b 	bl	80002e0 <strlen>
 800128a:	4603      	mov	r3, r0
 800128c:	b29a      	uxth	r2, r3
 800128e:	f107 0108 	add.w	r1, r7, #8
 8001292:	230a      	movs	r3, #10
 8001294:	48d1      	ldr	r0, [pc, #836]	; (80015dc <printRadioSettings+0x6c0>)
 8001296:	f006 f805 	bl	80072a4 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800129a:	463b      	mov	r3, r7
 800129c:	2205      	movs	r2, #5
 800129e:	4619      	mov	r1, r3
 80012a0:	200a      	movs	r0, #10
 80012a2:	f7ff fb17 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80012a6:	793b      	ldrb	r3, [r7, #4]
 80012a8:	461c      	mov	r4, r3
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	461d      	mov	r5, r3
 80012ae:	78bb      	ldrb	r3, [r7, #2]
 80012b0:	787a      	ldrb	r2, [r7, #1]
 80012b2:	7839      	ldrb	r1, [r7, #0]
 80012b4:	f107 0008 	add.w	r0, r7, #8
 80012b8:	9102      	str	r1, [sp, #8]
 80012ba:	9201      	str	r2, [sp, #4]
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	462b      	mov	r3, r5
 80012c0:	4622      	mov	r2, r4
 80012c2:	49c7      	ldr	r1, [pc, #796]	; (80015e0 <printRadioSettings+0x6c4>)
 80012c4:	f007 f8e4 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f807 	bl	80002e0 <strlen>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	f107 0108 	add.w	r1, r7, #8
 80012da:	230a      	movs	r3, #10
 80012dc:	48bf      	ldr	r0, [pc, #764]	; (80015dc <printRadioSettings+0x6c0>)
 80012de:	f005 ffe1 	bl	80072a4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80012e2:	463b      	mov	r3, r7
 80012e4:	2205      	movs	r2, #5
 80012e6:	4619      	mov	r1, r3
 80012e8:	200b      	movs	r0, #11
 80012ea:	f7ff faf3 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80012ee:	793b      	ldrb	r3, [r7, #4]
 80012f0:	461c      	mov	r4, r3
 80012f2:	78fb      	ldrb	r3, [r7, #3]
 80012f4:	461d      	mov	r5, r3
 80012f6:	78bb      	ldrb	r3, [r7, #2]
 80012f8:	787a      	ldrb	r2, [r7, #1]
 80012fa:	7839      	ldrb	r1, [r7, #0]
 80012fc:	f107 0008 	add.w	r0, r7, #8
 8001300:	9102      	str	r1, [sp, #8]
 8001302:	9201      	str	r2, [sp, #4]
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	462b      	mov	r3, r5
 8001308:	4622      	mov	r2, r4
 800130a:	49b6      	ldr	r1, [pc, #728]	; (80015e4 <printRadioSettings+0x6c8>)
 800130c:	f007 f8c0 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	4618      	mov	r0, r3
 8001316:	f7fe ffe3 	bl	80002e0 <strlen>
 800131a:	4603      	mov	r3, r0
 800131c:	b29a      	uxth	r2, r3
 800131e:	f107 0108 	add.w	r1, r7, #8
 8001322:	230a      	movs	r3, #10
 8001324:	48ad      	ldr	r0, [pc, #692]	; (80015dc <printRadioSettings+0x6c0>)
 8001326:	f005 ffbd 	bl	80072a4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800132a:	463b      	mov	r3, r7
 800132c:	2201      	movs	r2, #1
 800132e:	4619      	mov	r1, r3
 8001330:	200c      	movs	r0, #12
 8001332:	f7ff facf 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001336:	783b      	ldrb	r3, [r7, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	49aa      	ldr	r1, [pc, #680]	; (80015e8 <printRadioSettings+0x6cc>)
 8001340:	4618      	mov	r0, r3
 8001342:	f007 f8a5 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	4618      	mov	r0, r3
 800134c:	f7fe ffc8 	bl	80002e0 <strlen>
 8001350:	4603      	mov	r3, r0
 8001352:	b29a      	uxth	r2, r3
 8001354:	f107 0108 	add.w	r1, r7, #8
 8001358:	230a      	movs	r3, #10
 800135a:	48a0      	ldr	r0, [pc, #640]	; (80015dc <printRadioSettings+0x6c0>)
 800135c:	f005 ffa2 	bl	80072a4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001360:	463b      	mov	r3, r7
 8001362:	2201      	movs	r2, #1
 8001364:	4619      	mov	r1, r3
 8001366:	200d      	movs	r0, #13
 8001368:	f7ff fab4 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800136c:	783b      	ldrb	r3, [r7, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	499d      	ldr	r1, [pc, #628]	; (80015ec <printRadioSettings+0x6d0>)
 8001376:	4618      	mov	r0, r3
 8001378:	f007 f88a 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	4618      	mov	r0, r3
 8001382:	f7fe ffad 	bl	80002e0 <strlen>
 8001386:	4603      	mov	r3, r0
 8001388:	b29a      	uxth	r2, r3
 800138a:	f107 0108 	add.w	r1, r7, #8
 800138e:	230a      	movs	r3, #10
 8001390:	4892      	ldr	r0, [pc, #584]	; (80015dc <printRadioSettings+0x6c0>)
 8001392:	f005 ff87 	bl	80072a4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001396:	463b      	mov	r3, r7
 8001398:	2201      	movs	r2, #1
 800139a:	4619      	mov	r1, r3
 800139c:	200e      	movs	r0, #14
 800139e:	f7ff fa99 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80013a2:	783b      	ldrb	r3, [r7, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	4991      	ldr	r1, [pc, #580]	; (80015f0 <printRadioSettings+0x6d4>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f007 f86f 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7fe ff92 	bl	80002e0 <strlen>
 80013bc:	4603      	mov	r3, r0
 80013be:	b29a      	uxth	r2, r3
 80013c0:	f107 0108 	add.w	r1, r7, #8
 80013c4:	230a      	movs	r3, #10
 80013c6:	4885      	ldr	r0, [pc, #532]	; (80015dc <printRadioSettings+0x6c0>)
 80013c8:	f005 ff6c 	bl	80072a4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80013cc:	463b      	mov	r3, r7
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	200f      	movs	r0, #15
 80013d4:	f7ff fa7e 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80013d8:	783b      	ldrb	r3, [r7, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	4984      	ldr	r1, [pc, #528]	; (80015f4 <printRadioSettings+0x6d8>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	f007 f854 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7fe ff77 	bl	80002e0 <strlen>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	f107 0108 	add.w	r1, r7, #8
 80013fa:	230a      	movs	r3, #10
 80013fc:	4877      	ldr	r0, [pc, #476]	; (80015dc <printRadioSettings+0x6c0>)
 80013fe:	f005 ff51 	bl	80072a4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001402:	463b      	mov	r3, r7
 8001404:	2205      	movs	r2, #5
 8001406:	4619      	mov	r1, r3
 8001408:	2010      	movs	r0, #16
 800140a:	f7ff fa63 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800140e:	793b      	ldrb	r3, [r7, #4]
 8001410:	461c      	mov	r4, r3
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	461d      	mov	r5, r3
 8001416:	78bb      	ldrb	r3, [r7, #2]
 8001418:	787a      	ldrb	r2, [r7, #1]
 800141a:	7839      	ldrb	r1, [r7, #0]
 800141c:	f107 0008 	add.w	r0, r7, #8
 8001420:	9102      	str	r1, [sp, #8]
 8001422:	9201      	str	r2, [sp, #4]
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	462b      	mov	r3, r5
 8001428:	4622      	mov	r2, r4
 800142a:	4973      	ldr	r1, [pc, #460]	; (80015f8 <printRadioSettings+0x6dc>)
 800142c:	f007 f830 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	4618      	mov	r0, r3
 8001436:	f7fe ff53 	bl	80002e0 <strlen>
 800143a:	4603      	mov	r3, r0
 800143c:	b29a      	uxth	r2, r3
 800143e:	f107 0108 	add.w	r1, r7, #8
 8001442:	230a      	movs	r3, #10
 8001444:	4865      	ldr	r0, [pc, #404]	; (80015dc <printRadioSettings+0x6c0>)
 8001446:	f005 ff2d 	bl	80072a4 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800144a:	2011      	movs	r0, #17
 800144c:	f7ff fa1a 	bl	8000884 <NRF24_read_register>
 8001450:	4603      	mov	r3, r0
 8001452:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001456:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800145a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	4966      	ldr	r1, [pc, #408]	; (80015fc <printRadioSettings+0x6e0>)
 8001464:	4618      	mov	r0, r3
 8001466:	f007 f813 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	4618      	mov	r0, r3
 8001470:	f7fe ff36 	bl	80002e0 <strlen>
 8001474:	4603      	mov	r3, r0
 8001476:	b29a      	uxth	r2, r3
 8001478:	f107 0108 	add.w	r1, r7, #8
 800147c:	230a      	movs	r3, #10
 800147e:	4857      	ldr	r0, [pc, #348]	; (80015dc <printRadioSettings+0x6c0>)
 8001480:	f005 ff10 	bl	80072a4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8001484:	2012      	movs	r0, #18
 8001486:	f7ff f9fd 	bl	8000884 <NRF24_read_register>
 800148a:	4603      	mov	r3, r0
 800148c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001490:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001494:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	4958      	ldr	r1, [pc, #352]	; (8001600 <printRadioSettings+0x6e4>)
 800149e:	4618      	mov	r0, r3
 80014a0:	f006 fff6 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe ff19 	bl	80002e0 <strlen>
 80014ae:	4603      	mov	r3, r0
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	f107 0108 	add.w	r1, r7, #8
 80014b6:	230a      	movs	r3, #10
 80014b8:	4848      	ldr	r0, [pc, #288]	; (80015dc <printRadioSettings+0x6c0>)
 80014ba:	f005 fef3 	bl	80072a4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 80014be:	2013      	movs	r0, #19
 80014c0:	f7ff f9e0 	bl	8000884 <NRF24_read_register>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80014ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	494b      	ldr	r1, [pc, #300]	; (8001604 <printRadioSettings+0x6e8>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f006 ffd9 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe fefc 	bl	80002e0 <strlen>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	f107 0108 	add.w	r1, r7, #8
 80014f0:	230a      	movs	r3, #10
 80014f2:	483a      	ldr	r0, [pc, #232]	; (80015dc <printRadioSettings+0x6c0>)
 80014f4:	f005 fed6 	bl	80072a4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80014f8:	2014      	movs	r0, #20
 80014fa:	f7ff f9c3 	bl	8000884 <NRF24_read_register>
 80014fe:	4603      	mov	r3, r0
 8001500:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001504:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001508:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800150c:	f107 0308 	add.w	r3, r7, #8
 8001510:	493d      	ldr	r1, [pc, #244]	; (8001608 <printRadioSettings+0x6ec>)
 8001512:	4618      	mov	r0, r3
 8001514:	f006 ffbc 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe fedf 	bl	80002e0 <strlen>
 8001522:	4603      	mov	r3, r0
 8001524:	b29a      	uxth	r2, r3
 8001526:	f107 0108 	add.w	r1, r7, #8
 800152a:	230a      	movs	r3, #10
 800152c:	482b      	ldr	r0, [pc, #172]	; (80015dc <printRadioSettings+0x6c0>)
 800152e:	f005 feb9 	bl	80072a4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8001532:	2015      	movs	r0, #21
 8001534:	f7ff f9a6 	bl	8000884 <NRF24_read_register>
 8001538:	4603      	mov	r3, r0
 800153a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800153e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001542:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	4930      	ldr	r1, [pc, #192]	; (800160c <printRadioSettings+0x6f0>)
 800154c:	4618      	mov	r0, r3
 800154e:	f006 ff9f 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe fec2 	bl	80002e0 <strlen>
 800155c:	4603      	mov	r3, r0
 800155e:	b29a      	uxth	r2, r3
 8001560:	f107 0108 	add.w	r1, r7, #8
 8001564:	230a      	movs	r3, #10
 8001566:	481d      	ldr	r0, [pc, #116]	; (80015dc <printRadioSettings+0x6c0>)
 8001568:	f005 fe9c 	bl	80072a4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 800156c:	2016      	movs	r0, #22
 800156e:	f7ff f989 	bl	8000884 <NRF24_read_register>
 8001572:	4603      	mov	r3, r0
 8001574:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001578:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800157c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	4922      	ldr	r1, [pc, #136]	; (8001610 <printRadioSettings+0x6f4>)
 8001586:	4618      	mov	r0, r3
 8001588:	f006 ff82 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe fea5 	bl	80002e0 <strlen>
 8001596:	4603      	mov	r3, r0
 8001598:	b29a      	uxth	r2, r3
 800159a:	f107 0108 	add.w	r1, r7, #8
 800159e:	230a      	movs	r3, #10
 80015a0:	480e      	ldr	r0, [pc, #56]	; (80015dc <printRadioSettings+0x6c0>)
 80015a2:	f005 fe7f 	bl	80072a4 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80015a6:	201c      	movs	r0, #28
 80015a8:	f7ff f96c 	bl	8000884 <NRF24_read_register>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015b6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bfcc      	ite	gt
 80015be:	2301      	movgt	r3, #1
 80015c0:	2300      	movle	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015ca:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	bfcc      	ite	gt
 80015d2:	2301      	movgt	r3, #1
 80015d4:	2300      	movle	r3, #0
 80015d6:	e01d      	b.n	8001614 <printRadioSettings+0x6f8>
 80015d8:	08008f14 	.word	0x08008f14
 80015dc:	2400013c 	.word	0x2400013c
 80015e0:	08008f28 	.word	0x08008f28
 80015e4:	08008f58 	.word	0x08008f58
 80015e8:	08008f88 	.word	0x08008f88
 80015ec:	08008fb0 	.word	0x08008fb0
 80015f0:	08008fd8 	.word	0x08008fd8
 80015f4:	08009000 	.word	0x08009000
 80015f8:	08009028 	.word	0x08009028
 80015fc:	08009054 	.word	0x08009054
 8001600:	08009070 	.word	0x08009070
 8001604:	0800908c 	.word	0x0800908c
 8001608:	080090a8 	.word	0x080090a8
 800160c:	080090c4 	.word	0x080090c4
 8001610:	080090e0 	.word	0x080090e0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001618:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800161c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001620:	2b00      	cmp	r3, #0
 8001622:	bfcc      	ite	gt
 8001624:	2301      	movgt	r3, #1
 8001626:	2300      	movle	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800162c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001630:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001634:	2b00      	cmp	r3, #0
 8001636:	bfcc      	ite	gt
 8001638:	2301      	movgt	r3, #1
 800163a:	2300      	movle	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001640:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001644:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001648:	2b00      	cmp	r3, #0
 800164a:	bfcc      	ite	gt
 800164c:	2301      	movgt	r3, #1
 800164e:	2300      	movle	r3, #0
 8001650:	b2db      	uxtb	r3, r3
 8001652:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001654:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001658:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800165c:	2b00      	cmp	r3, #0
 800165e:	bfcc      	ite	gt
 8001660:	2301      	movgt	r3, #1
 8001662:	2300      	movle	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f107 0008 	add.w	r0, r7, #8
 800166a:	9303      	str	r3, [sp, #12]
 800166c:	9402      	str	r4, [sp, #8]
 800166e:	9101      	str	r1, [sp, #4]
 8001670:	9200      	str	r2, [sp, #0]
 8001672:	4633      	mov	r3, r6
 8001674:	462a      	mov	r2, r5
 8001676:	4936      	ldr	r1, [pc, #216]	; (8001750 <printRadioSettings+0x834>)
 8001678:	f006 ff0a 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe fe2d 	bl	80002e0 <strlen>
 8001686:	4603      	mov	r3, r0
 8001688:	b29a      	uxth	r2, r3
 800168a:	f107 0108 	add.w	r1, r7, #8
 800168e:	230a      	movs	r3, #10
 8001690:	4830      	ldr	r0, [pc, #192]	; (8001754 <printRadioSettings+0x838>)
 8001692:	f005 fe07 	bl	80072a4 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001696:	201d      	movs	r0, #29
 8001698:	f7ff f8f4 	bl	8000884 <NRF24_read_register>
 800169c:	4603      	mov	r3, r0
 800169e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80016a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d006      	beq.n	80016bc <printRadioSettings+0x7a0>
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	4929      	ldr	r1, [pc, #164]	; (8001758 <printRadioSettings+0x83c>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f006 feeb 	bl	8008490 <siprintf>
 80016ba:	e005      	b.n	80016c8 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	4926      	ldr	r1, [pc, #152]	; (800175c <printRadioSettings+0x840>)
 80016c2:	4618      	mov	r0, r3
 80016c4:	f006 fee4 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe fe07 	bl	80002e0 <strlen>
 80016d2:	4603      	mov	r3, r0
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	f107 0108 	add.w	r1, r7, #8
 80016da:	230a      	movs	r3, #10
 80016dc:	481d      	ldr	r0, [pc, #116]	; (8001754 <printRadioSettings+0x838>)
 80016de:	f005 fde1 	bl	80072a4 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80016e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d006      	beq.n	80016fc <printRadioSettings+0x7e0>
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	491b      	ldr	r1, [pc, #108]	; (8001760 <printRadioSettings+0x844>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f006 fecb 	bl	8008490 <siprintf>
 80016fa:	e005      	b.n	8001708 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	4918      	ldr	r1, [pc, #96]	; (8001764 <printRadioSettings+0x848>)
 8001702:	4618      	mov	r0, r3
 8001704:	f006 fec4 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fde7 	bl	80002e0 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	b29a      	uxth	r2, r3
 8001716:	f107 0108 	add.w	r1, r7, #8
 800171a:	230a      	movs	r3, #10
 800171c:	480d      	ldr	r0, [pc, #52]	; (8001754 <printRadioSettings+0x838>)
 800171e:	f005 fdc1 	bl	80072a4 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001722:	f107 0308 	add.w	r3, r7, #8
 8001726:	4910      	ldr	r1, [pc, #64]	; (8001768 <printRadioSettings+0x84c>)
 8001728:	4618      	mov	r0, r3
 800172a:	f006 feb1 	bl	8008490 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800172e:	f107 0308 	add.w	r3, r7, #8
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fdd4 	bl	80002e0 <strlen>
 8001738:	4603      	mov	r3, r0
 800173a:	b29a      	uxth	r2, r3
 800173c:	f107 0108 	add.w	r1, r7, #8
 8001740:	230a      	movs	r3, #10
 8001742:	4804      	ldr	r0, [pc, #16]	; (8001754 <printRadioSettings+0x838>)
 8001744:	f005 fdae 	bl	80072a4 <HAL_UART_Transmit>
}
 8001748:	bf00      	nop
 800174a:	3774      	adds	r7, #116	; 0x74
 800174c:	46bd      	mov	sp, r7
 800174e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001750:	080090fc 	.word	0x080090fc
 8001754:	2400013c 	.word	0x2400013c
 8001758:	08009148 	.word	0x08009148
 800175c:	08009160 	.word	0x08009160
 8001760:	08009178 	.word	0x08009178
 8001764:	08009194 	.word	0x08009194
 8001768:	08008d68 	.word	0x08008d68

0800176c <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 800176c:	b084      	sub	sp, #16
 800176e:	b580      	push	{r7, lr}
 8001770:	af00      	add	r7, sp, #0
 8001772:	f107 0c08 	add.w	ip, r7, #8
 8001776:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <nrf24_DebugUART_Init+0x2c>)
 800177c:	4618      	mov	r0, r3
 800177e:	f107 0308 	add.w	r3, r7, #8
 8001782:	2290      	movs	r2, #144	; 0x90
 8001784:	4619      	mov	r1, r3
 8001786:	f006 fe6d 	bl	8008464 <memcpy>
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001792:	b004      	add	sp, #16
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	2400013c 	.word	0x2400013c
 800179c:	00000000 	.word	0x00000000

080017a0 <Forward>:

//-----------------------------------------------------------------------------------

//Control de potencia de traccion-----------------------------------------------------

void Forward() {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
	double val = 0.5f;
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	4b25      	ldr	r3, [pc, #148]	; (8001840 <Forward+0xa0>)
 80017ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t arg = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	607b      	str	r3, [r7, #4]
	HAL_Delay(2000);
 80017b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017b8:	f000 fe62 	bl	8002480 <HAL_Delay>
	while (val * 100 < 101) { //Target : 0.1
 80017bc:	e01d      	b.n	80017fa <Forward+0x5a>
		val = val + 0.01f;
 80017be:	ed97 7b02 	vldr	d7, [r7, #8]
 80017c2:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8001820 <Forward+0x80>
 80017c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017ca:	ed87 7b02 	vstr	d7, [r7, #8]
//		arg =  (63999 * 0.070) + (63999 * 0.03 * val);
		arg = (63999 * 0.05) + (63999 * 0.05 * val);
 80017ce:	ed97 7b02 	vldr	d7, [r7, #8]
 80017d2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8001828 <Forward+0x88>
 80017d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017da:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8001828 <Forward+0x88>
 80017de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80017e6:	ee17 3a90 	vmov	r3, s15
 80017ea:	607b      	str	r3, [r7, #4]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, arg);
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <Forward+0xa4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(100);
 80017f4:	2064      	movs	r0, #100	; 0x64
 80017f6:	f000 fe43 	bl	8002480 <HAL_Delay>
	while (val * 100 < 101) { //Target : 0.1
 80017fa:	ed97 7b02 	vldr	d7, [r7, #8]
 80017fe:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001830 <Forward+0x90>
 8001802:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001806:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001838 <Forward+0x98>
 800180a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001812:	d4d4      	bmi.n	80017be <Forward+0x1e>
	}
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40000000 	.word	0x40000000
 8001824:	3f847ae1 	.word	0x3f847ae1
 8001828:	66666667 	.word	0x66666667
 800182c:	40a8ffe6 	.word	0x40a8ffe6
 8001830:	00000000 	.word	0x00000000
 8001834:	40590000 	.word	0x40590000
 8001838:	00000000 	.word	0x00000000
 800183c:	40594000 	.word	0x40594000
 8001840:	3fe00000 	.word	0x3fe00000
 8001844:	24000254 	.word	0x24000254

08001848 <Backward>:

void Backward() {
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
	double val = 0.5f;
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <Backward+0xa8>)
 8001854:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t arg = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	607b      	str	r3, [r7, #4]
	HAL_Delay(2000);
 800185c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001860:	f000 fe0e 	bl	8002480 <HAL_Delay>
	while (val * 100 < 101) { //Target : 0.05
 8001864:	e01d      	b.n	80018a2 <Backward+0x5a>
		val = val + 0.01f;
 8001866:	ed97 7b02 	vldr	d7, [r7, #8]
 800186a:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80018c8 <Backward+0x80>
 800186e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001872:	ed87 7b02 	vstr	d7, [r7, #8]
		arg = (63999 * 0.075) - (63999 * 0.025 * val);
 8001876:	ed97 7b02 	vldr	d7, [r7, #8]
 800187a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80018d0 <Backward+0x88>
 800187e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001882:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80018d8 <Backward+0x90>
 8001886:	ee36 7b47 	vsub.f64	d7, d6, d7
 800188a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800188e:	ee17 3a90 	vmov	r3, s15
 8001892:	607b      	str	r3, [r7, #4]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, arg);
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <Backward+0xac>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(100);
 800189c:	2064      	movs	r0, #100	; 0x64
 800189e:	f000 fdef 	bl	8002480 <HAL_Delay>
	while (val * 100 < 101) { //Target : 0.05
 80018a2:	ed97 7b02 	vldr	d7, [r7, #8]
 80018a6:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 80018e0 <Backward+0x98>
 80018aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018ae:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 80018e8 <Backward+0xa0>
 80018b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80018b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ba:	d4d4      	bmi.n	8001866 <Backward+0x1e>
	}
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40000000 	.word	0x40000000
 80018cc:	3f847ae1 	.word	0x3f847ae1
 80018d0:	66666667 	.word	0x66666667
 80018d4:	4098ffe6 	.word	0x4098ffe6
 80018d8:	cccccccd 	.word	0xcccccccd
 80018dc:	40b2bfec 	.word	0x40b2bfec
 80018e0:	00000000 	.word	0x00000000
 80018e4:	40590000 	.word	0x40590000
 80018e8:	00000000 	.word	0x00000000
 80018ec:	40594000 	.word	0x40594000
 80018f0:	3fe00000 	.word	0x3fe00000
 80018f4:	24000254 	.word	0x24000254

080018f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b0a5      	sub	sp, #148	; 0x94
 80018fc:	af22      	add	r7, sp, #136	; 0x88
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80018fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001902:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8001904:	bf00      	nop
 8001906:	4b44      	ldr	r3, [pc, #272]	; (8001a18 <main+0x120>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d004      	beq.n	800191c <main+0x24>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	1e5a      	subs	r2, r3, #1
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	dcf4      	bgt.n	8001906 <main+0xe>
		;
	if (timeout < 0) {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	da01      	bge.n	8001926 <main+0x2e>
		Error_Handler();
 8001922:	f000 fb0b 	bl	8001f3c <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001926:	f000 fd19 	bl	800235c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800192a:	f000 f883 	bl	8001a34 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800192e:	4b3a      	ldr	r3, [pc, #232]	; (8001a18 <main+0x120>)
 8001930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001934:	4a38      	ldr	r2, [pc, #224]	; (8001a18 <main+0x120>)
 8001936:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800193a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800193e:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <main+0x120>)
 8001940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800194c:	2000      	movs	r0, #0
 800194e:	f001 f875 	bl	8002a3c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8001952:	2100      	movs	r1, #0
 8001954:	2000      	movs	r0, #0
 8001956:	f001 f88b 	bl	8002a70 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800195a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800195e:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8001960:	bf00      	nop
 8001962:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <main+0x120>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d104      	bne.n	8001978 <main+0x80>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	1e5a      	subs	r2, r3, #1
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	dcf4      	bgt.n	8001962 <main+0x6a>
		;
	if (timeout < 0) {
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	da01      	bge.n	8001982 <main+0x8a>
		Error_Handler();
 800197e:	f000 fadd 	bl	8001f3c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001982:	f000 fa61 	bl	8001e48 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001986:	f000 fa13 	bl	8001db0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800198a:	f000 f923 	bl	8001bd4 <MX_TIM2_Init>
  MX_SPI5_Init();
 800198e:	f000 f8cb 	bl	8001b28 <MX_SPI5_Init>
  MX_TIM3_Init();
 8001992:	f000 f995 	bl	8001cc0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001996:	2100      	movs	r1, #0
 8001998:	4820      	ldr	r0, [pc, #128]	; (8001a1c <main+0x124>)
 800199a:	f004 fc57 	bl	800624c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800199e:	210c      	movs	r1, #12
 80019a0:	481f      	ldr	r0, [pc, #124]	; (8001a20 <main+0x128>)
 80019a2:	f004 fc53 	bl	800624c <HAL_TIM_PWM_Start>
	//NO ACK
	NRF24_begin(GPIOD, GPIO_PIN_6, GPIO_PIN_7, hspi5);
 80019a6:	4c1f      	ldr	r4, [pc, #124]	; (8001a24 <main+0x12c>)
 80019a8:	4668      	mov	r0, sp
 80019aa:	1d23      	adds	r3, r4, #4
 80019ac:	2284      	movs	r2, #132	; 0x84
 80019ae:	4619      	mov	r1, r3
 80019b0:	f006 fd58 	bl	8008464 <memcpy>
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	2140      	movs	r1, #64	; 0x40
 80019ba:	481b      	ldr	r0, [pc, #108]	; (8001a28 <main+0x130>)
 80019bc:	f7ff f80c 	bl	80009d8 <NRF24_begin>
	nrf24_DebugUART_Init(huart3);
 80019c0:	4c1a      	ldr	r4, [pc, #104]	; (8001a2c <main+0x134>)
 80019c2:	4668      	mov	r0, sp
 80019c4:	f104 0310 	add.w	r3, r4, #16
 80019c8:	2280      	movs	r2, #128	; 0x80
 80019ca:	4619      	mov	r1, r3
 80019cc:	f006 fd4a 	bl	8008464 <memcpy>
 80019d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019d4:	f7ff feca 	bl	800176c <nrf24_DebugUART_Init>

	printRadioSettings();
 80019d8:	f7ff faa0 	bl	8000f1c <printRadioSettings>

	NRF24_setAutoAck(false);
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff f9af 	bl	8000d40 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 80019e2:	2034      	movs	r0, #52	; 0x34
 80019e4:	f7ff f967 	bl	8000cb6 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 80019e8:	2020      	movs	r0, #32
 80019ea:	f7ff f979 	bl	8000ce0 <NRF24_setPayloadSize>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <main+0x138>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	2001      	movs	r0, #1
 80019f6:	f7ff f8f5 	bl	8000be4 <NRF24_openReadingPipe>
	NRF24_startListening();
 80019fa:	f7ff f8cd 	bl	8000b98 <NRF24_startListening>
//		HAL_Delay(500);
//		rotate(-25);
//		HAL_Delay(500);


		Forward();
 80019fe:	f7ff fecf 	bl	80017a0 <Forward>
		HAL_Delay(2000);
 8001a02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a06:	f000 fd3b 	bl	8002480 <HAL_Delay>
		Backward();
 8001a0a:	f7ff ff1d 	bl	8001848 <Backward>
		HAL_Delay(2000);
 8001a0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a12:	f000 fd35 	bl	8002480 <HAL_Delay>
		Forward();
 8001a16:	e7f2      	b.n	80019fe <main+0x106>
 8001a18:	58024400 	.word	0x58024400
 8001a1c:	24000254 	.word	0x24000254
 8001a20:	240002a0 	.word	0x240002a0
 8001a24:	240001cc 	.word	0x240001cc
 8001a28:	58020c00 	.word	0x58020c00
 8001a2c:	240002ec 	.word	0x240002ec
 8001a30:	24000008 	.word	0x24000008

08001a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b09c      	sub	sp, #112	; 0x70
 8001a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3e:	224c      	movs	r2, #76	; 0x4c
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f006 fd1c 	bl	8008480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f006 fd16 	bl	8008480 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001a54:	2004      	movs	r0, #4
 8001a56:	f001 f81f 	bl	8002a98 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	4b30      	ldr	r3, [pc, #192]	; (8001b20 <SystemClock_Config+0xec>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	4a2f      	ldr	r2, [pc, #188]	; (8001b20 <SystemClock_Config+0xec>)
 8001a64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a68:	6193      	str	r3, [r2, #24]
 8001a6a:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <SystemClock_Config+0xec>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <SystemClock_Config+0xf0>)
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	4a2a      	ldr	r2, [pc, #168]	; (8001b24 <SystemClock_Config+0xf0>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001a80:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <SystemClock_Config+0xf0>)
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a8c:	bf00      	nop
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <SystemClock_Config+0xec>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a9a:	d1f8      	bne.n	8001a8e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001aa0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001ab2:	23f0      	movs	r3, #240	; 0xf0
 8001ab4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001aba:	2302      	movs	r3, #2
 8001abc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f001 f83a 	bl	8002b4c <HAL_RCC_OscConfig>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001ade:	f000 fa2d 	bl	8001f3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae2:	233f      	movs	r3, #63	; 0x3f
 8001ae4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001aee:	2308      	movs	r3, #8
 8001af0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001af2:	2340      	movs	r3, #64	; 0x40
 8001af4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001af6:	2340      	movs	r3, #64	; 0x40
 8001af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001afe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b00:	2340      	movs	r3, #64	; 0x40
 8001b02:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2104      	movs	r1, #4
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f001 fc4d 	bl	80033a8 <HAL_RCC_ClockConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001b14:	f000 fa12 	bl	8001f3c <Error_Handler>
  }
}
 8001b18:	bf00      	nop
 8001b1a:	3770      	adds	r7, #112	; 0x70
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	58024800 	.word	0x58024800
 8001b24:	58000400 	.word	0x58000400

08001b28 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001b2e:	4a28      	ldr	r2, [pc, #160]	; (8001bd0 <MX_SPI5_Init+0xa8>)
 8001b30:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001b34:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b38:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8001b40:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001b42:	2203      	movs	r2, #3
 8001b44:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b46:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001b52:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001b54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b58:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b60:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b66:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8001b72:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001b7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b7e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001bb6:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_SPI5_Init+0xa4>)
 8001bb8:	f003 faea 	bl	8005190 <HAL_SPI_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 8001bc2:	f000 f9bb 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	240001cc 	.word	0x240001cc
 8001bd0:	40015000 	.word	0x40015000

08001bd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08e      	sub	sp, #56	; 0x38
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	615a      	str	r2, [r3, #20]
 8001c04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c06:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 74;
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c10:	224a      	movs	r2, #74	; 0x4a
 8001c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c14:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8001c1a:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c1c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001c20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c22:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c2e:	4823      	ldr	r0, [pc, #140]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c30:	f004 fa53 	bl	80060da <HAL_TIM_Base_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001c3a:	f000 f97f 	bl	8001f3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c48:	4619      	mov	r1, r3
 8001c4a:	481c      	ldr	r0, [pc, #112]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c4c:	f004 fd20 	bl	8006690 <HAL_TIM_ConfigClockSource>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001c56:	f000 f971 	bl	8001f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c5a:	4818      	ldr	r0, [pc, #96]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c5c:	f004 fa94 	bl	8006188 <HAL_TIM_PWM_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001c66:	f000 f969 	bl	8001f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	4619      	mov	r1, r3
 8001c78:	4810      	ldr	r0, [pc, #64]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c7a:	f005 fa35 	bl	80070e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001c84:	f000 f95a 	bl	8001f3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c88:	2360      	movs	r3, #96	; 0x60
 8001c8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c98:	463b      	mov	r3, r7
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4807      	ldr	r0, [pc, #28]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001ca0:	f004 fbe2 	bl	8006468 <HAL_TIM_PWM_ConfigChannel>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001caa:	f000 f947 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cae:	4803      	ldr	r0, [pc, #12]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001cb0:	f000 fa02 	bl	80020b8 <HAL_TIM_MspPostInit>

}
 8001cb4:	bf00      	nop
 8001cb6:	3738      	adds	r7, #56	; 0x38
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	24000254 	.word	0x24000254

08001cc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08e      	sub	sp, #56	; 0x38
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]
 8001cec:	611a      	str	r2, [r3, #16]
 8001cee:	615a      	str	r2, [r3, #20]
 8001cf0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cf2:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <MX_TIM3_Init+0xe8>)
 8001cf4:	4a2d      	ldr	r2, [pc, #180]	; (8001dac <MX_TIM3_Init+0xec>)
 8001cf6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 74;
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <MX_TIM3_Init+0xe8>)
 8001cfa:	224a      	movs	r2, #74	; 0x4a
 8001cfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <MX_TIM3_Init+0xe8>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 8001d04:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <MX_TIM3_Init+0xe8>)
 8001d06:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001d0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0c:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <MX_TIM3_Init+0xe8>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d12:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <MX_TIM3_Init+0xe8>)
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d18:	4823      	ldr	r0, [pc, #140]	; (8001da8 <MX_TIM3_Init+0xe8>)
 8001d1a:	f004 f9de 	bl	80060da <HAL_TIM_Base_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001d24:	f000 f90a 	bl	8001f3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d32:	4619      	mov	r1, r3
 8001d34:	481c      	ldr	r0, [pc, #112]	; (8001da8 <MX_TIM3_Init+0xe8>)
 8001d36:	f004 fcab 	bl	8006690 <HAL_TIM_ConfigClockSource>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001d40:	f000 f8fc 	bl	8001f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d44:	4818      	ldr	r0, [pc, #96]	; (8001da8 <MX_TIM3_Init+0xe8>)
 8001d46:	f004 fa1f 	bl	8006188 <HAL_TIM_PWM_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001d50:	f000 f8f4 	bl	8001f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	4619      	mov	r1, r3
 8001d62:	4811      	ldr	r0, [pc, #68]	; (8001da8 <MX_TIM3_Init+0xe8>)
 8001d64:	f005 f9c0 	bl	80070e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001d6e:	f000 f8e5 	bl	8001f3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d72:	2360      	movs	r3, #96	; 0x60
 8001d74:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d82:	463b      	mov	r3, r7
 8001d84:	220c      	movs	r2, #12
 8001d86:	4619      	mov	r1, r3
 8001d88:	4807      	ldr	r0, [pc, #28]	; (8001da8 <MX_TIM3_Init+0xe8>)
 8001d8a:	f004 fb6d 	bl	8006468 <HAL_TIM_PWM_ConfigChannel>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001d94:	f000 f8d2 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d98:	4803      	ldr	r0, [pc, #12]	; (8001da8 <MX_TIM3_Init+0xe8>)
 8001d9a:	f000 f98d 	bl	80020b8 <HAL_TIM_MspPostInit>

}
 8001d9e:	bf00      	nop
 8001da0:	3738      	adds	r7, #56	; 0x38
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	240002a0 	.word	0x240002a0
 8001dac:	40000400 	.word	0x40000400

08001db0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001db4:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <MX_USART3_UART_Init+0x90>)
 8001db6:	4a23      	ldr	r2, [pc, #140]	; (8001e44 <MX_USART3_UART_Init+0x94>)
 8001db8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <MX_USART3_UART_Init+0x90>)
 8001dbc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001dc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <MX_USART3_UART_Init+0x90>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <MX_USART3_UART_Init+0x90>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <MX_USART3_UART_Init+0x90>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <MX_USART3_UART_Init+0x90>)
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <MX_USART3_UART_Init+0x90>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <MX_USART3_UART_Init+0x90>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <MX_USART3_UART_Init+0x90>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dec:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <MX_USART3_UART_Init+0x90>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <MX_USART3_UART_Init+0x90>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001df8:	4811      	ldr	r0, [pc, #68]	; (8001e40 <MX_USART3_UART_Init+0x90>)
 8001dfa:	f005 fa03 	bl	8007204 <HAL_UART_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e04:	f000 f89a 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e08:	2100      	movs	r1, #0
 8001e0a:	480d      	ldr	r0, [pc, #52]	; (8001e40 <MX_USART3_UART_Init+0x90>)
 8001e0c:	f006 fa36 	bl	800827c <HAL_UARTEx_SetTxFifoThreshold>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001e16:	f000 f891 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4808      	ldr	r0, [pc, #32]	; (8001e40 <MX_USART3_UART_Init+0x90>)
 8001e1e:	f006 fa6b 	bl	80082f8 <HAL_UARTEx_SetRxFifoThreshold>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001e28:	f000 f888 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e2c:	4804      	ldr	r0, [pc, #16]	; (8001e40 <MX_USART3_UART_Init+0x90>)
 8001e2e:	f006 f9ec 	bl	800820a <HAL_UARTEx_DisableFifoMode>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001e38:	f000 f880 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	240002ec 	.word	0x240002ec
 8001e44:	40004800 	.word	0x40004800

08001e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	; 0x30
 8001e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4e:	f107 031c 	add.w	r3, r7, #28
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5e:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <MX_GPIO_Init+0xec>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e64:	4a33      	ldr	r2, [pc, #204]	; (8001f34 <MX_GPIO_Init+0xec>)
 8001e66:	f043 0304 	orr.w	r3, r3, #4
 8001e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e6e:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <MX_GPIO_Init+0xec>)
 8001e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e7c:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <MX_GPIO_Init+0xec>)
 8001e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e82:	4a2c      	ldr	r2, [pc, #176]	; (8001f34 <MX_GPIO_Init+0xec>)
 8001e84:	f043 0320 	orr.w	r3, r3, #32
 8001e88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e8c:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <MX_GPIO_Init+0xec>)
 8001e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <MX_GPIO_Init+0xec>)
 8001e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea0:	4a24      	ldr	r2, [pc, #144]	; (8001f34 <MX_GPIO_Init+0xec>)
 8001ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eaa:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <MX_GPIO_Init+0xec>)
 8001eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb8:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <MX_GPIO_Init+0xec>)
 8001eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ebe:	4a1d      	ldr	r2, [pc, #116]	; (8001f34 <MX_GPIO_Init+0xec>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <MX_GPIO_Init+0xec>)
 8001eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <MX_GPIO_Init+0xec>)
 8001ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001edc:	4a15      	ldr	r2, [pc, #84]	; (8001f34 <MX_GPIO_Init+0xec>)
 8001ede:	f043 0302 	orr.w	r3, r3, #2
 8001ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <MX_GPIO_Init+0xec>)
 8001ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <MX_GPIO_Init+0xec>)
 8001ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efa:	4a0e      	ldr	r2, [pc, #56]	; (8001f34 <MX_GPIO_Init+0xec>)
 8001efc:	f043 0308 	orr.w	r3, r3, #8
 8001f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <MX_GPIO_Init+0xec>)
 8001f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f20:	f107 031c 	add.w	r3, r7, #28
 8001f24:	4619      	mov	r1, r3
 8001f26:	4804      	ldr	r0, [pc, #16]	; (8001f38 <MX_GPIO_Init+0xf0>)
 8001f28:	f000 fbbe 	bl	80026a8 <HAL_GPIO_Init>

}
 8001f2c:	bf00      	nop
 8001f2e:	3730      	adds	r7, #48	; 0x30
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	58024400 	.word	0x58024400
 8001f38:	58020800 	.word	0x58020800

08001f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f40:	b672      	cpsid	i
}
 8001f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f44:	e7fe      	b.n	8001f44 <Error_Handler+0x8>
	...

08001f48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_MspInit+0x30>)
 8001f50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f54:	4a08      	ldr	r2, [pc, #32]	; (8001f78 <HAL_MspInit+0x30>)
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_MspInit+0x30>)
 8001f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	58024400 	.word	0x58024400

08001f7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b0b8      	sub	sp, #224	; 0xe0
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f94:	f107 0310 	add.w	r3, r7, #16
 8001f98:	22bc      	movs	r2, #188	; 0xbc
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f006 fa6f 	bl	8008480 <memset>
  if(hspi->Instance==SPI5)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a25      	ldr	r2, [pc, #148]	; (800203c <HAL_SPI_MspInit+0xc0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d142      	bne.n	8002032 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8001fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fb0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fb6:	f107 0310 	add.w	r3, r7, #16
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f001 fd80 	bl	8003ac0 <HAL_RCCEx_PeriphCLKConfig>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001fc6:	f7ff ffb9 	bl	8001f3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001fca:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_SPI_MspInit+0xc4>)
 8001fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fd0:	4a1b      	ldr	r2, [pc, #108]	; (8002040 <HAL_SPI_MspInit+0xc4>)
 8001fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001fda:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_SPI_MspInit+0xc4>)
 8001fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_SPI_MspInit+0xc4>)
 8001fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fee:	4a14      	ldr	r2, [pc, #80]	; (8002040 <HAL_SPI_MspInit+0xc4>)
 8001ff0:	f043 0320 	orr.w	r3, r3, #32
 8001ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_SPI_MspInit+0xc4>)
 8001ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002006:	f44f 7360 	mov.w	r3, #896	; 0x380
 800200a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002020:	2305      	movs	r3, #5
 8002022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002026:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	; (8002044 <HAL_SPI_MspInit+0xc8>)
 800202e:	f000 fb3b 	bl	80026a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002032:	bf00      	nop
 8002034:	37e0      	adds	r7, #224	; 0xe0
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40015000 	.word	0x40015000
 8002040:	58024400 	.word	0x58024400
 8002044:	58021400 	.word	0x58021400

08002048 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002058:	d10f      	bne.n	800207a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_TIM_Base_MspInit+0x68>)
 800205c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002060:	4a13      	ldr	r2, [pc, #76]	; (80020b0 <HAL_TIM_Base_MspInit+0x68>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <HAL_TIM_Base_MspInit+0x68>)
 800206c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002078:	e013      	b.n	80020a2 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <HAL_TIM_Base_MspInit+0x6c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d10e      	bne.n	80020a2 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_TIM_Base_MspInit+0x68>)
 8002086:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800208a:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <HAL_TIM_Base_MspInit+0x68>)
 800208c:	f043 0302 	orr.w	r3, r3, #2
 8002090:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_TIM_Base_MspInit+0x68>)
 8002096:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	58024400 	.word	0x58024400
 80020b4:	40000400 	.word	0x40000400

080020b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d8:	d11f      	bne.n	800211a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020da:	4b24      	ldr	r3, [pc, #144]	; (800216c <HAL_TIM_MspPostInit+0xb4>)
 80020dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e0:	4a22      	ldr	r2, [pc, #136]	; (800216c <HAL_TIM_MspPostInit+0xb4>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ea:	4b20      	ldr	r3, [pc, #128]	; (800216c <HAL_TIM_MspPostInit+0xb4>)
 80020ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020f8:	2301      	movs	r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002108:	2301      	movs	r3, #1
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	4619      	mov	r1, r3
 8002112:	4817      	ldr	r0, [pc, #92]	; (8002170 <HAL_TIM_MspPostInit+0xb8>)
 8002114:	f000 fac8 	bl	80026a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002118:	e023      	b.n	8002162 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a15      	ldr	r2, [pc, #84]	; (8002174 <HAL_TIM_MspPostInit+0xbc>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d11e      	bne.n	8002162 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_TIM_MspPostInit+0xb4>)
 8002126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212a:	4a10      	ldr	r2, [pc, #64]	; (800216c <HAL_TIM_MspPostInit+0xb4>)
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002134:	4b0d      	ldr	r3, [pc, #52]	; (800216c <HAL_TIM_MspPostInit+0xb4>)
 8002136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002142:	2302      	movs	r3, #2
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002152:	2302      	movs	r3, #2
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	4806      	ldr	r0, [pc, #24]	; (8002178 <HAL_TIM_MspPostInit+0xc0>)
 800215e:	f000 faa3 	bl	80026a8 <HAL_GPIO_Init>
}
 8002162:	bf00      	nop
 8002164:	3728      	adds	r7, #40	; 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	58024400 	.word	0x58024400
 8002170:	58020000 	.word	0x58020000
 8002174:	40000400 	.word	0x40000400
 8002178:	58020400 	.word	0x58020400

0800217c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b0b8      	sub	sp, #224	; 0xe0
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002194:	f107 0310 	add.w	r3, r7, #16
 8002198:	22bc      	movs	r2, #188	; 0xbc
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f006 f96f 	bl	8008480 <memset>
  if(huart->Instance==USART3)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a25      	ldr	r2, [pc, #148]	; (800223c <HAL_UART_MspInit+0xc0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d142      	bne.n	8002232 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021ac:	2302      	movs	r3, #2
 80021ae:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b6:	f107 0310 	add.w	r3, r7, #16
 80021ba:	4618      	mov	r0, r3
 80021bc:	f001 fc80 	bl	8003ac0 <HAL_RCCEx_PeriphCLKConfig>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021c6:	f7ff feb9 	bl	8001f3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_UART_MspInit+0xc4>)
 80021cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021d0:	4a1b      	ldr	r2, [pc, #108]	; (8002240 <HAL_UART_MspInit+0xc4>)
 80021d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_UART_MspInit+0xc4>)
 80021dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e8:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_UART_MspInit+0xc4>)
 80021ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ee:	4a14      	ldr	r2, [pc, #80]	; (8002240 <HAL_UART_MspInit+0xc4>)
 80021f0:	f043 0308 	orr.w	r3, r3, #8
 80021f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <HAL_UART_MspInit+0xc4>)
 80021fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002206:	f44f 7340 	mov.w	r3, #768	; 0x300
 800220a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221a:	2300      	movs	r3, #0
 800221c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002220:	2307      	movs	r3, #7
 8002222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002226:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800222a:	4619      	mov	r1, r3
 800222c:	4805      	ldr	r0, [pc, #20]	; (8002244 <HAL_UART_MspInit+0xc8>)
 800222e:	f000 fa3b 	bl	80026a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002232:	bf00      	nop
 8002234:	37e0      	adds	r7, #224	; 0xe0
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40004800 	.word	0x40004800
 8002240:	58024400 	.word	0x58024400
 8002244:	58020c00 	.word	0x58020c00

08002248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800224c:	e7fe      	b.n	800224c <NMI_Handler+0x4>

0800224e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002252:	e7fe      	b.n	8002252 <HardFault_Handler+0x4>

08002254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002258:	e7fe      	b.n	8002258 <MemManage_Handler+0x4>

0800225a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800225e:	e7fe      	b.n	800225e <BusFault_Handler+0x4>

08002260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <UsageFault_Handler+0x4>

08002266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002294:	f000 f8d4 	bl	8002440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}

0800229c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a4:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <_sbrk+0x5c>)
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <_sbrk+0x60>)
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b0:	4b13      	ldr	r3, [pc, #76]	; (8002300 <_sbrk+0x64>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d102      	bne.n	80022be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <_sbrk+0x64>)
 80022ba:	4a12      	ldr	r2, [pc, #72]	; (8002304 <_sbrk+0x68>)
 80022bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <_sbrk+0x64>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d207      	bcs.n	80022dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022cc:	f006 f8a0 	bl	8008410 <__errno>
 80022d0:	4603      	mov	r3, r0
 80022d2:	220c      	movs	r2, #12
 80022d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295
 80022da:	e009      	b.n	80022f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022dc:	4b08      	ldr	r3, [pc, #32]	; (8002300 <_sbrk+0x64>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022e2:	4b07      	ldr	r3, [pc, #28]	; (8002300 <_sbrk+0x64>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	4a05      	ldr	r2, [pc, #20]	; (8002300 <_sbrk+0x64>)
 80022ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ee:	68fb      	ldr	r3, [r7, #12]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	24080000 	.word	0x24080000
 80022fc:	00000400 	.word	0x00000400
 8002300:	2400037c 	.word	0x2400037c
 8002304:	24000398 	.word	0x24000398

08002308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002340 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800230c:	f7fe f9c2 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002310:	480c      	ldr	r0, [pc, #48]	; (8002344 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002312:	490d      	ldr	r1, [pc, #52]	; (8002348 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002314:	4a0d      	ldr	r2, [pc, #52]	; (800234c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002318:	e002      	b.n	8002320 <LoopCopyDataInit>

0800231a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800231a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800231c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231e:	3304      	adds	r3, #4

08002320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002324:	d3f9      	bcc.n	800231a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002328:	4c0a      	ldr	r4, [pc, #40]	; (8002354 <LoopFillZerobss+0x22>)
  movs r3, #0
 800232a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800232c:	e001      	b.n	8002332 <LoopFillZerobss>

0800232e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002330:	3204      	adds	r2, #4

08002332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002334:	d3fb      	bcc.n	800232e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002336:	f006 f871 	bl	800841c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800233a:	f7ff fadd 	bl	80018f8 <main>
  bx  lr
 800233e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002340:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002344:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002348:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 800234c:	08009398 	.word	0x08009398
  ldr r2, =_sbss
 8002350:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8002354:	24000394 	.word	0x24000394

08002358 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002358:	e7fe      	b.n	8002358 <ADC3_IRQHandler>
	...

0800235c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002362:	2003      	movs	r0, #3
 8002364:	f000 f96e 	bl	8002644 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002368:	f001 f9d4 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <HAL_Init+0x68>)
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	4913      	ldr	r1, [pc, #76]	; (80023c8 <HAL_Init+0x6c>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002386:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <HAL_Init+0x68>)
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	4a0e      	ldr	r2, [pc, #56]	; (80023c8 <HAL_Init+0x6c>)
 8002390:	5cd3      	ldrb	r3, [r2, r3]
 8002392:	f003 031f 	and.w	r3, r3, #31
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
 800239c:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <HAL_Init+0x70>)
 800239e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023a0:	4a0b      	ldr	r2, [pc, #44]	; (80023d0 <HAL_Init+0x74>)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023a6:	200f      	movs	r0, #15
 80023a8:	f000 f814 	bl	80023d4 <HAL_InitTick>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e002      	b.n	80023bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023b6:	f7ff fdc7 	bl	8001f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	58024400 	.word	0x58024400
 80023c8:	080092ac 	.word	0x080092ac
 80023cc:	24000004 	.word	0x24000004
 80023d0:	24000000 	.word	0x24000000

080023d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023dc:	4b15      	ldr	r3, [pc, #84]	; (8002434 <HAL_InitTick+0x60>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e021      	b.n	800242c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_InitTick+0x64>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b11      	ldr	r3, [pc, #68]	; (8002434 <HAL_InitTick+0x60>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	4619      	mov	r1, r3
 80023f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f945 	bl	800268e <HAL_SYSTICK_Config>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e00e      	b.n	800242c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b0f      	cmp	r3, #15
 8002412:	d80a      	bhi.n	800242a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002414:	2200      	movs	r2, #0
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
 800241c:	f000 f91d 	bl	800265a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002420:	4a06      	ldr	r2, [pc, #24]	; (800243c <HAL_InitTick+0x68>)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e000      	b.n	800242c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	24000014 	.word	0x24000014
 8002438:	24000000 	.word	0x24000000
 800243c:	24000010 	.word	0x24000010

08002440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_IncTick+0x20>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_IncTick+0x24>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4413      	add	r3, r2
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <HAL_IncTick+0x24>)
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	24000014 	.word	0x24000014
 8002464:	24000380 	.word	0x24000380

08002468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return uwTick;
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <HAL_GetTick+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	24000380 	.word	0x24000380

08002480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002488:	f7ff ffee 	bl	8002468 <HAL_GetTick>
 800248c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002498:	d005      	beq.n	80024a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_Delay+0x44>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024a6:	bf00      	nop
 80024a8:	f7ff ffde 	bl	8002468 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d8f7      	bhi.n	80024a8 <HAL_Delay+0x28>
  {
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	24000014 	.word	0x24000014

080024c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_GetREVID+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0c1b      	lsrs	r3, r3, #16
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	5c001000 	.word	0x5c001000

080024e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <__NVIC_SetPriorityGrouping+0x40>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024fc:	4013      	ands	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <__NVIC_SetPriorityGrouping+0x44>)
 800250a:	4313      	orrs	r3, r2
 800250c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800250e:	4a04      	ldr	r2, [pc, #16]	; (8002520 <__NVIC_SetPriorityGrouping+0x40>)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	60d3      	str	r3, [r2, #12]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00
 8002524:	05fa0000 	.word	0x05fa0000

08002528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <__NVIC_GetPriorityGrouping+0x18>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	f003 0307 	and.w	r3, r3, #7
}
 8002536:	4618      	mov	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002550:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002554:	2b00      	cmp	r3, #0
 8002556:	db0a      	blt.n	800256e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	490c      	ldr	r1, [pc, #48]	; (8002590 <__NVIC_SetPriority+0x4c>)
 800255e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002562:	0112      	lsls	r2, r2, #4
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	440b      	add	r3, r1
 8002568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800256c:	e00a      	b.n	8002584 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4908      	ldr	r1, [pc, #32]	; (8002594 <__NVIC_SetPriority+0x50>)
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	3b04      	subs	r3, #4
 800257c:	0112      	lsls	r2, r2, #4
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	440b      	add	r3, r1
 8002582:	761a      	strb	r2, [r3, #24]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000e100 	.word	0xe000e100
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	; 0x24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f1c3 0307 	rsb	r3, r3, #7
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	bf28      	it	cs
 80025b6:	2304      	movcs	r3, #4
 80025b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3304      	adds	r3, #4
 80025be:	2b06      	cmp	r3, #6
 80025c0:	d902      	bls.n	80025c8 <NVIC_EncodePriority+0x30>
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3b03      	subs	r3, #3
 80025c6:	e000      	b.n	80025ca <NVIC_EncodePriority+0x32>
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	f04f 32ff 	mov.w	r2, #4294967295
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	401a      	ands	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e0:	f04f 31ff 	mov.w	r1, #4294967295
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43d9      	mvns	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	4313      	orrs	r3, r2
         );
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3724      	adds	r7, #36	; 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002610:	d301      	bcc.n	8002616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002612:	2301      	movs	r3, #1
 8002614:	e00f      	b.n	8002636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002616:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <SysTick_Config+0x40>)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3b01      	subs	r3, #1
 800261c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800261e:	210f      	movs	r1, #15
 8002620:	f04f 30ff 	mov.w	r0, #4294967295
 8002624:	f7ff ff8e 	bl	8002544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <SysTick_Config+0x40>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800262e:	4b04      	ldr	r3, [pc, #16]	; (8002640 <SysTick_Config+0x40>)
 8002630:	2207      	movs	r2, #7
 8002632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	e000e010 	.word	0xe000e010

08002644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff ff47 	bl	80024e0 <__NVIC_SetPriorityGrouping>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002668:	f7ff ff5e 	bl	8002528 <__NVIC_GetPriorityGrouping>
 800266c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	6978      	ldr	r0, [r7, #20]
 8002674:	f7ff ff90 	bl	8002598 <NVIC_EncodePriority>
 8002678:	4602      	mov	r2, r0
 800267a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff5f 	bl	8002544 <__NVIC_SetPriority>
}
 8002686:	bf00      	nop
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ffb2 	bl	8002600 <SysTick_Config>
 800269c:	4603      	mov	r3, r0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80026b6:	4b89      	ldr	r3, [pc, #548]	; (80028dc <HAL_GPIO_Init+0x234>)
 80026b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026ba:	e194      	b.n	80029e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	2101      	movs	r1, #1
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	fa01 f303 	lsl.w	r3, r1, r3
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 8186 	beq.w	80029e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d005      	beq.n	80026ec <HAL_GPIO_Init+0x44>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d130      	bne.n	800274e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2203      	movs	r2, #3
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002722:	2201      	movs	r2, #1
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	f003 0201 	and.w	r2, r3, #1
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b03      	cmp	r3, #3
 8002758:	d017      	beq.n	800278a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	2203      	movs	r2, #3
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d123      	bne.n	80027de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	08da      	lsrs	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3208      	adds	r2, #8
 800279e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	220f      	movs	r2, #15
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	691a      	ldr	r2, [r3, #16]
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	08da      	lsrs	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3208      	adds	r2, #8
 80027d8:	69b9      	ldr	r1, [r7, #24]
 80027da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	2203      	movs	r2, #3
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0203 	and.w	r2, r3, #3
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 80e0 	beq.w	80029e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002820:	4b2f      	ldr	r3, [pc, #188]	; (80028e0 <HAL_GPIO_Init+0x238>)
 8002822:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002826:	4a2e      	ldr	r2, [pc, #184]	; (80028e0 <HAL_GPIO_Init+0x238>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002830:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_GPIO_Init+0x238>)
 8002832:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800283e:	4a29      	ldr	r2, [pc, #164]	; (80028e4 <HAL_GPIO_Init+0x23c>)
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	3302      	adds	r3, #2
 8002846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	220f      	movs	r2, #15
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a20      	ldr	r2, [pc, #128]	; (80028e8 <HAL_GPIO_Init+0x240>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d052      	beq.n	8002910 <HAL_GPIO_Init+0x268>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <HAL_GPIO_Init+0x244>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d031      	beq.n	80028d6 <HAL_GPIO_Init+0x22e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a1e      	ldr	r2, [pc, #120]	; (80028f0 <HAL_GPIO_Init+0x248>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d02b      	beq.n	80028d2 <HAL_GPIO_Init+0x22a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a1d      	ldr	r2, [pc, #116]	; (80028f4 <HAL_GPIO_Init+0x24c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d025      	beq.n	80028ce <HAL_GPIO_Init+0x226>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a1c      	ldr	r2, [pc, #112]	; (80028f8 <HAL_GPIO_Init+0x250>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d01f      	beq.n	80028ca <HAL_GPIO_Init+0x222>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a1b      	ldr	r2, [pc, #108]	; (80028fc <HAL_GPIO_Init+0x254>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d019      	beq.n	80028c6 <HAL_GPIO_Init+0x21e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a1a      	ldr	r2, [pc, #104]	; (8002900 <HAL_GPIO_Init+0x258>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_GPIO_Init+0x21a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a19      	ldr	r2, [pc, #100]	; (8002904 <HAL_GPIO_Init+0x25c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00d      	beq.n	80028be <HAL_GPIO_Init+0x216>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a18      	ldr	r2, [pc, #96]	; (8002908 <HAL_GPIO_Init+0x260>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d007      	beq.n	80028ba <HAL_GPIO_Init+0x212>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a17      	ldr	r2, [pc, #92]	; (800290c <HAL_GPIO_Init+0x264>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_GPIO_Init+0x20e>
 80028b2:	2309      	movs	r3, #9
 80028b4:	e02d      	b.n	8002912 <HAL_GPIO_Init+0x26a>
 80028b6:	230a      	movs	r3, #10
 80028b8:	e02b      	b.n	8002912 <HAL_GPIO_Init+0x26a>
 80028ba:	2308      	movs	r3, #8
 80028bc:	e029      	b.n	8002912 <HAL_GPIO_Init+0x26a>
 80028be:	2307      	movs	r3, #7
 80028c0:	e027      	b.n	8002912 <HAL_GPIO_Init+0x26a>
 80028c2:	2306      	movs	r3, #6
 80028c4:	e025      	b.n	8002912 <HAL_GPIO_Init+0x26a>
 80028c6:	2305      	movs	r3, #5
 80028c8:	e023      	b.n	8002912 <HAL_GPIO_Init+0x26a>
 80028ca:	2304      	movs	r3, #4
 80028cc:	e021      	b.n	8002912 <HAL_GPIO_Init+0x26a>
 80028ce:	2303      	movs	r3, #3
 80028d0:	e01f      	b.n	8002912 <HAL_GPIO_Init+0x26a>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e01d      	b.n	8002912 <HAL_GPIO_Init+0x26a>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e01b      	b.n	8002912 <HAL_GPIO_Init+0x26a>
 80028da:	bf00      	nop
 80028dc:	58000080 	.word	0x58000080
 80028e0:	58024400 	.word	0x58024400
 80028e4:	58000400 	.word	0x58000400
 80028e8:	58020000 	.word	0x58020000
 80028ec:	58020400 	.word	0x58020400
 80028f0:	58020800 	.word	0x58020800
 80028f4:	58020c00 	.word	0x58020c00
 80028f8:	58021000 	.word	0x58021000
 80028fc:	58021400 	.word	0x58021400
 8002900:	58021800 	.word	0x58021800
 8002904:	58021c00 	.word	0x58021c00
 8002908:	58022000 	.word	0x58022000
 800290c:	58022400 	.word	0x58022400
 8002910:	2300      	movs	r3, #0
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	f002 0203 	and.w	r2, r2, #3
 8002918:	0092      	lsls	r2, r2, #2
 800291a:	4093      	lsls	r3, r2
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002922:	4938      	ldr	r1, [pc, #224]	; (8002a04 <HAL_GPIO_Init+0x35c>)
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	089b      	lsrs	r3, r3, #2
 8002928:	3302      	adds	r3, #2
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002956:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800295e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002984:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	3301      	adds	r3, #1
 80029e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa22 f303 	lsr.w	r3, r2, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f47f ae63 	bne.w	80026bc <HAL_GPIO_Init+0x14>
  }
}
 80029f6:	bf00      	nop
 80029f8:	bf00      	nop
 80029fa:	3724      	adds	r7, #36	; 0x24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	58000400 	.word	0x58000400

08002a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	807b      	strh	r3, [r7, #2]
 8002a14:	4613      	mov	r3, r2
 8002a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a18:	787b      	ldrb	r3, [r7, #1]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a1e:	887a      	ldrh	r2, [r7, #2]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a24:	e003      	b.n	8002a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a26:	887b      	ldrh	r3, [r7, #2]
 8002a28:	041a      	lsls	r2, r3, #16
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	619a      	str	r2, [r3, #24]
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
	...

08002a3c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002a44:	4a08      	ldr	r2, [pc, #32]	; (8002a68 <HAL_HSEM_FastTake+0x2c>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3320      	adds	r3, #32
 8002a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4e:	4a07      	ldr	r2, [pc, #28]	; (8002a6c <HAL_HSEM_FastTake+0x30>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d101      	bne.n	8002a58 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	e000      	b.n	8002a5a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	58026400 	.word	0x58026400
 8002a6c:	80000300 	.word	0x80000300

08002a70 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002a7a:	4906      	ldr	r1, [pc, #24]	; (8002a94 <HAL_HSEM_Release+0x24>)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	58026400 	.word	0x58026400

08002a98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002aa0:	4b29      	ldr	r3, [pc, #164]	; (8002b48 <HAL_PWREx_ConfigSupply+0xb0>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	2b06      	cmp	r3, #6
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002aac:	4b26      	ldr	r3, [pc, #152]	; (8002b48 <HAL_PWREx_ConfigSupply+0xb0>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d001      	beq.n	8002abe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e040      	b.n	8002b40 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e03e      	b.n	8002b40 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002ac2:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002aca:	491f      	ldr	r1, [pc, #124]	; (8002b48 <HAL_PWREx_ConfigSupply+0xb0>)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ad2:	f7ff fcc9 	bl	8002468 <HAL_GetTick>
 8002ad6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ad8:	e009      	b.n	8002aee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ada:	f7ff fcc5 	bl	8002468 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ae8:	d901      	bls.n	8002aee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e028      	b.n	8002b40 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002aee:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <HAL_PWREx_ConfigSupply+0xb0>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002afa:	d1ee      	bne.n	8002ada <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b1e      	cmp	r3, #30
 8002b00:	d008      	beq.n	8002b14 <HAL_PWREx_ConfigSupply+0x7c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b2e      	cmp	r3, #46	; 0x2e
 8002b06:	d005      	beq.n	8002b14 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b1d      	cmp	r3, #29
 8002b0c:	d002      	beq.n	8002b14 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b2d      	cmp	r3, #45	; 0x2d
 8002b12:	d114      	bne.n	8002b3e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002b14:	f7ff fca8 	bl	8002468 <HAL_GetTick>
 8002b18:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002b1a:	e009      	b.n	8002b30 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b1c:	f7ff fca4 	bl	8002468 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b2a:	d901      	bls.n	8002b30 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e007      	b.n	8002b40 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3c:	d1ee      	bne.n	8002b1c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	58024800 	.word	0x58024800

08002b4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08c      	sub	sp, #48	; 0x30
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f000 bc1d 	b.w	800339a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8087 	beq.w	8002c7c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b6e:	4b99      	ldr	r3, [pc, #612]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b78:	4b96      	ldr	r3, [pc, #600]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d007      	beq.n	8002b94 <HAL_RCC_OscConfig+0x48>
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	2b18      	cmp	r3, #24
 8002b88:	d110      	bne.n	8002bac <HAL_RCC_OscConfig+0x60>
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d10b      	bne.n	8002bac <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b94:	4b8f      	ldr	r3, [pc, #572]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d06c      	beq.n	8002c7a <HAL_RCC_OscConfig+0x12e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d168      	bne.n	8002c7a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e3f6      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb4:	d106      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x78>
 8002bb6:	4b87      	ldr	r3, [pc, #540]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a86      	ldr	r2, [pc, #536]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e02e      	b.n	8002c22 <HAL_RCC_OscConfig+0xd6>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10c      	bne.n	8002be6 <HAL_RCC_OscConfig+0x9a>
 8002bcc:	4b81      	ldr	r3, [pc, #516]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a80      	ldr	r2, [pc, #512]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	4b7e      	ldr	r3, [pc, #504]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a7d      	ldr	r2, [pc, #500]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	e01d      	b.n	8002c22 <HAL_RCC_OscConfig+0xd6>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bee:	d10c      	bne.n	8002c0a <HAL_RCC_OscConfig+0xbe>
 8002bf0:	4b78      	ldr	r3, [pc, #480]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a77      	ldr	r2, [pc, #476]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002bf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	4b75      	ldr	r3, [pc, #468]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a74      	ldr	r2, [pc, #464]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	e00b      	b.n	8002c22 <HAL_RCC_OscConfig+0xd6>
 8002c0a:	4b72      	ldr	r3, [pc, #456]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a71      	ldr	r2, [pc, #452]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	4b6f      	ldr	r3, [pc, #444]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a6e      	ldr	r2, [pc, #440]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c20:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d013      	beq.n	8002c52 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7ff fc1d 	bl	8002468 <HAL_GetTick>
 8002c2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c32:	f7ff fc19 	bl	8002468 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b64      	cmp	r3, #100	; 0x64
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e3aa      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c44:	4b63      	ldr	r3, [pc, #396]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0f0      	beq.n	8002c32 <HAL_RCC_OscConfig+0xe6>
 8002c50:	e014      	b.n	8002c7c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c52:	f7ff fc09 	bl	8002468 <HAL_GetTick>
 8002c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c5a:	f7ff fc05 	bl	8002468 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b64      	cmp	r3, #100	; 0x64
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e396      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c6c:	4b59      	ldr	r3, [pc, #356]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1f0      	bne.n	8002c5a <HAL_RCC_OscConfig+0x10e>
 8002c78:	e000      	b.n	8002c7c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80cb 	beq.w	8002e20 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c8a:	4b52      	ldr	r3, [pc, #328]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c92:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c94:	4b4f      	ldr	r3, [pc, #316]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c98:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x164>
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	2b18      	cmp	r3, #24
 8002ca4:	d156      	bne.n	8002d54 <HAL_RCC_OscConfig+0x208>
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d151      	bne.n	8002d54 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb0:	4b48      	ldr	r3, [pc, #288]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x17c>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e368      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cc8:	4b42      	ldr	r3, [pc, #264]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f023 0219 	bic.w	r2, r3, #25
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	493f      	ldr	r1, [pc, #252]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cda:	f7ff fbc5 	bl	8002468 <HAL_GetTick>
 8002cde:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce2:	f7ff fbc1 	bl	8002468 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e352      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cf4:	4b37      	ldr	r3, [pc, #220]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d00:	f7ff fbe2 	bl	80024c8 <HAL_GetREVID>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d817      	bhi.n	8002d3e <HAL_RCC_OscConfig+0x1f2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	2b40      	cmp	r3, #64	; 0x40
 8002d14:	d108      	bne.n	8002d28 <HAL_RCC_OscConfig+0x1dc>
 8002d16:	4b2f      	ldr	r3, [pc, #188]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d1e:	4a2d      	ldr	r2, [pc, #180]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d24:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d26:	e07b      	b.n	8002e20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d28:	4b2a      	ldr	r3, [pc, #168]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	031b      	lsls	r3, r3, #12
 8002d36:	4927      	ldr	r1, [pc, #156]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d3c:	e070      	b.n	8002e20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3e:	4b25      	ldr	r3, [pc, #148]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	061b      	lsls	r3, r3, #24
 8002d4c:	4921      	ldr	r1, [pc, #132]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d52:	e065      	b.n	8002e20 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d048      	beq.n	8002dee <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f023 0219 	bic.w	r2, r3, #25
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	491a      	ldr	r1, [pc, #104]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7ff fb7b 	bl	8002468 <HAL_GetTick>
 8002d72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d76:	f7ff fb77 	bl	8002468 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e308      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d88:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d94:	f7ff fb98 	bl	80024c8 <HAL_GetREVID>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d81a      	bhi.n	8002dd8 <HAL_RCC_OscConfig+0x28c>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b40      	cmp	r3, #64	; 0x40
 8002da8:	d108      	bne.n	8002dbc <HAL_RCC_OscConfig+0x270>
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002db2:	4a08      	ldr	r2, [pc, #32]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db8:	6053      	str	r3, [r2, #4]
 8002dba:	e031      	b.n	8002e20 <HAL_RCC_OscConfig+0x2d4>
 8002dbc:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	031b      	lsls	r3, r3, #12
 8002dca:	4902      	ldr	r1, [pc, #8]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	604b      	str	r3, [r1, #4]
 8002dd0:	e026      	b.n	8002e20 <HAL_RCC_OscConfig+0x2d4>
 8002dd2:	bf00      	nop
 8002dd4:	58024400 	.word	0x58024400
 8002dd8:	4b9a      	ldr	r3, [pc, #616]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	061b      	lsls	r3, r3, #24
 8002de6:	4997      	ldr	r1, [pc, #604]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
 8002dec:	e018      	b.n	8002e20 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dee:	4b95      	ldr	r3, [pc, #596]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a94      	ldr	r2, [pc, #592]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfa:	f7ff fb35 	bl	8002468 <HAL_GetTick>
 8002dfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e02:	f7ff fb31 	bl	8002468 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e2c2      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e14:	4b8b      	ldr	r3, [pc, #556]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f0      	bne.n	8002e02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80a9 	beq.w	8002f80 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e2e:	4b85      	ldr	r3, [pc, #532]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e36:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e38:	4b82      	ldr	r3, [pc, #520]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d007      	beq.n	8002e54 <HAL_RCC_OscConfig+0x308>
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2b18      	cmp	r3, #24
 8002e48:	d13a      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x374>
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d135      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e54:	4b7b      	ldr	r3, [pc, #492]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_OscConfig+0x320>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	2b80      	cmp	r3, #128	; 0x80
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e296      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e6c:	f7ff fb2c 	bl	80024c8 <HAL_GetREVID>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d817      	bhi.n	8002eaa <HAL_RCC_OscConfig+0x35e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d108      	bne.n	8002e94 <HAL_RCC_OscConfig+0x348>
 8002e82:	4b70      	ldr	r3, [pc, #448]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e8a:	4a6e      	ldr	r2, [pc, #440]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002e8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e90:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e92:	e075      	b.n	8002f80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e94:	4b6b      	ldr	r3, [pc, #428]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	069b      	lsls	r3, r3, #26
 8002ea2:	4968      	ldr	r1, [pc, #416]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ea8:	e06a      	b.n	8002f80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002eaa:	4b66      	ldr	r3, [pc, #408]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	061b      	lsls	r3, r3, #24
 8002eb8:	4962      	ldr	r1, [pc, #392]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ebe:	e05f      	b.n	8002f80 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d042      	beq.n	8002f4e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ec8:	4b5e      	ldr	r3, [pc, #376]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a5d      	ldr	r2, [pc, #372]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7ff fac8 	bl	8002468 <HAL_GetTick>
 8002ed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002edc:	f7ff fac4 	bl	8002468 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e255      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002eee:	4b55      	ldr	r3, [pc, #340]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002efa:	f7ff fae5 	bl	80024c8 <HAL_GetREVID>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d817      	bhi.n	8002f38 <HAL_RCC_OscConfig+0x3ec>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d108      	bne.n	8002f22 <HAL_RCC_OscConfig+0x3d6>
 8002f10:	4b4c      	ldr	r3, [pc, #304]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002f18:	4a4a      	ldr	r2, [pc, #296]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002f1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f1e:	6053      	str	r3, [r2, #4]
 8002f20:	e02e      	b.n	8002f80 <HAL_RCC_OscConfig+0x434>
 8002f22:	4b48      	ldr	r3, [pc, #288]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	069b      	lsls	r3, r3, #26
 8002f30:	4944      	ldr	r1, [pc, #272]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]
 8002f36:	e023      	b.n	8002f80 <HAL_RCC_OscConfig+0x434>
 8002f38:	4b42      	ldr	r3, [pc, #264]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	061b      	lsls	r3, r3, #24
 8002f46:	493f      	ldr	r1, [pc, #252]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60cb      	str	r3, [r1, #12]
 8002f4c:	e018      	b.n	8002f80 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a3c      	ldr	r2, [pc, #240]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5a:	f7ff fa85 	bl	8002468 <HAL_GetTick>
 8002f5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002f62:	f7ff fa81 	bl	8002468 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e212      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f74:	4b33      	ldr	r3, [pc, #204]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f0      	bne.n	8002f62 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d036      	beq.n	8002ffa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d019      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f94:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f98:	4a2a      	ldr	r2, [pc, #168]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa0:	f7ff fa62 	bl	8002468 <HAL_GetTick>
 8002fa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa8:	f7ff fa5e 	bl	8002468 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e1ef      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fba:	4b22      	ldr	r3, [pc, #136]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x45c>
 8002fc6:	e018      	b.n	8002ffa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc8:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fcc:	4a1d      	ldr	r2, [pc, #116]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7ff fa48 	bl	8002468 <HAL_GetTick>
 8002fd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fdc:	f7ff fa44 	bl	8002468 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e1d5      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fee:	4b15      	ldr	r3, [pc, #84]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d039      	beq.n	800307a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d01c      	beq.n	8003048 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800300e:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a0c      	ldr	r2, [pc, #48]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8003014:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003018:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800301a:	f7ff fa25 	bl	8002468 <HAL_GetTick>
 800301e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003022:	f7ff fa21 	bl	8002468 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e1b2      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003034:	4b03      	ldr	r3, [pc, #12]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x4d6>
 8003040:	e01b      	b.n	800307a <HAL_RCC_OscConfig+0x52e>
 8003042:	bf00      	nop
 8003044:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003048:	4b9b      	ldr	r3, [pc, #620]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a9a      	ldr	r2, [pc, #616]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 800304e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003052:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003054:	f7ff fa08 	bl	8002468 <HAL_GetTick>
 8003058:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800305c:	f7ff fa04 	bl	8002468 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e195      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800306e:	4b92      	ldr	r3, [pc, #584]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 8081 	beq.w	800318a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003088:	4b8c      	ldr	r3, [pc, #560]	; (80032bc <HAL_RCC_OscConfig+0x770>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a8b      	ldr	r2, [pc, #556]	; (80032bc <HAL_RCC_OscConfig+0x770>)
 800308e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003092:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003094:	f7ff f9e8 	bl	8002468 <HAL_GetTick>
 8003098:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800309c:	f7ff f9e4 	bl	8002468 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	; 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e175      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030ae:	4b83      	ldr	r3, [pc, #524]	; (80032bc <HAL_RCC_OscConfig+0x770>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d106      	bne.n	80030d0 <HAL_RCC_OscConfig+0x584>
 80030c2:	4b7d      	ldr	r3, [pc, #500]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c6:	4a7c      	ldr	r2, [pc, #496]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6713      	str	r3, [r2, #112]	; 0x70
 80030ce:	e02d      	b.n	800312c <HAL_RCC_OscConfig+0x5e0>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10c      	bne.n	80030f2 <HAL_RCC_OscConfig+0x5a6>
 80030d8:	4b77      	ldr	r3, [pc, #476]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 80030da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030dc:	4a76      	ldr	r2, [pc, #472]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 80030de:	f023 0301 	bic.w	r3, r3, #1
 80030e2:	6713      	str	r3, [r2, #112]	; 0x70
 80030e4:	4b74      	ldr	r3, [pc, #464]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 80030e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e8:	4a73      	ldr	r2, [pc, #460]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 80030ea:	f023 0304 	bic.w	r3, r3, #4
 80030ee:	6713      	str	r3, [r2, #112]	; 0x70
 80030f0:	e01c      	b.n	800312c <HAL_RCC_OscConfig+0x5e0>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b05      	cmp	r3, #5
 80030f8:	d10c      	bne.n	8003114 <HAL_RCC_OscConfig+0x5c8>
 80030fa:	4b6f      	ldr	r3, [pc, #444]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fe:	4a6e      	ldr	r2, [pc, #440]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 8003100:	f043 0304 	orr.w	r3, r3, #4
 8003104:	6713      	str	r3, [r2, #112]	; 0x70
 8003106:	4b6c      	ldr	r3, [pc, #432]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 8003108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310a:	4a6b      	ldr	r2, [pc, #428]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	6713      	str	r3, [r2, #112]	; 0x70
 8003112:	e00b      	b.n	800312c <HAL_RCC_OscConfig+0x5e0>
 8003114:	4b68      	ldr	r3, [pc, #416]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	4a67      	ldr	r2, [pc, #412]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 800311a:	f023 0301 	bic.w	r3, r3, #1
 800311e:	6713      	str	r3, [r2, #112]	; 0x70
 8003120:	4b65      	ldr	r3, [pc, #404]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 8003122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003124:	4a64      	ldr	r2, [pc, #400]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 8003126:	f023 0304 	bic.w	r3, r3, #4
 800312a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d015      	beq.n	8003160 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003134:	f7ff f998 	bl	8002468 <HAL_GetTick>
 8003138:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800313a:	e00a      	b.n	8003152 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800313c:	f7ff f994 	bl	8002468 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f241 3288 	movw	r2, #5000	; 0x1388
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e123      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003152:	4b59      	ldr	r3, [pc, #356]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0ee      	beq.n	800313c <HAL_RCC_OscConfig+0x5f0>
 800315e:	e014      	b.n	800318a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003160:	f7ff f982 	bl	8002468 <HAL_GetTick>
 8003164:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003166:	e00a      	b.n	800317e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003168:	f7ff f97e 	bl	8002468 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f241 3288 	movw	r2, #5000	; 0x1388
 8003176:	4293      	cmp	r3, r2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e10d      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800317e:	4b4e      	ldr	r3, [pc, #312]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1ee      	bne.n	8003168 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8102 	beq.w	8003398 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003194:	4b48      	ldr	r3, [pc, #288]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800319c:	2b18      	cmp	r3, #24
 800319e:	f000 80bd 	beq.w	800331c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	f040 809e 	bne.w	80032e8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ac:	4b42      	ldr	r3, [pc, #264]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a41      	ldr	r2, [pc, #260]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 80031b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7ff f956 	bl	8002468 <HAL_GetTick>
 80031bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c0:	f7ff f952 	bl	8002468 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e0e3      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031d2:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031de:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 80031e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031e2:	4b37      	ldr	r3, [pc, #220]	; (80032c0 <HAL_RCC_OscConfig+0x774>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031ee:	0112      	lsls	r2, r2, #4
 80031f0:	430a      	orrs	r2, r1
 80031f2:	4931      	ldr	r1, [pc, #196]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	628b      	str	r3, [r1, #40]	; 0x28
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	3b01      	subs	r3, #1
 80031fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003206:	3b01      	subs	r3, #1
 8003208:	025b      	lsls	r3, r3, #9
 800320a:	b29b      	uxth	r3, r3
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	3b01      	subs	r3, #1
 8003214:	041b      	lsls	r3, r3, #16
 8003216:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003220:	3b01      	subs	r3, #1
 8003222:	061b      	lsls	r3, r3, #24
 8003224:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003228:	4923      	ldr	r1, [pc, #140]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 800322a:	4313      	orrs	r3, r2
 800322c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800322e:	4b22      	ldr	r3, [pc, #136]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	4a21      	ldr	r2, [pc, #132]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 8003234:	f023 0301 	bic.w	r3, r3, #1
 8003238:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800323a:	4b1f      	ldr	r3, [pc, #124]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 800323c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800323e:	4b21      	ldr	r3, [pc, #132]	; (80032c4 <HAL_RCC_OscConfig+0x778>)
 8003240:	4013      	ands	r3, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003246:	00d2      	lsls	r2, r2, #3
 8003248:	491b      	ldr	r1, [pc, #108]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 800324a:	4313      	orrs	r3, r2
 800324c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800324e:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	f023 020c 	bic.w	r2, r3, #12
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	4917      	ldr	r1, [pc, #92]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 800325c:	4313      	orrs	r3, r2
 800325e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003260:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	f023 0202 	bic.w	r2, r3, #2
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326c:	4912      	ldr	r1, [pc, #72]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 800326e:	4313      	orrs	r3, r2
 8003270:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003272:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	4a10      	ldr	r2, [pc, #64]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 8003278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800327e:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	4a0d      	ldr	r2, [pc, #52]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 8003284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003288:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 8003290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003294:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003296:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 8003298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329a:	4a07      	ldr	r2, [pc, #28]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a04      	ldr	r2, [pc, #16]	; (80032b8 <HAL_RCC_OscConfig+0x76c>)
 80032a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ae:	f7ff f8db 	bl	8002468 <HAL_GetTick>
 80032b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032b4:	e011      	b.n	80032da <HAL_RCC_OscConfig+0x78e>
 80032b6:	bf00      	nop
 80032b8:	58024400 	.word	0x58024400
 80032bc:	58024800 	.word	0x58024800
 80032c0:	fffffc0c 	.word	0xfffffc0c
 80032c4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c8:	f7ff f8ce 	bl	8002468 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e05f      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032da:	4b32      	ldr	r3, [pc, #200]	; (80033a4 <HAL_RCC_OscConfig+0x858>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0x77c>
 80032e6:	e057      	b.n	8003398 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e8:	4b2e      	ldr	r3, [pc, #184]	; (80033a4 <HAL_RCC_OscConfig+0x858>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2d      	ldr	r2, [pc, #180]	; (80033a4 <HAL_RCC_OscConfig+0x858>)
 80032ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7ff f8b8 	bl	8002468 <HAL_GetTick>
 80032f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fc:	f7ff f8b4 	bl	8002468 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e045      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800330e:	4b25      	ldr	r3, [pc, #148]	; (80033a4 <HAL_RCC_OscConfig+0x858>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x7b0>
 800331a:	e03d      	b.n	8003398 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800331c:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <HAL_RCC_OscConfig+0x858>)
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003322:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <HAL_RCC_OscConfig+0x858>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	2b01      	cmp	r3, #1
 800332e:	d031      	beq.n	8003394 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f003 0203 	and.w	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333a:	429a      	cmp	r2, r3
 800333c:	d12a      	bne.n	8003394 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	429a      	cmp	r2, r3
 800334c:	d122      	bne.n	8003394 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d11a      	bne.n	8003394 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	0a5b      	lsrs	r3, r3, #9
 8003362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800336c:	429a      	cmp	r2, r3
 800336e:	d111      	bne.n	8003394 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	0c1b      	lsrs	r3, r3, #16
 8003374:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d108      	bne.n	8003394 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	0e1b      	lsrs	r3, r3, #24
 8003386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3730      	adds	r7, #48	; 0x30
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	58024400 	.word	0x58024400

080033a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e19c      	b.n	80036f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033bc:	4b8a      	ldr	r3, [pc, #552]	; (80035e8 <HAL_RCC_ClockConfig+0x240>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d910      	bls.n	80033ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b87      	ldr	r3, [pc, #540]	; (80035e8 <HAL_RCC_ClockConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 020f 	bic.w	r2, r3, #15
 80033d2:	4985      	ldr	r1, [pc, #532]	; (80035e8 <HAL_RCC_ClockConfig+0x240>)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033da:	4b83      	ldr	r3, [pc, #524]	; (80035e8 <HAL_RCC_ClockConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e184      	b.n	80036f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d010      	beq.n	800341a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	4b7b      	ldr	r3, [pc, #492]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003404:	429a      	cmp	r2, r3
 8003406:	d908      	bls.n	800341a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003408:	4b78      	ldr	r3, [pc, #480]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	4975      	ldr	r1, [pc, #468]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 8003416:	4313      	orrs	r3, r2
 8003418:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d010      	beq.n	8003448 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695a      	ldr	r2, [r3, #20]
 800342a:	4b70      	ldr	r3, [pc, #448]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003432:	429a      	cmp	r2, r3
 8003434:	d908      	bls.n	8003448 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003436:	4b6d      	ldr	r3, [pc, #436]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	496a      	ldr	r1, [pc, #424]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 8003444:	4313      	orrs	r3, r2
 8003446:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	d010      	beq.n	8003476 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699a      	ldr	r2, [r3, #24]
 8003458:	4b64      	ldr	r3, [pc, #400]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003460:	429a      	cmp	r2, r3
 8003462:	d908      	bls.n	8003476 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003464:	4b61      	ldr	r3, [pc, #388]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	495e      	ldr	r1, [pc, #376]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 8003472:	4313      	orrs	r3, r2
 8003474:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b00      	cmp	r3, #0
 8003480:	d010      	beq.n	80034a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	4b59      	ldr	r3, [pc, #356]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800348e:	429a      	cmp	r2, r3
 8003490:	d908      	bls.n	80034a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003492:	4b56      	ldr	r3, [pc, #344]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	4953      	ldr	r1, [pc, #332]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d010      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	4b4d      	ldr	r3, [pc, #308]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	429a      	cmp	r2, r3
 80034be:	d908      	bls.n	80034d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c0:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f023 020f 	bic.w	r2, r3, #15
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4947      	ldr	r1, [pc, #284]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d055      	beq.n	800358a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80034de:	4b43      	ldr	r3, [pc, #268]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	4940      	ldr	r1, [pc, #256]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d107      	bne.n	8003508 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034f8:	4b3c      	ldr	r3, [pc, #240]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d121      	bne.n	8003548 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0f6      	b.n	80036f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b03      	cmp	r3, #3
 800350e:	d107      	bne.n	8003520 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003510:	4b36      	ldr	r3, [pc, #216]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d115      	bne.n	8003548 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0ea      	b.n	80036f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d107      	bne.n	8003538 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003528:	4b30      	ldr	r3, [pc, #192]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003530:	2b00      	cmp	r3, #0
 8003532:	d109      	bne.n	8003548 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0de      	b.n	80036f6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003538:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0d6      	b.n	80036f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003548:	4b28      	ldr	r3, [pc, #160]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	f023 0207 	bic.w	r2, r3, #7
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	4925      	ldr	r1, [pc, #148]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 8003556:	4313      	orrs	r3, r2
 8003558:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355a:	f7fe ff85 	bl	8002468 <HAL_GetTick>
 800355e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003560:	e00a      	b.n	8003578 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003562:	f7fe ff81 	bl	8002468 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003570:	4293      	cmp	r3, r2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e0be      	b.n	80036f6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003578:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	429a      	cmp	r2, r3
 8003588:	d1eb      	bne.n	8003562 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d010      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	4b14      	ldr	r3, [pc, #80]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d208      	bcs.n	80035b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a6:	4b11      	ldr	r3, [pc, #68]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	f023 020f 	bic.w	r2, r3, #15
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	490e      	ldr	r1, [pc, #56]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_RCC_ClockConfig+0x240>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d214      	bcs.n	80035f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c6:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <HAL_RCC_ClockConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 020f 	bic.w	r2, r3, #15
 80035ce:	4906      	ldr	r1, [pc, #24]	; (80035e8 <HAL_RCC_ClockConfig+0x240>)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d6:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <HAL_RCC_ClockConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e086      	b.n	80036f6 <HAL_RCC_ClockConfig+0x34e>
 80035e8:	52002000 	.word	0x52002000
 80035ec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d010      	beq.n	800361e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	4b3f      	ldr	r3, [pc, #252]	; (8003700 <HAL_RCC_ClockConfig+0x358>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003608:	429a      	cmp	r2, r3
 800360a:	d208      	bcs.n	800361e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800360c:	4b3c      	ldr	r3, [pc, #240]	; (8003700 <HAL_RCC_ClockConfig+0x358>)
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	4939      	ldr	r1, [pc, #228]	; (8003700 <HAL_RCC_ClockConfig+0x358>)
 800361a:	4313      	orrs	r3, r2
 800361c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d010      	beq.n	800364c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	4b34      	ldr	r3, [pc, #208]	; (8003700 <HAL_RCC_ClockConfig+0x358>)
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003636:	429a      	cmp	r2, r3
 8003638:	d208      	bcs.n	800364c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800363a:	4b31      	ldr	r3, [pc, #196]	; (8003700 <HAL_RCC_ClockConfig+0x358>)
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	492e      	ldr	r1, [pc, #184]	; (8003700 <HAL_RCC_ClockConfig+0x358>)
 8003648:	4313      	orrs	r3, r2
 800364a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b00      	cmp	r3, #0
 8003656:	d010      	beq.n	800367a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699a      	ldr	r2, [r3, #24]
 800365c:	4b28      	ldr	r3, [pc, #160]	; (8003700 <HAL_RCC_ClockConfig+0x358>)
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003664:	429a      	cmp	r2, r3
 8003666:	d208      	bcs.n	800367a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003668:	4b25      	ldr	r3, [pc, #148]	; (8003700 <HAL_RCC_ClockConfig+0x358>)
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	4922      	ldr	r1, [pc, #136]	; (8003700 <HAL_RCC_ClockConfig+0x358>)
 8003676:	4313      	orrs	r3, r2
 8003678:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d010      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69da      	ldr	r2, [r3, #28]
 800368a:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <HAL_RCC_ClockConfig+0x358>)
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003692:	429a      	cmp	r2, r3
 8003694:	d208      	bcs.n	80036a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003696:	4b1a      	ldr	r3, [pc, #104]	; (8003700 <HAL_RCC_ClockConfig+0x358>)
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	4917      	ldr	r1, [pc, #92]	; (8003700 <HAL_RCC_ClockConfig+0x358>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036a8:	f000 f834 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 80036ac:	4602      	mov	r2, r0
 80036ae:	4b14      	ldr	r3, [pc, #80]	; (8003700 <HAL_RCC_ClockConfig+0x358>)
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	0a1b      	lsrs	r3, r3, #8
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	4912      	ldr	r1, [pc, #72]	; (8003704 <HAL_RCC_ClockConfig+0x35c>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
 80036c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036c6:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <HAL_RCC_ClockConfig+0x358>)
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	4a0d      	ldr	r2, [pc, #52]	; (8003704 <HAL_RCC_ClockConfig+0x35c>)
 80036d0:	5cd3      	ldrb	r3, [r2, r3]
 80036d2:	f003 031f 	and.w	r3, r3, #31
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
 80036dc:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <HAL_RCC_ClockConfig+0x360>)
 80036de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036e0:	4a0a      	ldr	r2, [pc, #40]	; (800370c <HAL_RCC_ClockConfig+0x364>)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <HAL_RCC_ClockConfig+0x368>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fe fe72 	bl	80023d4 <HAL_InitTick>
 80036f0:	4603      	mov	r3, r0
 80036f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	58024400 	.word	0x58024400
 8003704:	080092ac 	.word	0x080092ac
 8003708:	24000004 	.word	0x24000004
 800370c:	24000000 	.word	0x24000000
 8003710:	24000010 	.word	0x24000010

08003714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003714:	b480      	push	{r7}
 8003716:	b089      	sub	sp, #36	; 0x24
 8003718:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800371a:	4bb3      	ldr	r3, [pc, #716]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003722:	2b18      	cmp	r3, #24
 8003724:	f200 8155 	bhi.w	80039d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003728:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <HAL_RCC_GetSysClockFreq+0x1c>)
 800372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372e:	bf00      	nop
 8003730:	08003795 	.word	0x08003795
 8003734:	080039d3 	.word	0x080039d3
 8003738:	080039d3 	.word	0x080039d3
 800373c:	080039d3 	.word	0x080039d3
 8003740:	080039d3 	.word	0x080039d3
 8003744:	080039d3 	.word	0x080039d3
 8003748:	080039d3 	.word	0x080039d3
 800374c:	080039d3 	.word	0x080039d3
 8003750:	080037bb 	.word	0x080037bb
 8003754:	080039d3 	.word	0x080039d3
 8003758:	080039d3 	.word	0x080039d3
 800375c:	080039d3 	.word	0x080039d3
 8003760:	080039d3 	.word	0x080039d3
 8003764:	080039d3 	.word	0x080039d3
 8003768:	080039d3 	.word	0x080039d3
 800376c:	080039d3 	.word	0x080039d3
 8003770:	080037c1 	.word	0x080037c1
 8003774:	080039d3 	.word	0x080039d3
 8003778:	080039d3 	.word	0x080039d3
 800377c:	080039d3 	.word	0x080039d3
 8003780:	080039d3 	.word	0x080039d3
 8003784:	080039d3 	.word	0x080039d3
 8003788:	080039d3 	.word	0x080039d3
 800378c:	080039d3 	.word	0x080039d3
 8003790:	080037c7 	.word	0x080037c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003794:	4b94      	ldr	r3, [pc, #592]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d009      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037a0:	4b91      	ldr	r3, [pc, #580]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	08db      	lsrs	r3, r3, #3
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	4a90      	ldr	r2, [pc, #576]	; (80039ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
 80037b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80037b2:	e111      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80037b4:	4b8d      	ldr	r3, [pc, #564]	; (80039ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037b6:	61bb      	str	r3, [r7, #24]
    break;
 80037b8:	e10e      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80037ba:	4b8d      	ldr	r3, [pc, #564]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037bc:	61bb      	str	r3, [r7, #24]
    break;
 80037be:	e10b      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80037c0:	4b8c      	ldr	r3, [pc, #560]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80037c2:	61bb      	str	r3, [r7, #24]
    break;
 80037c4:	e108      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037c6:	4b88      	ldr	r3, [pc, #544]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80037d0:	4b85      	ldr	r3, [pc, #532]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80037dc:	4b82      	ldr	r3, [pc, #520]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80037e6:	4b80      	ldr	r3, [pc, #512]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ea:	08db      	lsrs	r3, r3, #3
 80037ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	ee07 3a90 	vmov	s15, r3
 80037fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 80e1 	beq.w	80039cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b02      	cmp	r3, #2
 800380e:	f000 8083 	beq.w	8003918 <HAL_RCC_GetSysClockFreq+0x204>
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b02      	cmp	r3, #2
 8003816:	f200 80a1 	bhi.w	800395c <HAL_RCC_GetSysClockFreq+0x248>
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0x114>
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d056      	beq.n	80038d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003826:	e099      	b.n	800395c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003828:	4b6f      	ldr	r3, [pc, #444]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d02d      	beq.n	8003890 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003834:	4b6c      	ldr	r3, [pc, #432]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	08db      	lsrs	r3, r3, #3
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	4a6b      	ldr	r2, [pc, #428]	; (80039ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003840:	fa22 f303 	lsr.w	r3, r2, r3
 8003844:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	ee07 3a90 	vmov	s15, r3
 800384c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	ee07 3a90 	vmov	s15, r3
 8003856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800385e:	4b62      	ldr	r3, [pc, #392]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800386e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003872:	eddf 5a61 	vldr	s11, [pc, #388]	; 80039f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800387a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800387e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800388e:	e087      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80039fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800389e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038a2:	4b51      	ldr	r3, [pc, #324]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80038b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80039f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038d2:	e065      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	ee07 3a90 	vmov	s15, r3
 80038da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003a00 <HAL_RCC_GetSysClockFreq+0x2ec>
 80038e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038e6:	4b40      	ldr	r3, [pc, #256]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80038fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80039f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800390a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800390e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003916:	e043      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	ee07 3a90 	vmov	s15, r3
 800391e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003922:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003a04 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800392a:	4b2f      	ldr	r3, [pc, #188]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800393a:	ed97 6a02 	vldr	s12, [r7, #8]
 800393e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80039f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800394a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800394e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003956:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800395a:	e021      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003966:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003a00 <HAL_RCC_GetSysClockFreq+0x2ec>
 800396a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800396e:	4b1e      	ldr	r3, [pc, #120]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800397e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003982:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80039f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800398a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800398e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800399e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80039a0:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	0a5b      	lsrs	r3, r3, #9
 80039a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039aa:	3301      	adds	r3, #1
 80039ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	ee07 3a90 	vmov	s15, r3
 80039b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80039bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039c4:	ee17 3a90 	vmov	r3, s15
 80039c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80039ca:	e005      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	61bb      	str	r3, [r7, #24]
    break;
 80039d0:	e002      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80039d2:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039d4:	61bb      	str	r3, [r7, #24]
    break;
 80039d6:	bf00      	nop
  }

  return sysclockfreq;
 80039d8:	69bb      	ldr	r3, [r7, #24]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3724      	adds	r7, #36	; 0x24
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	58024400 	.word	0x58024400
 80039ec:	03d09000 	.word	0x03d09000
 80039f0:	003d0900 	.word	0x003d0900
 80039f4:	007a1200 	.word	0x007a1200
 80039f8:	46000000 	.word	0x46000000
 80039fc:	4c742400 	.word	0x4c742400
 8003a00:	4a742400 	.word	0x4a742400
 8003a04:	4af42400 	.word	0x4af42400

08003a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a0e:	f7ff fe81 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 8003a12:	4602      	mov	r2, r0
 8003a14:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	0a1b      	lsrs	r3, r3, #8
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	490f      	ldr	r1, [pc, #60]	; (8003a5c <HAL_RCC_GetHCLKFreq+0x54>)
 8003a20:	5ccb      	ldrb	r3, [r1, r3]
 8003a22:	f003 031f 	and.w	r3, r3, #31
 8003a26:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <HAL_RCC_GetHCLKFreq+0x54>)
 8003a36:	5cd3      	ldrb	r3, [r2, r3]
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a42:	4a07      	ldr	r2, [pc, #28]	; (8003a60 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a44:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a46:	4a07      	ldr	r2, [pc, #28]	; (8003a64 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a4c:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	58024400 	.word	0x58024400
 8003a5c:	080092ac 	.word	0x080092ac
 8003a60:	24000004 	.word	0x24000004
 8003a64:	24000000 	.word	0x24000000

08003a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003a6c:	f7ff ffcc 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	091b      	lsrs	r3, r3, #4
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	4904      	ldr	r1, [pc, #16]	; (8003a90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a7e:	5ccb      	ldrb	r3, [r1, r3]
 8003a80:	f003 031f 	and.w	r3, r3, #31
 8003a84:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	58024400 	.word	0x58024400
 8003a90:	080092ac 	.word	0x080092ac

08003a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003a98:	f7ff ffb6 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	0a1b      	lsrs	r3, r3, #8
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	4904      	ldr	r1, [pc, #16]	; (8003abc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003aaa:	5ccb      	ldrb	r3, [r1, r3]
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	58024400 	.word	0x58024400
 8003abc:	080092ac 	.word	0x080092ac

08003ac0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ac8:	2300      	movs	r3, #0
 8003aca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003acc:	2300      	movs	r3, #0
 8003ace:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d03f      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ae0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ae4:	d02a      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ae6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003aea:	d824      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003aec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003af0:	d018      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003af2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003af6:	d81e      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003afc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b00:	d007      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b02:	e018      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b04:	4ba3      	ldr	r3, [pc, #652]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	4aa2      	ldr	r2, [pc, #648]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003b10:	e015      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3304      	adds	r3, #4
 8003b16:	2102      	movs	r1, #2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f001 f9d5 	bl	8004ec8 <RCCEx_PLL2_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003b22:	e00c      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3324      	adds	r3, #36	; 0x24
 8003b28:	2102      	movs	r1, #2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f001 fa7e 	bl	800502c <RCCEx_PLL3_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003b34:	e003      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	75fb      	strb	r3, [r7, #23]
      break;
 8003b3a:	e000      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d109      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b44:	4b93      	ldr	r3, [pc, #588]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b50:	4990      	ldr	r1, [pc, #576]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	650b      	str	r3, [r1, #80]	; 0x50
 8003b56:	e001      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b58:	7dfb      	ldrb	r3, [r7, #23]
 8003b5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d03d      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d826      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003b70:	a201      	add	r2, pc, #4	; (adr r2, 8003b78 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b76:	bf00      	nop
 8003b78:	08003b8d 	.word	0x08003b8d
 8003b7c:	08003b9b 	.word	0x08003b9b
 8003b80:	08003bad 	.word	0x08003bad
 8003b84:	08003bc5 	.word	0x08003bc5
 8003b88:	08003bc5 	.word	0x08003bc5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b8c:	4b81      	ldr	r3, [pc, #516]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	4a80      	ldr	r2, [pc, #512]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b98:	e015      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 f991 	bl	8004ec8 <RCCEx_PLL2_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003baa:	e00c      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3324      	adds	r3, #36	; 0x24
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f001 fa3a 	bl	800502c <RCCEx_PLL3_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bbc:	e003      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bcc:	4b71      	ldr	r3, [pc, #452]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd0:	f023 0207 	bic.w	r2, r3, #7
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd8:	496e      	ldr	r1, [pc, #440]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	650b      	str	r3, [r1, #80]	; 0x50
 8003bde:	e001      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d042      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf8:	d02b      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bfe:	d825      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003c00:	2bc0      	cmp	r3, #192	; 0xc0
 8003c02:	d028      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003c04:	2bc0      	cmp	r3, #192	; 0xc0
 8003c06:	d821      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003c08:	2b80      	cmp	r3, #128	; 0x80
 8003c0a:	d016      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003c0c:	2b80      	cmp	r3, #128	; 0x80
 8003c0e:	d81d      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003c14:	2b40      	cmp	r3, #64	; 0x40
 8003c16:	d007      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003c18:	e018      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c1a:	4b5e      	ldr	r3, [pc, #376]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	4a5d      	ldr	r2, [pc, #372]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003c26:	e017      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 f94a 	bl	8004ec8 <RCCEx_PLL2_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003c38:	e00e      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3324      	adds	r3, #36	; 0x24
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f001 f9f3 	bl	800502c <RCCEx_PLL3_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003c4a:	e005      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c50:	e002      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003c52:	bf00      	nop
 8003c54:	e000      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003c56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003c5e:	4b4d      	ldr	r3, [pc, #308]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c62:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6a:	494a      	ldr	r1, [pc, #296]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	650b      	str	r3, [r1, #80]	; 0x50
 8003c70:	e001      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
 8003c74:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d049      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c8c:	d030      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003c8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c92:	d82a      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003c94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c98:	d02c      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003c9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c9e:	d824      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003ca0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca4:	d018      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003ca6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003caa:	d81e      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003cb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cb4:	d007      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003cb6:	e018      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb8:	4b36      	ldr	r3, [pc, #216]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	4a35      	ldr	r2, [pc, #212]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cc4:	e017      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f001 f8fb 	bl	8004ec8 <RCCEx_PLL2_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003cd6:	e00e      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3324      	adds	r3, #36	; 0x24
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f001 f9a4 	bl	800502c <RCCEx_PLL3_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ce8:	e005      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	75fb      	strb	r3, [r7, #23]
      break;
 8003cee:	e002      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003cf0:	bf00      	nop
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003cfc:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d00:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d0a:	4922      	ldr	r1, [pc, #136]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	658b      	str	r3, [r1, #88]	; 0x58
 8003d10:	e001      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
 8003d14:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d04b      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d2c:	d030      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003d2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d32:	d82a      	bhi.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003d34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d38:	d02e      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003d3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d3e:	d824      	bhi.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003d40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d44:	d018      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003d46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d4a:	d81e      	bhi.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d54:	d007      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003d56:	e018      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d58:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	4a0d      	ldr	r2, [pc, #52]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d64:	e019      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f001 f8ab 	bl	8004ec8 <RCCEx_PLL2_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003d76:	e010      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3324      	adds	r3, #36	; 0x24
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f001 f954 	bl	800502c <RCCEx_PLL3_Config>
 8003d84:	4603      	mov	r3, r0
 8003d86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d88:	e007      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d8e:	e004      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003d90:	bf00      	nop
 8003d92:	e002      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003d94:	58024400 	.word	0x58024400
      break;
 8003d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003da0:	4b99      	ldr	r3, [pc, #612]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003dae:	4996      	ldr	r1, [pc, #600]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	658b      	str	r3, [r1, #88]	; 0x58
 8003db4:	e001      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d032      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dca:	2b30      	cmp	r3, #48	; 0x30
 8003dcc:	d01c      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003dce:	2b30      	cmp	r3, #48	; 0x30
 8003dd0:	d817      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d00c      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d813      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d016      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003dde:	2b10      	cmp	r3, #16
 8003de0:	d10f      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de2:	4b89      	ldr	r3, [pc, #548]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de6:	4a88      	ldr	r2, [pc, #544]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003dee:	e00e      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3304      	adds	r3, #4
 8003df4:	2102      	movs	r1, #2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f001 f866 	bl	8004ec8 <RCCEx_PLL2_Config>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003e00:	e005      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	75fb      	strb	r3, [r7, #23]
      break;
 8003e06:	e002      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003e08:	bf00      	nop
 8003e0a:	e000      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003e0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e0e:	7dfb      	ldrb	r3, [r7, #23]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d109      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e14:	4b7c      	ldr	r3, [pc, #496]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e20:	4979      	ldr	r1, [pc, #484]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e26:	e001      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
 8003e2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d047      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e40:	d030      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003e42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e46:	d82a      	bhi.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003e48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e4c:	d02c      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003e4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e52:	d824      	bhi.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e58:	d018      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5e:	d81e      	bhi.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e68:	d007      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003e6a:	e018      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e6c:	4b66      	ldr	r3, [pc, #408]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	4a65      	ldr	r2, [pc, #404]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e78:	e017      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4618      	mov	r0, r3
 8003e82:	f001 f821 	bl	8004ec8 <RCCEx_PLL2_Config>
 8003e86:	4603      	mov	r3, r0
 8003e88:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e8a:	e00e      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3324      	adds	r3, #36	; 0x24
 8003e90:	2100      	movs	r1, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f001 f8ca 	bl	800502c <RCCEx_PLL3_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e9c:	e005      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea2:	e002      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003ea4:	bf00      	nop
 8003ea6:	e000      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003ea8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eaa:	7dfb      	ldrb	r3, [r7, #23]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d109      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003eb0:	4b55      	ldr	r3, [pc, #340]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebc:	4952      	ldr	r1, [pc, #328]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	650b      	str	r3, [r1, #80]	; 0x50
 8003ec2:	e001      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
 8003ec6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d049      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003edc:	d02e      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003ede:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee2:	d828      	bhi.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003ee4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ee8:	d02a      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003eea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003eee:	d822      	bhi.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003ef0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ef4:	d026      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003ef6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003efa:	d81c      	bhi.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003efc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f00:	d010      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003f02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f06:	d816      	bhi.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d01d      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f10:	d111      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3304      	adds	r3, #4
 8003f16:	2101      	movs	r1, #1
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 ffd5 	bl	8004ec8 <RCCEx_PLL2_Config>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003f22:	e012      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3324      	adds	r3, #36	; 0x24
 8003f28:	2101      	movs	r1, #1
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f001 f87e 	bl	800502c <RCCEx_PLL3_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003f34:	e009      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	75fb      	strb	r3, [r7, #23]
      break;
 8003f3a:	e006      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003f3c:	bf00      	nop
 8003f3e:	e004      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003f40:	bf00      	nop
 8003f42:	e002      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003f44:	bf00      	nop
 8003f46:	e000      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f50:	4b2d      	ldr	r3, [pc, #180]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f54:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5c:	492a      	ldr	r1, [pc, #168]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	650b      	str	r3, [r1, #80]	; 0x50
 8003f62:	e001      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	7dfb      	ldrb	r3, [r7, #23]
 8003f66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d04d      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f7e:	d02e      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f84:	d828      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8a:	d02a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f90:	d822      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003f92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f96:	d026      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003f98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f9c:	d81c      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fa2:	d010      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fa8:	d816      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d01d      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003fae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fb2:	d111      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	2101      	movs	r1, #1
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 ff84 	bl	8004ec8 <RCCEx_PLL2_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003fc4:	e012      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3324      	adds	r3, #36	; 0x24
 8003fca:	2101      	movs	r1, #1
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 f82d 	bl	800502c <RCCEx_PLL3_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003fd6:	e009      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	75fb      	strb	r3, [r7, #23]
      break;
 8003fdc:	e006      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003fde:	bf00      	nop
 8003fe0:	e004      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e002      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10c      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ff2:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004000:	4901      	ldr	r1, [pc, #4]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004002:	4313      	orrs	r3, r2
 8004004:	658b      	str	r3, [r1, #88]	; 0x58
 8004006:	e003      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004008:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d02f      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004024:	d00e      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800402a:	d814      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800402c:	2b00      	cmp	r3, #0
 800402e:	d015      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004030:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004034:	d10f      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004036:	4baf      	ldr	r3, [pc, #700]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	4aae      	ldr	r2, [pc, #696]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800403c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004040:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004042:	e00c      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3304      	adds	r3, #4
 8004048:	2101      	movs	r1, #1
 800404a:	4618      	mov	r0, r3
 800404c:	f000 ff3c 	bl	8004ec8 <RCCEx_PLL2_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004054:	e003      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	75fb      	strb	r3, [r7, #23]
      break;
 800405a:	e000      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800405c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800405e:	7dfb      	ldrb	r3, [r7, #23]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d109      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004064:	4ba3      	ldr	r3, [pc, #652]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004068:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004070:	49a0      	ldr	r1, [pc, #640]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004072:	4313      	orrs	r3, r2
 8004074:	650b      	str	r3, [r1, #80]	; 0x50
 8004076:	e001      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004078:	7dfb      	ldrb	r3, [r7, #23]
 800407a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d032      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408c:	2b03      	cmp	r3, #3
 800408e:	d81b      	bhi.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004090:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004096:	bf00      	nop
 8004098:	080040cf 	.word	0x080040cf
 800409c:	080040a9 	.word	0x080040a9
 80040a0:	080040b7 	.word	0x080040b7
 80040a4:	080040cf 	.word	0x080040cf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040a8:	4b92      	ldr	r3, [pc, #584]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	4a91      	ldr	r2, [pc, #580]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80040b4:	e00c      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3304      	adds	r3, #4
 80040ba:	2102      	movs	r1, #2
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 ff03 	bl	8004ec8 <RCCEx_PLL2_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80040c6:	e003      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	75fb      	strb	r3, [r7, #23]
      break;
 80040cc:	e000      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80040ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d109      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80040d6:	4b87      	ldr	r3, [pc, #540]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040da:	f023 0203 	bic.w	r2, r3, #3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	4984      	ldr	r1, [pc, #528]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80040e8:	e001      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ea:	7dfb      	ldrb	r3, [r7, #23]
 80040ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 8086 	beq.w	8004208 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040fc:	4b7e      	ldr	r3, [pc, #504]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a7d      	ldr	r2, [pc, #500]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004106:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004108:	f7fe f9ae 	bl	8002468 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800410e:	e009      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004110:	f7fe f9aa 	bl	8002468 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b64      	cmp	r3, #100	; 0x64
 800411c:	d902      	bls.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	75fb      	strb	r3, [r7, #23]
        break;
 8004122:	e005      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004124:	4b74      	ldr	r3, [pc, #464]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0ef      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004130:	7dfb      	ldrb	r3, [r7, #23]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d166      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004136:	4b6f      	ldr	r3, [pc, #444]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004138:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004140:	4053      	eors	r3, r2
 8004142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004146:	2b00      	cmp	r3, #0
 8004148:	d013      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800414a:	4b6a      	ldr	r3, [pc, #424]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800414c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004152:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004154:	4b67      	ldr	r3, [pc, #412]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004158:	4a66      	ldr	r2, [pc, #408]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800415a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004160:	4b64      	ldr	r3, [pc, #400]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004164:	4a63      	ldr	r2, [pc, #396]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800416a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800416c:	4a61      	ldr	r2, [pc, #388]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800417c:	d115      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417e:	f7fe f973 	bl	8002468 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004184:	e00b      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004186:	f7fe f96f 	bl	8002468 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	f241 3288 	movw	r2, #5000	; 0x1388
 8004194:	4293      	cmp	r3, r2
 8004196:	d902      	bls.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	75fb      	strb	r3, [r7, #23]
            break;
 800419c:	e005      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800419e:	4b55      	ldr	r3, [pc, #340]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0ed      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80041aa:	7dfb      	ldrb	r3, [r7, #23]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d126      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041be:	d10d      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80041c0:	4b4c      	ldr	r3, [pc, #304]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041ce:	0919      	lsrs	r1, r3, #4
 80041d0:	4b4a      	ldr	r3, [pc, #296]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80041d2:	400b      	ands	r3, r1
 80041d4:	4947      	ldr	r1, [pc, #284]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	610b      	str	r3, [r1, #16]
 80041da:	e005      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80041dc:	4b45      	ldr	r3, [pc, #276]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	4a44      	ldr	r2, [pc, #272]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80041e6:	6113      	str	r3, [r2, #16]
 80041e8:	4b42      	ldr	r3, [pc, #264]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f6:	493f      	ldr	r1, [pc, #252]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	670b      	str	r3, [r1, #112]	; 0x70
 80041fc:	e004      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041fe:	7dfb      	ldrb	r3, [r7, #23]
 8004200:	75bb      	strb	r3, [r7, #22]
 8004202:	e001      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004204:	7dfb      	ldrb	r3, [r7, #23]
 8004206:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8085 	beq.w	8004320 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800421a:	2b28      	cmp	r3, #40	; 0x28
 800421c:	d866      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800421e:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004224:	08004301 	.word	0x08004301
 8004228:	080042ed 	.word	0x080042ed
 800422c:	080042ed 	.word	0x080042ed
 8004230:	080042ed 	.word	0x080042ed
 8004234:	080042ed 	.word	0x080042ed
 8004238:	080042ed 	.word	0x080042ed
 800423c:	080042ed 	.word	0x080042ed
 8004240:	080042ed 	.word	0x080042ed
 8004244:	080042c9 	.word	0x080042c9
 8004248:	080042ed 	.word	0x080042ed
 800424c:	080042ed 	.word	0x080042ed
 8004250:	080042ed 	.word	0x080042ed
 8004254:	080042ed 	.word	0x080042ed
 8004258:	080042ed 	.word	0x080042ed
 800425c:	080042ed 	.word	0x080042ed
 8004260:	080042ed 	.word	0x080042ed
 8004264:	080042db 	.word	0x080042db
 8004268:	080042ed 	.word	0x080042ed
 800426c:	080042ed 	.word	0x080042ed
 8004270:	080042ed 	.word	0x080042ed
 8004274:	080042ed 	.word	0x080042ed
 8004278:	080042ed 	.word	0x080042ed
 800427c:	080042ed 	.word	0x080042ed
 8004280:	080042ed 	.word	0x080042ed
 8004284:	08004301 	.word	0x08004301
 8004288:	080042ed 	.word	0x080042ed
 800428c:	080042ed 	.word	0x080042ed
 8004290:	080042ed 	.word	0x080042ed
 8004294:	080042ed 	.word	0x080042ed
 8004298:	080042ed 	.word	0x080042ed
 800429c:	080042ed 	.word	0x080042ed
 80042a0:	080042ed 	.word	0x080042ed
 80042a4:	08004301 	.word	0x08004301
 80042a8:	080042ed 	.word	0x080042ed
 80042ac:	080042ed 	.word	0x080042ed
 80042b0:	080042ed 	.word	0x080042ed
 80042b4:	080042ed 	.word	0x080042ed
 80042b8:	080042ed 	.word	0x080042ed
 80042bc:	080042ed 	.word	0x080042ed
 80042c0:	080042ed 	.word	0x080042ed
 80042c4:	08004301 	.word	0x08004301
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3304      	adds	r3, #4
 80042cc:	2101      	movs	r1, #1
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fdfa 	bl	8004ec8 <RCCEx_PLL2_Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80042d8:	e013      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3324      	adds	r3, #36	; 0x24
 80042de:	2101      	movs	r1, #1
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fea3 	bl	800502c <RCCEx_PLL3_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80042ea:	e00a      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	75fb      	strb	r3, [r7, #23]
      break;
 80042f0:	e007      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80042f2:	bf00      	nop
 80042f4:	58024400 	.word	0x58024400
 80042f8:	58024800 	.word	0x58024800
 80042fc:	00ffffcf 	.word	0x00ffffcf
      break;
 8004300:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004302:	7dfb      	ldrb	r3, [r7, #23]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004308:	4b96      	ldr	r3, [pc, #600]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004314:	4993      	ldr	r1, [pc, #588]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004316:	4313      	orrs	r3, r2
 8004318:	654b      	str	r3, [r1, #84]	; 0x54
 800431a:	e001      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431c:	7dfb      	ldrb	r3, [r7, #23]
 800431e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d038      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004330:	2b05      	cmp	r3, #5
 8004332:	d821      	bhi.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004334:	a201      	add	r2, pc, #4	; (adr r2, 800433c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433a:	bf00      	nop
 800433c:	0800437f 	.word	0x0800437f
 8004340:	08004355 	.word	0x08004355
 8004344:	08004367 	.word	0x08004367
 8004348:	0800437f 	.word	0x0800437f
 800434c:	0800437f 	.word	0x0800437f
 8004350:	0800437f 	.word	0x0800437f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3304      	adds	r3, #4
 8004358:	2101      	movs	r1, #1
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fdb4 	bl	8004ec8 <RCCEx_PLL2_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004364:	e00c      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3324      	adds	r3, #36	; 0x24
 800436a:	2101      	movs	r1, #1
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fe5d 	bl	800502c <RCCEx_PLL3_Config>
 8004372:	4603      	mov	r3, r0
 8004374:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004376:	e003      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	75fb      	strb	r3, [r7, #23]
      break;
 800437c:	e000      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800437e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004380:	7dfb      	ldrb	r3, [r7, #23]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d109      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004386:	4b77      	ldr	r3, [pc, #476]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	f023 0207 	bic.w	r2, r3, #7
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004392:	4974      	ldr	r1, [pc, #464]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004394:	4313      	orrs	r3, r2
 8004396:	654b      	str	r3, [r1, #84]	; 0x54
 8004398:	e001      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439a:	7dfb      	ldrb	r3, [r7, #23]
 800439c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d03a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b0:	2b05      	cmp	r3, #5
 80043b2:	d821      	bhi.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80043b4:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80043b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ba:	bf00      	nop
 80043bc:	080043ff 	.word	0x080043ff
 80043c0:	080043d5 	.word	0x080043d5
 80043c4:	080043e7 	.word	0x080043e7
 80043c8:	080043ff 	.word	0x080043ff
 80043cc:	080043ff 	.word	0x080043ff
 80043d0:	080043ff 	.word	0x080043ff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3304      	adds	r3, #4
 80043d8:	2101      	movs	r1, #1
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fd74 	bl	8004ec8 <RCCEx_PLL2_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80043e4:	e00c      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	3324      	adds	r3, #36	; 0x24
 80043ea:	2101      	movs	r1, #1
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fe1d 	bl	800502c <RCCEx_PLL3_Config>
 80043f2:	4603      	mov	r3, r0
 80043f4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80043f6:	e003      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	75fb      	strb	r3, [r7, #23]
      break;
 80043fc:	e000      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80043fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004406:	4b57      	ldr	r3, [pc, #348]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440a:	f023 0207 	bic.w	r2, r3, #7
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004414:	4953      	ldr	r1, [pc, #332]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004416:	4313      	orrs	r3, r2
 8004418:	658b      	str	r3, [r1, #88]	; 0x58
 800441a:	e001      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d04b      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004436:	d02e      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800443c:	d828      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800443e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004442:	d02a      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004448:	d822      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800444a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800444e:	d026      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004450:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004454:	d81c      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800445a:	d010      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800445c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004460:	d816      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d01d      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800446a:	d111      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3304      	adds	r3, #4
 8004470:	2100      	movs	r1, #0
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fd28 	bl	8004ec8 <RCCEx_PLL2_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800447c:	e012      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3324      	adds	r3, #36	; 0x24
 8004482:	2102      	movs	r1, #2
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fdd1 	bl	800502c <RCCEx_PLL3_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800448e:	e009      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	75fb      	strb	r3, [r7, #23]
      break;
 8004494:	e006      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004496:	bf00      	nop
 8004498:	e004      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800449a:	bf00      	nop
 800449c:	e002      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80044a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044a4:	7dfb      	ldrb	r3, [r7, #23]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10a      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044aa:	4b2e      	ldr	r3, [pc, #184]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80044ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044b8:	492a      	ldr	r1, [pc, #168]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	654b      	str	r3, [r1, #84]	; 0x54
 80044be:	e001      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
 80044c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d04d      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80044da:	d02e      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80044dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80044e0:	d828      	bhi.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80044e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e6:	d02a      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80044e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ec:	d822      	bhi.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80044ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044f2:	d026      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80044f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044f8:	d81c      	bhi.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80044fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044fe:	d010      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004504:	d816      	bhi.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d01d      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800450a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800450e:	d111      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3304      	adds	r3, #4
 8004514:	2100      	movs	r1, #0
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fcd6 	bl	8004ec8 <RCCEx_PLL2_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004520:	e012      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3324      	adds	r3, #36	; 0x24
 8004526:	2102      	movs	r1, #2
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fd7f 	bl	800502c <RCCEx_PLL3_Config>
 800452e:	4603      	mov	r3, r0
 8004530:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004532:	e009      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	75fb      	strb	r3, [r7, #23]
      break;
 8004538:	e006      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800453a:	bf00      	nop
 800453c:	e004      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800453e:	bf00      	nop
 8004540:	e002      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004542:	bf00      	nop
 8004544:	e000      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004548:	7dfb      	ldrb	r3, [r7, #23]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10c      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800454e:	4b05      	ldr	r3, [pc, #20]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004552:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800455c:	4901      	ldr	r1, [pc, #4]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800455e:	4313      	orrs	r3, r2
 8004560:	658b      	str	r3, [r1, #88]	; 0x58
 8004562:	e003      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004564:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004568:	7dfb      	ldrb	r3, [r7, #23]
 800456a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004574:	2b00      	cmp	r3, #0
 8004576:	d04b      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800457e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004582:	d02e      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004584:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004588:	d828      	bhi.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800458a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800458e:	d02a      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004594:	d822      	bhi.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004596:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800459a:	d026      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800459c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80045a0:	d81c      	bhi.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80045a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045a6:	d010      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80045a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045ac:	d816      	bhi.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d01d      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80045b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b6:	d111      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3304      	adds	r3, #4
 80045bc:	2100      	movs	r1, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fc82 	bl	8004ec8 <RCCEx_PLL2_Config>
 80045c4:	4603      	mov	r3, r0
 80045c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80045c8:	e012      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	3324      	adds	r3, #36	; 0x24
 80045ce:	2102      	movs	r1, #2
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 fd2b 	bl	800502c <RCCEx_PLL3_Config>
 80045d6:	4603      	mov	r3, r0
 80045d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80045da:	e009      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	75fb      	strb	r3, [r7, #23]
      break;
 80045e0:	e006      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80045e2:	bf00      	nop
 80045e4:	e004      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80045e6:	bf00      	nop
 80045e8:	e002      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80045ea:	bf00      	nop
 80045ec:	e000      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80045ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045f0:	7dfb      	ldrb	r3, [r7, #23]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10a      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80045f6:	4b9d      	ldr	r3, [pc, #628]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004604:	4999      	ldr	r1, [pc, #612]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004606:	4313      	orrs	r3, r2
 8004608:	658b      	str	r3, [r1, #88]	; 0x58
 800460a:	e001      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460c:	7dfb      	ldrb	r3, [r7, #23]
 800460e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004626:	d10a      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3324      	adds	r3, #36	; 0x24
 800462c:	2102      	movs	r1, #2
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fcfc 	bl	800502c <RCCEx_PLL3_Config>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800463e:	4b8b      	ldr	r3, [pc, #556]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004642:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800464c:	4987      	ldr	r1, [pc, #540]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800464e:	4313      	orrs	r3, r2
 8004650:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	2b00      	cmp	r3, #0
 800465c:	d01a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004668:	d10a      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3324      	adds	r3, #36	; 0x24
 800466e:	2102      	movs	r1, #2
 8004670:	4618      	mov	r0, r3
 8004672:	f000 fcdb 	bl	800502c <RCCEx_PLL3_Config>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004680:	4b7a      	ldr	r3, [pc, #488]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800468e:	4977      	ldr	r1, [pc, #476]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004690:	4313      	orrs	r3, r2
 8004692:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d034      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046aa:	d01d      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80046ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046b0:	d817      	bhi.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80046b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ba:	d009      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80046bc:	e011      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	2100      	movs	r1, #0
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fbff 	bl	8004ec8 <RCCEx_PLL2_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80046ce:	e00c      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3324      	adds	r3, #36	; 0x24
 80046d4:	2102      	movs	r1, #2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fca8 	bl	800502c <RCCEx_PLL3_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80046e0:	e003      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	75fb      	strb	r3, [r7, #23]
      break;
 80046e6:	e000      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80046e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10a      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046f0:	4b5e      	ldr	r3, [pc, #376]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80046f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046fe:	495b      	ldr	r1, [pc, #364]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004700:	4313      	orrs	r3, r2
 8004702:	658b      	str	r3, [r1, #88]	; 0x58
 8004704:	e001      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004706:	7dfb      	ldrb	r3, [r7, #23]
 8004708:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d033      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800471c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004720:	d01c      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004722:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004726:	d816      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800472c:	d003      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800472e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004732:	d007      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004734:	e00f      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004736:	4b4d      	ldr	r3, [pc, #308]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	4a4c      	ldr	r2, [pc, #304]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800473c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004740:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004742:	e00c      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3324      	adds	r3, #36	; 0x24
 8004748:	2101      	movs	r1, #1
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fc6e 	bl	800502c <RCCEx_PLL3_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004754:	e003      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	75fb      	strb	r3, [r7, #23]
      break;
 800475a:	e000      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800475c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800475e:	7dfb      	ldrb	r3, [r7, #23]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10a      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004764:	4b41      	ldr	r3, [pc, #260]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004768:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004772:	493e      	ldr	r1, [pc, #248]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004774:	4313      	orrs	r3, r2
 8004776:	654b      	str	r3, [r1, #84]	; 0x54
 8004778:	e001      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477a:	7dfb      	ldrb	r3, [r7, #23]
 800477c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d029      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004796:	d007      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004798:	e00f      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800479a:	4b34      	ldr	r3, [pc, #208]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	4a33      	ldr	r2, [pc, #204]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80047a6:	e00b      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3304      	adds	r3, #4
 80047ac:	2102      	movs	r1, #2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fb8a 	bl	8004ec8 <RCCEx_PLL2_Config>
 80047b4:	4603      	mov	r3, r0
 80047b6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80047b8:	e002      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	75fb      	strb	r3, [r7, #23]
      break;
 80047be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047c0:	7dfb      	ldrb	r3, [r7, #23]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80047c6:	4b29      	ldr	r3, [pc, #164]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d2:	4926      	ldr	r1, [pc, #152]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80047d8:	e001      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047da:	7dfb      	ldrb	r3, [r7, #23]
 80047dc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3324      	adds	r3, #36	; 0x24
 80047ee:	2102      	movs	r1, #2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fc1b 	bl	800502c <RCCEx_PLL3_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d033      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004814:	d017      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004816:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800481a:	d811      	bhi.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800481c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004820:	d013      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004826:	d80b      	bhi.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d010      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800482c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004830:	d106      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004832:	4b0e      	ldr	r3, [pc, #56]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	4a0d      	ldr	r2, [pc, #52]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800483c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800483e:	e007      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	75fb      	strb	r3, [r7, #23]
      break;
 8004844:	e004      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004846:	bf00      	nop
 8004848:	e002      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800484a:	bf00      	nop
 800484c:	e000      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800484e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004850:	7dfb      	ldrb	r3, [r7, #23]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10c      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004862:	4902      	ldr	r1, [pc, #8]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004864:	4313      	orrs	r3, r2
 8004866:	654b      	str	r3, [r1, #84]	; 0x54
 8004868:	e004      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800486a:	bf00      	nop
 800486c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004870:	7dfb      	ldrb	r3, [r7, #23]
 8004872:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004880:	4b31      	ldr	r3, [pc, #196]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004884:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488c:	492e      	ldr	r1, [pc, #184]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800488e:	4313      	orrs	r3, r2
 8004890:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d009      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800489e:	4b2a      	ldr	r3, [pc, #168]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048ac:	4926      	ldr	r1, [pc, #152]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d008      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048be:	4b22      	ldr	r3, [pc, #136]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048ca:	491f      	ldr	r1, [pc, #124]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00d      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048dc:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	4a19      	ldr	r2, [pc, #100]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048e6:	6113      	str	r3, [r2, #16]
 80048e8:	4b17      	ldr	r3, [pc, #92]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80048f2:	4915      	ldr	r1, [pc, #84]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	da08      	bge.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004900:	4b11      	ldr	r3, [pc, #68]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004904:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800490c:	490e      	ldr	r1, [pc, #56]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800490e:	4313      	orrs	r3, r2
 8004910:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800491e:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004922:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492c:	4906      	ldr	r1, [pc, #24]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800492e:	4313      	orrs	r3, r2
 8004930:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004932:	7dbb      	ldrb	r3, [r7, #22]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004938:	2300      	movs	r3, #0
 800493a:	e000      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	58024400 	.word	0x58024400

0800494c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004950:	f7ff f85a 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8004954:	4602      	mov	r2, r0
 8004956:	4b06      	ldr	r3, [pc, #24]	; (8004970 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	091b      	lsrs	r3, r3, #4
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	4904      	ldr	r1, [pc, #16]	; (8004974 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004962:	5ccb      	ldrb	r3, [r1, r3]
 8004964:	f003 031f 	and.w	r3, r3, #31
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800496c:	4618      	mov	r0, r3
 800496e:	bd80      	pop	{r7, pc}
 8004970:	58024400 	.word	0x58024400
 8004974:	080092ac 	.word	0x080092ac

08004978 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004978:	b480      	push	{r7}
 800497a:	b089      	sub	sp, #36	; 0x24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004980:	4ba1      	ldr	r3, [pc, #644]	; (8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004984:	f003 0303 	and.w	r3, r3, #3
 8004988:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800498a:	4b9f      	ldr	r3, [pc, #636]	; (8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800498c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498e:	0b1b      	lsrs	r3, r3, #12
 8004990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004994:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004996:	4b9c      	ldr	r3, [pc, #624]	; (8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	091b      	lsrs	r3, r3, #4
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80049a2:	4b99      	ldr	r3, [pc, #612]	; (8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a6:	08db      	lsrs	r3, r3, #3
 80049a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	fb02 f303 	mul.w	r3, r2, r3
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 8111 	beq.w	8004be8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	f000 8083 	beq.w	8004ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	f200 80a1 	bhi.w	8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d056      	beq.n	8004a90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80049e2:	e099      	b.n	8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049e4:	4b88      	ldr	r3, [pc, #544]	; (8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d02d      	beq.n	8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049f0:	4b85      	ldr	r3, [pc, #532]	; (8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	08db      	lsrs	r3, r3, #3
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	4a84      	ldr	r2, [pc, #528]	; (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80049fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004a00:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	ee07 3a90 	vmov	s15, r3
 8004a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1a:	4b7b      	ldr	r3, [pc, #492]	; (8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a46:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004a4a:	e087      	b.n	8004b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a5e:	4b6a      	ldr	r3, [pc, #424]	; (8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a66:	ee07 3a90 	vmov	s15, r3
 8004a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a72:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a8e:	e065      	b.n	8004b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa2:	4b59      	ldr	r3, [pc, #356]	; (8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ab6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ace:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ad2:	e043      	b.n	8004b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ade:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ae6:	4b48      	ldr	r3, [pc, #288]	; (8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004afa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b16:	e021      	b.n	8004b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b2a:	4b37      	ldr	r3, [pc, #220]	; (8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004b5c:	4b2a      	ldr	r3, [pc, #168]	; (8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	0a5b      	lsrs	r3, r3, #9
 8004b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b82:	ee17 2a90 	vmov	r2, s15
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004b8a:	4b1f      	ldr	r3, [pc, #124]	; (8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8e:	0c1b      	lsrs	r3, r3, #16
 8004b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b94:	ee07 3a90 	vmov	s15, r3
 8004b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ba0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ba4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bb0:	ee17 2a90 	vmov	r2, s15
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004bb8:	4b13      	ldr	r3, [pc, #76]	; (8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	0e1b      	lsrs	r3, r3, #24
 8004bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bde:	ee17 2a90 	vmov	r2, s15
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004be6:	e008      	b.n	8004bfa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	609a      	str	r2, [r3, #8]
}
 8004bfa:	bf00      	nop
 8004bfc:	3724      	adds	r7, #36	; 0x24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	58024400 	.word	0x58024400
 8004c0c:	03d09000 	.word	0x03d09000
 8004c10:	46000000 	.word	0x46000000
 8004c14:	4c742400 	.word	0x4c742400
 8004c18:	4a742400 	.word	0x4a742400
 8004c1c:	4af42400 	.word	0x4af42400

08004c20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b089      	sub	sp, #36	; 0x24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c28:	4ba1      	ldr	r3, [pc, #644]	; (8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	f003 0303 	and.w	r3, r3, #3
 8004c30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004c32:	4b9f      	ldr	r3, [pc, #636]	; (8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c36:	0d1b      	lsrs	r3, r3, #20
 8004c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c3e:	4b9c      	ldr	r3, [pc, #624]	; (8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	0a1b      	lsrs	r3, r3, #8
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004c4a:	4b99      	ldr	r3, [pc, #612]	; (8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4e:	08db      	lsrs	r3, r3, #3
 8004c50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	fb02 f303 	mul.w	r3, r2, r3
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8111 	beq.w	8004e90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	f000 8083 	beq.w	8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	f200 80a1 	bhi.w	8004dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d056      	beq.n	8004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c8a:	e099      	b.n	8004dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c8c:	4b88      	ldr	r3, [pc, #544]	; (8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0320 	and.w	r3, r3, #32
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d02d      	beq.n	8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c98:	4b85      	ldr	r3, [pc, #532]	; (8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	08db      	lsrs	r3, r3, #3
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	4a84      	ldr	r2, [pc, #528]	; (8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	ee07 3a90 	vmov	s15, r3
 8004cb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc2:	4b7b      	ldr	r3, [pc, #492]	; (8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cd6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004cf2:	e087      	b.n	8004e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ebc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d06:	4b6a      	ldr	r3, [pc, #424]	; (8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0e:	ee07 3a90 	vmov	s15, r3
 8004d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d36:	e065      	b.n	8004e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	ee07 3a90 	vmov	s15, r3
 8004d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d4a:	4b59      	ldr	r3, [pc, #356]	; (8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d52:	ee07 3a90 	vmov	s15, r3
 8004d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d7a:	e043      	b.n	8004e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d8e:	4b48      	ldr	r3, [pc, #288]	; (8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d96:	ee07 3a90 	vmov	s15, r3
 8004d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004da2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004dbe:	e021      	b.n	8004e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dd2:	4b37      	ldr	r3, [pc, #220]	; (8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004de6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004e04:	4b2a      	ldr	r3, [pc, #168]	; (8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e08:	0a5b      	lsrs	r3, r3, #9
 8004e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e2a:	ee17 2a90 	vmov	r2, s15
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004e32:	4b1f      	ldr	r3, [pc, #124]	; (8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	0c1b      	lsrs	r3, r3, #16
 8004e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e3c:	ee07 3a90 	vmov	s15, r3
 8004e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e58:	ee17 2a90 	vmov	r2, s15
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004e60:	4b13      	ldr	r3, [pc, #76]	; (8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	0e1b      	lsrs	r3, r3, #24
 8004e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e86:	ee17 2a90 	vmov	r2, s15
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	609a      	str	r2, [r3, #8]
}
 8004ea2:	bf00      	nop
 8004ea4:	3724      	adds	r7, #36	; 0x24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	58024400 	.word	0x58024400
 8004eb4:	03d09000 	.word	0x03d09000
 8004eb8:	46000000 	.word	0x46000000
 8004ebc:	4c742400 	.word	0x4c742400
 8004ec0:	4a742400 	.word	0x4a742400
 8004ec4:	4af42400 	.word	0x4af42400

08004ec8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ed6:	4b53      	ldr	r3, [pc, #332]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d101      	bne.n	8004ee6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e099      	b.n	800501a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ee6:	4b4f      	ldr	r3, [pc, #316]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a4e      	ldr	r2, [pc, #312]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004eec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef2:	f7fd fab9 	bl	8002468 <HAL_GetTick>
 8004ef6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ef8:	e008      	b.n	8004f0c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004efa:	f7fd fab5 	bl	8002468 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e086      	b.n	800501a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f0c:	4b45      	ldr	r3, [pc, #276]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1f0      	bne.n	8004efa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f18:	4b42      	ldr	r3, [pc, #264]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	031b      	lsls	r3, r3, #12
 8004f26:	493f      	ldr	r1, [pc, #252]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	628b      	str	r3, [r1, #40]	; 0x28
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	025b      	lsls	r3, r3, #9
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	041b      	lsls	r3, r3, #16
 8004f4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	061b      	lsls	r3, r3, #24
 8004f58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f5c:	4931      	ldr	r1, [pc, #196]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f62:	4b30      	ldr	r3, [pc, #192]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	492d      	ldr	r1, [pc, #180]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f74:	4b2b      	ldr	r3, [pc, #172]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	f023 0220 	bic.w	r2, r3, #32
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	4928      	ldr	r1, [pc, #160]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f86:	4b27      	ldr	r3, [pc, #156]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	4a26      	ldr	r2, [pc, #152]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004f8c:	f023 0310 	bic.w	r3, r3, #16
 8004f90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f92:	4b24      	ldr	r3, [pc, #144]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004f94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f96:	4b24      	ldr	r3, [pc, #144]	; (8005028 <RCCEx_PLL2_Config+0x160>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	69d2      	ldr	r2, [r2, #28]
 8004f9e:	00d2      	lsls	r2, r2, #3
 8004fa0:	4920      	ldr	r1, [pc, #128]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004fa6:	4b1f      	ldr	r3, [pc, #124]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	4a1e      	ldr	r2, [pc, #120]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004fac:	f043 0310 	orr.w	r3, r3, #16
 8004fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d106      	bne.n	8004fc6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004fb8:	4b1a      	ldr	r3, [pc, #104]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	4a19      	ldr	r2, [pc, #100]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004fbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fc4:	e00f      	b.n	8004fe6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d106      	bne.n	8004fda <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004fcc:	4b15      	ldr	r3, [pc, #84]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd0:	4a14      	ldr	r2, [pc, #80]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fd8:	e005      	b.n	8004fe6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004fda:	4b12      	ldr	r3, [pc, #72]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fde:	4a11      	ldr	r2, [pc, #68]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004fe0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fe4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004fe6:	4b0f      	ldr	r3, [pc, #60]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a0e      	ldr	r2, [pc, #56]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 8004fec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ff0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ff2:	f7fd fa39 	bl	8002468 <HAL_GetTick>
 8004ff6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ff8:	e008      	b.n	800500c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004ffa:	f7fd fa35 	bl	8002468 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e006      	b.n	800501a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800500c:	4b05      	ldr	r3, [pc, #20]	; (8005024 <RCCEx_PLL2_Config+0x15c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0f0      	beq.n	8004ffa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005018:	7bfb      	ldrb	r3, [r7, #15]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	58024400 	.word	0x58024400
 8005028:	ffff0007 	.word	0xffff0007

0800502c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800503a:	4b53      	ldr	r3, [pc, #332]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	2b03      	cmp	r3, #3
 8005044:	d101      	bne.n	800504a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e099      	b.n	800517e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800504a:	4b4f      	ldr	r3, [pc, #316]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a4e      	ldr	r2, [pc, #312]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 8005050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005054:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005056:	f7fd fa07 	bl	8002468 <HAL_GetTick>
 800505a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800505c:	e008      	b.n	8005070 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800505e:	f7fd fa03 	bl	8002468 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d901      	bls.n	8005070 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e086      	b.n	800517e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005070:	4b45      	ldr	r3, [pc, #276]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1f0      	bne.n	800505e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800507c:	4b42      	ldr	r3, [pc, #264]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	051b      	lsls	r3, r3, #20
 800508a:	493f      	ldr	r1, [pc, #252]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 800508c:	4313      	orrs	r3, r2
 800508e:	628b      	str	r3, [r1, #40]	; 0x28
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	3b01      	subs	r3, #1
 8005096:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	3b01      	subs	r3, #1
 80050a0:	025b      	lsls	r3, r3, #9
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	041b      	lsls	r3, r3, #16
 80050ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	3b01      	subs	r3, #1
 80050ba:	061b      	lsls	r3, r3, #24
 80050bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050c0:	4931      	ldr	r1, [pc, #196]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80050c6:	4b30      	ldr	r3, [pc, #192]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	492d      	ldr	r1, [pc, #180]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80050d8:	4b2b      	ldr	r3, [pc, #172]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	4928      	ldr	r1, [pc, #160]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80050ea:	4b27      	ldr	r3, [pc, #156]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	4a26      	ldr	r2, [pc, #152]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 80050f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80050f6:	4b24      	ldr	r3, [pc, #144]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 80050f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050fa:	4b24      	ldr	r3, [pc, #144]	; (800518c <RCCEx_PLL3_Config+0x160>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	69d2      	ldr	r2, [r2, #28]
 8005102:	00d2      	lsls	r2, r2, #3
 8005104:	4920      	ldr	r1, [pc, #128]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 8005106:	4313      	orrs	r3, r2
 8005108:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800510a:	4b1f      	ldr	r3, [pc, #124]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	4a1e      	ldr	r2, [pc, #120]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 8005110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005114:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d106      	bne.n	800512a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800511c:	4b1a      	ldr	r3, [pc, #104]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	4a19      	ldr	r2, [pc, #100]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 8005122:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005126:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005128:	e00f      	b.n	800514a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d106      	bne.n	800513e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005130:	4b15      	ldr	r3, [pc, #84]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	4a14      	ldr	r2, [pc, #80]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 8005136:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800513a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800513c:	e005      	b.n	800514a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800513e:	4b12      	ldr	r3, [pc, #72]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	4a11      	ldr	r2, [pc, #68]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 8005144:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005148:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800514a:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a0e      	ldr	r2, [pc, #56]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 8005150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005156:	f7fd f987 	bl	8002468 <HAL_GetTick>
 800515a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800515c:	e008      	b.n	8005170 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800515e:	f7fd f983 	bl	8002468 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e006      	b.n	800517e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005170:	4b05      	ldr	r3, [pc, #20]	; (8005188 <RCCEx_PLL3_Config+0x15c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f0      	beq.n	800515e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800517c:	7bfb      	ldrb	r3, [r7, #15]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	58024400 	.word	0x58024400
 800518c:	ffff0007 	.word	0xffff0007

08005190 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e0f1      	b.n	8005386 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a78      	ldr	r2, [pc, #480]	; (8005390 <HAL_SPI_Init+0x200>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00f      	beq.n	80051d2 <HAL_SPI_Init+0x42>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a77      	ldr	r2, [pc, #476]	; (8005394 <HAL_SPI_Init+0x204>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d00a      	beq.n	80051d2 <HAL_SPI_Init+0x42>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a75      	ldr	r2, [pc, #468]	; (8005398 <HAL_SPI_Init+0x208>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d005      	beq.n	80051d2 <HAL_SPI_Init+0x42>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	2b0f      	cmp	r3, #15
 80051cc:	d901      	bls.n	80051d2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e0d9      	b.n	8005386 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 ff66 	bl	80060a4 <SPI_GetPacketSize>
 80051d8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a6c      	ldr	r2, [pc, #432]	; (8005390 <HAL_SPI_Init+0x200>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00c      	beq.n	80051fe <HAL_SPI_Init+0x6e>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a6a      	ldr	r2, [pc, #424]	; (8005394 <HAL_SPI_Init+0x204>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d007      	beq.n	80051fe <HAL_SPI_Init+0x6e>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a69      	ldr	r2, [pc, #420]	; (8005398 <HAL_SPI_Init+0x208>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d002      	beq.n	80051fe <HAL_SPI_Init+0x6e>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d811      	bhi.n	8005222 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005202:	4a63      	ldr	r2, [pc, #396]	; (8005390 <HAL_SPI_Init+0x200>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d009      	beq.n	800521c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a61      	ldr	r2, [pc, #388]	; (8005394 <HAL_SPI_Init+0x204>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d004      	beq.n	800521c <HAL_SPI_Init+0x8c>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a60      	ldr	r2, [pc, #384]	; (8005398 <HAL_SPI_Init+0x208>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d104      	bne.n	8005226 <HAL_SPI_Init+0x96>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b10      	cmp	r3, #16
 8005220:	d901      	bls.n	8005226 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e0af      	b.n	8005386 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fc fe9e 	bl	8001f7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0201 	bic.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005262:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800526c:	d119      	bne.n	80052a2 <HAL_SPI_Init+0x112>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005276:	d103      	bne.n	8005280 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800527c:	2b00      	cmp	r3, #0
 800527e:	d008      	beq.n	8005292 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10c      	bne.n	80052a2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800528c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005290:	d107      	bne.n	80052a2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69da      	ldr	r2, [r3, #28]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	431a      	orrs	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b4:	ea42 0103 	orr.w	r1, r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005302:	ea42 0103 	orr.w	r1, r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d113      	bne.n	8005342 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800532c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005340:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0201 	bic.w	r2, r2, #1
 8005350:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	40013000 	.word	0x40013000
 8005394:	40003800 	.word	0x40003800
 8005398:	40003c00 	.word	0x40003c00

0800539c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b08a      	sub	sp, #40	; 0x28
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	4613      	mov	r3, r2
 80053aa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3320      	adds	r3, #32
 80053b2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <HAL_SPI_Transmit+0x2a>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e1d7      	b.n	8005776 <HAL_SPI_Transmit+0x3da>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053ce:	f7fd f84b 	bl	8002468 <HAL_GetTick>
 80053d2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d007      	beq.n	80053f0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80053e0:	2302      	movs	r3, #2
 80053e2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80053ec:	7efb      	ldrb	r3, [r7, #27]
 80053ee:	e1c2      	b.n	8005776 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_SPI_Transmit+0x60>
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d107      	bne.n	800540c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005408:	7efb      	ldrb	r3, [r7, #27]
 800540a:	e1b4      	b.n	8005776 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2203      	movs	r2, #3
 8005410:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	88fa      	ldrh	r2, [r7, #6]
 8005426:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	88fa      	ldrh	r2, [r7, #6]
 800542e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800545c:	d107      	bne.n	800546e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800546c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	4b96      	ldr	r3, [pc, #600]	; (80056d0 <HAL_SPI_Transmit+0x334>)
 8005476:	4013      	ands	r3, r2
 8005478:	88f9      	ldrh	r1, [r7, #6]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	430b      	orrs	r3, r1
 8005480:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f042 0201 	orr.w	r2, r2, #1
 8005490:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800549a:	d107      	bne.n	80054ac <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	2b0f      	cmp	r3, #15
 80054b2:	d947      	bls.n	8005544 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80054b4:	e03f      	b.n	8005536 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d114      	bne.n	80054ee <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6812      	ldr	r2, [r2, #0]
 80054ce:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d4:	1d1a      	adds	r2, r3, #4
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80054ec:	e023      	b.n	8005536 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ee:	f7fc ffbb 	bl	8002468 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d803      	bhi.n	8005506 <HAL_SPI_Transmit+0x16a>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005504:	d102      	bne.n	800550c <HAL_SPI_Transmit+0x170>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d114      	bne.n	8005536 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 fcfb 	bl	8005f08 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005520:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e11f      	b.n	8005776 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800553c:	b29b      	uxth	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1b9      	bne.n	80054b6 <HAL_SPI_Transmit+0x11a>
 8005542:	e0f2      	b.n	800572a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	2b07      	cmp	r3, #7
 800554a:	f240 80e7 	bls.w	800571c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800554e:	e05d      	b.n	800560c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b02      	cmp	r3, #2
 800555c:	d132      	bne.n	80055c4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005564:	b29b      	uxth	r3, r3
 8005566:	2b01      	cmp	r3, #1
 8005568:	d918      	bls.n	800559c <HAL_SPI_Transmit+0x200>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556e:	2b00      	cmp	r3, #0
 8005570:	d014      	beq.n	800559c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005582:	1d1a      	adds	r2, r3, #4
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800558e:	b29b      	uxth	r3, r3
 8005590:	3b02      	subs	r3, #2
 8005592:	b29a      	uxth	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800559a:	e037      	b.n	800560c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a0:	881a      	ldrh	r2, [r3, #0]
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055aa:	1c9a      	adds	r2, r3, #2
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80055c2:	e023      	b.n	800560c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055c4:	f7fc ff50 	bl	8002468 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d803      	bhi.n	80055dc <HAL_SPI_Transmit+0x240>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055da:	d102      	bne.n	80055e2 <HAL_SPI_Transmit+0x246>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d114      	bne.n	800560c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 fc90 	bl	8005f08 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e0b4      	b.n	8005776 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005612:	b29b      	uxth	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d19b      	bne.n	8005550 <HAL_SPI_Transmit+0x1b4>
 8005618:	e087      	b.n	800572a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b02      	cmp	r3, #2
 8005626:	d155      	bne.n	80056d4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800562e:	b29b      	uxth	r3, r3
 8005630:	2b03      	cmp	r3, #3
 8005632:	d918      	bls.n	8005666 <HAL_SPI_Transmit+0x2ca>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005638:	2b40      	cmp	r3, #64	; 0x40
 800563a:	d914      	bls.n	8005666 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800564c:	1d1a      	adds	r2, r3, #4
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b04      	subs	r3, #4
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005664:	e05a      	b.n	800571c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800566c:	b29b      	uxth	r3, r3
 800566e:	2b01      	cmp	r3, #1
 8005670:	d917      	bls.n	80056a2 <HAL_SPI_Transmit+0x306>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d013      	beq.n	80056a2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800567e:	881a      	ldrh	r2, [r3, #0]
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005688:	1c9a      	adds	r2, r3, #2
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b02      	subs	r3, #2
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80056a0:	e03c      	b.n	800571c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3320      	adds	r3, #32
 80056ac:	7812      	ldrb	r2, [r2, #0]
 80056ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80056cc:	e026      	b.n	800571c <HAL_SPI_Transmit+0x380>
 80056ce:	bf00      	nop
 80056d0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056d4:	f7fc fec8 	bl	8002468 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d803      	bhi.n	80056ec <HAL_SPI_Transmit+0x350>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ea:	d102      	bne.n	80056f2 <HAL_SPI_Transmit+0x356>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d114      	bne.n	800571c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 fc08 	bl	8005f08 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005706:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e02c      	b.n	8005776 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	f47f af78 	bne.w	800561a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2200      	movs	r2, #0
 8005732:	2108      	movs	r1, #8
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 fc87 	bl	8006048 <SPI_WaitOnFlagUntilTimeout>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d007      	beq.n	8005750 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005746:	f043 0220 	orr.w	r2, r3, #32
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 fbd9 	bl	8005f08 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e000      	b.n	8005776 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8005774:	7efb      	ldrb	r3, [r7, #27]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3720      	adds	r7, #32
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop

08005780 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08a      	sub	sp, #40	; 0x28
 8005784:	af02      	add	r7, sp, #8
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	603b      	str	r3, [r7, #0]
 800578c:	4613      	mov	r3, r2
 800578e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005790:	2300      	movs	r3, #0
 8005792:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3330      	adds	r3, #48	; 0x30
 800579a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057a4:	d112      	bne.n	80057cc <HAL_SPI_Receive+0x4c>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10e      	bne.n	80057cc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2204      	movs	r2, #4
 80057b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80057b6:	88fa      	ldrh	r2, [r7, #6]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	4613      	mov	r3, r2
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	68b9      	ldr	r1, [r7, #8]
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 f978 	bl	8005ab8 <HAL_SPI_TransmitReceive>
 80057c8:	4603      	mov	r3, r0
 80057ca:	e16f      	b.n	8005aac <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_SPI_Receive+0x5a>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e168      	b.n	8005aac <HAL_SPI_Receive+0x32c>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057e2:	f7fc fe41 	bl	8002468 <HAL_GetTick>
 80057e6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d007      	beq.n	8005804 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80057f4:	2302      	movs	r3, #2
 80057f6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005800:	7ffb      	ldrb	r3, [r7, #31]
 8005802:	e153      	b.n	8005aac <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <HAL_SPI_Receive+0x90>
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d107      	bne.n	8005820 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800581c:	7ffb      	ldrb	r3, [r7, #31]
 800581e:	e145      	b.n	8005aac <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2204      	movs	r2, #4
 8005824:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	88fa      	ldrh	r2, [r7, #6]
 800583a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	88fa      	ldrh	r2, [r7, #6]
 8005842:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005870:	d107      	bne.n	8005882 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005880:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	4b8a      	ldr	r3, [pc, #552]	; (8005ab4 <HAL_SPI_Receive+0x334>)
 800588a:	4013      	ands	r3, r2
 800588c:	88f9      	ldrh	r1, [r7, #6]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	6812      	ldr	r2, [r2, #0]
 8005892:	430b      	orrs	r3, r1
 8005894:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0201 	orr.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058ae:	d107      	bne.n	80058c0 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	2b0f      	cmp	r3, #15
 80058c6:	d948      	bls.n	800595a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80058c8:	e040      	b.n	800594c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695a      	ldr	r2, [r3, #20]
 80058d0:	f248 0308 	movw	r3, #32776	; 0x8008
 80058d4:	4013      	ands	r3, r2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d014      	beq.n	8005904 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80058e4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ea:	1d1a      	adds	r2, r3, #4
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005902:	e023      	b.n	800594c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005904:	f7fc fdb0 	bl	8002468 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d803      	bhi.n	800591c <HAL_SPI_Receive+0x19c>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591a:	d102      	bne.n	8005922 <HAL_SPI_Receive+0x1a2>
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d114      	bne.n	800594c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 faf0 	bl	8005f08 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005936:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e0af      	b.n	8005aac <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005952:	b29b      	uxth	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1b8      	bne.n	80058ca <HAL_SPI_Receive+0x14a>
 8005958:	e095      	b.n	8005a86 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	2b07      	cmp	r3, #7
 8005960:	f240 808b 	bls.w	8005a7a <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005964:	e03f      	b.n	80059e6 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b01      	cmp	r3, #1
 8005972:	d114      	bne.n	800599e <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	8812      	ldrh	r2, [r2, #0]
 800597c:	b292      	uxth	r2, r2
 800597e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005984:	1c9a      	adds	r2, r3, #2
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800599c:	e023      	b.n	80059e6 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800599e:	f7fc fd63 	bl	8002468 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d803      	bhi.n	80059b6 <HAL_SPI_Receive+0x236>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d102      	bne.n	80059bc <HAL_SPI_Receive+0x23c>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d114      	bne.n	80059e6 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 faa3 	bl	8005f08 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e062      	b.n	8005aac <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1b9      	bne.n	8005966 <HAL_SPI_Receive+0x1e6>
 80059f2:	e048      	b.n	8005a86 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d117      	bne.n	8005a32 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a0e:	7812      	ldrb	r2, [r2, #0]
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005a30:	e023      	b.n	8005a7a <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a32:	f7fc fd19 	bl	8002468 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d803      	bhi.n	8005a4a <HAL_SPI_Receive+0x2ca>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a48:	d102      	bne.n	8005a50 <HAL_SPI_Receive+0x2d0>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d114      	bne.n	8005a7a <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 fa59 	bl	8005f08 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e018      	b.n	8005aac <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1b6      	bne.n	80059f4 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 fa3e 	bl	8005f08 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8005aaa:	7ffb      	ldrb	r3, [r7, #31]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3720      	adds	r7, #32
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	ffff0000 	.word	0xffff0000

08005ab8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08e      	sub	sp, #56	; 0x38
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3320      	adds	r3, #32
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3330      	adds	r3, #48	; 0x30
 8005ada:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d101      	bne.n	8005aea <HAL_SPI_TransmitReceive+0x32>
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	e209      	b.n	8005efe <HAL_SPI_TransmitReceive+0x446>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005af2:	f7fc fcb9 	bl	8002468 <HAL_GetTick>
 8005af6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8005af8:	887b      	ldrh	r3, [r7, #2]
 8005afa:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8005afc:	887b      	ldrh	r3, [r7, #2]
 8005afe:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005b06:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b0e:	7efb      	ldrb	r3, [r7, #27]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d014      	beq.n	8005b3e <HAL_SPI_TransmitReceive+0x86>
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b1a:	d106      	bne.n	8005b2a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d102      	bne.n	8005b2a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005b24:	7efb      	ldrb	r3, [r7, #27]
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d009      	beq.n	8005b3e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005b38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b3c:	e1df      	b.n	8005efe <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d005      	beq.n	8005b50 <HAL_SPI_TransmitReceive+0x98>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <HAL_SPI_TransmitReceive+0x98>
 8005b4a:	887b      	ldrh	r3, [r7, #2]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d109      	bne.n	8005b64 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005b5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b62:	e1cc      	b.n	8005efe <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d003      	beq.n	8005b78 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2205      	movs	r2, #5
 8005b74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	887a      	ldrh	r2, [r7, #2]
 8005b8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	887a      	ldrh	r2, [r7, #2]
 8005b92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	887a      	ldrh	r2, [r7, #2]
 8005ba0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	887a      	ldrh	r2, [r7, #2]
 8005ba8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	4b82      	ldr	r3, [pc, #520]	; (8005dc8 <HAL_SPI_TransmitReceive+0x310>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	8879      	ldrh	r1, [r7, #2]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	6812      	ldr	r2, [r2, #0]
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005be4:	d107      	bne.n	8005bf6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	2b0f      	cmp	r3, #15
 8005bfc:	d970      	bls.n	8005ce0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005bfe:	e068      	b.n	8005cd2 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d11a      	bne.n	8005c44 <HAL_SPI_TransmitReceive+0x18c>
 8005c0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d017      	beq.n	8005c44 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6812      	ldr	r2, [r2, #0]
 8005c1e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c24:	1d1a      	adds	r2, r3, #4
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005c42:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695a      	ldr	r2, [r3, #20]
 8005c4a:	f248 0308 	movw	r3, #32776	; 0x8008
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01a      	beq.n	8005c8a <HAL_SPI_TransmitReceive+0x1d2>
 8005c54:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d017      	beq.n	8005c8a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c64:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c6a:	1d1a      	adds	r2, r3, #4
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c88:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c8a:	f7fc fbed 	bl	8002468 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d803      	bhi.n	8005ca2 <HAL_SPI_TransmitReceive+0x1ea>
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca0:	d102      	bne.n	8005ca8 <HAL_SPI_TransmitReceive+0x1f0>
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d114      	bne.n	8005cd2 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f92d 	bl	8005f08 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e115      	b.n	8005efe <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005cd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d193      	bne.n	8005c00 <HAL_SPI_TransmitReceive+0x148>
 8005cd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d190      	bne.n	8005c00 <HAL_SPI_TransmitReceive+0x148>
 8005cde:	e0e7      	b.n	8005eb0 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	2b07      	cmp	r3, #7
 8005ce6:	f240 80dd 	bls.w	8005ea4 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005cea:	e066      	b.n	8005dba <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d119      	bne.n	8005d2e <HAL_SPI_TransmitReceive+0x276>
 8005cfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d016      	beq.n	8005d2e <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d04:	881a      	ldrh	r2, [r3, #0]
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d0e:	1c9a      	adds	r2, r3, #2
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d11a      	bne.n	8005d72 <HAL_SPI_TransmitReceive+0x2ba>
 8005d3c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d017      	beq.n	8005d72 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d46:	6a3a      	ldr	r2, [r7, #32]
 8005d48:	8812      	ldrh	r2, [r2, #0]
 8005d4a:	b292      	uxth	r2, r2
 8005d4c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d52:	1c9a      	adds	r2, r3, #2
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d70:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d72:	f7fc fb79 	bl	8002468 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d803      	bhi.n	8005d8a <HAL_SPI_TransmitReceive+0x2d2>
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d88:	d102      	bne.n	8005d90 <HAL_SPI_TransmitReceive+0x2d8>
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d114      	bne.n	8005dba <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 f8b9 	bl	8005f08 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005da4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e0a1      	b.n	8005efe <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005dba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d195      	bne.n	8005cec <HAL_SPI_TransmitReceive+0x234>
 8005dc0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d192      	bne.n	8005cec <HAL_SPI_TransmitReceive+0x234>
 8005dc6:	e073      	b.n	8005eb0 <HAL_SPI_TransmitReceive+0x3f8>
 8005dc8:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d11b      	bne.n	8005e12 <HAL_SPI_TransmitReceive+0x35a>
 8005dda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d018      	beq.n	8005e12 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3320      	adds	r3, #32
 8005dea:	7812      	ldrb	r2, [r2, #0]
 8005dec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	3b01      	subs	r3, #1
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e10:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d11d      	bne.n	8005e5c <HAL_SPI_TransmitReceive+0x3a4>
 8005e20:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01a      	beq.n	8005e5c <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e32:	7812      	ldrb	r2, [r2, #0]
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e5a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e5c:	f7fc fb04 	bl	8002468 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d803      	bhi.n	8005e74 <HAL_SPI_TransmitReceive+0x3bc>
 8005e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e72:	d102      	bne.n	8005e7a <HAL_SPI_TransmitReceive+0x3c2>
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d114      	bne.n	8005ea4 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 f844 	bl	8005f08 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e02c      	b.n	8005efe <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005ea4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d190      	bne.n	8005dcc <HAL_SPI_TransmitReceive+0x314>
 8005eaa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d18d      	bne.n	8005dcc <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	2108      	movs	r1, #8
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 f8c4 	bl	8006048 <SPI_WaitOnFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d007      	beq.n	8005ed6 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ecc:	f043 0220 	orr.w	r2, r3, #32
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 f816 	bl	8005f08 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e001      	b.n	8005efe <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8005efa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3730      	adds	r7, #48	; 0x30
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop

08005f08 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0208 	orr.w	r2, r2, #8
 8005f26:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0210 	orr.w	r2, r2, #16
 8005f36:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0201 	bic.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6919      	ldr	r1, [r3, #16]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	4b3c      	ldr	r3, [pc, #240]	; (8006044 <SPI_CloseTransfer+0x13c>)
 8005f54:	400b      	ands	r3, r1
 8005f56:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005f66:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d014      	beq.n	8005f9e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00f      	beq.n	8005f9e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	699a      	ldr	r2, [r3, #24]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f042 0220 	orr.w	r2, r2, #32
 8005f9c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d014      	beq.n	8005fd4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00f      	beq.n	8005fd4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fba:	f043 0204 	orr.w	r2, r3, #4
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699a      	ldr	r2, [r3, #24]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fd2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00f      	beq.n	8005ffe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fe4:	f043 0201 	orr.w	r2, r3, #1
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	699a      	ldr	r2, [r3, #24]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ffc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00f      	beq.n	8006028 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800600e:	f043 0208 	orr.w	r2, r3, #8
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699a      	ldr	r2, [r3, #24]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006026:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006038:	bf00      	nop
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	fffffc90 	.word	0xfffffc90

08006048 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	4613      	mov	r3, r2
 8006056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006058:	e010      	b.n	800607c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800605a:	f7fc fa05 	bl	8002468 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	429a      	cmp	r2, r3
 8006068:	d803      	bhi.n	8006072 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006070:	d102      	bne.n	8006078 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e00f      	b.n	800609c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	695a      	ldr	r2, [r3, #20]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	4013      	ands	r3, r2
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	429a      	cmp	r2, r3
 800608a:	bf0c      	ite	eq
 800608c:	2301      	moveq	r3, #1
 800608e:	2300      	movne	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	79fb      	ldrb	r3, [r7, #7]
 8006096:	429a      	cmp	r2, r3
 8006098:	d0df      	beq.n	800605a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b0:	095b      	lsrs	r3, r3, #5
 80060b2:	3301      	adds	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	3301      	adds	r3, #1
 80060bc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	3307      	adds	r3, #7
 80060c2:	08db      	lsrs	r3, r3, #3
 80060c4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	fb02 f303 	mul.w	r3, r2, r3
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b082      	sub	sp, #8
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e049      	b.n	8006180 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d106      	bne.n	8006106 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7fb ffa1 	bl	8002048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2202      	movs	r2, #2
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3304      	adds	r3, #4
 8006116:	4619      	mov	r1, r3
 8006118:	4610      	mov	r0, r2
 800611a:	f000 fbb1 	bl	8006880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e049      	b.n	800622e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d106      	bne.n	80061b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f841 	bl	8006236 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4619      	mov	r1, r3
 80061c6:	4610      	mov	r0, r2
 80061c8:	f000 fb5a 	bl	8006880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
	...

0800624c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d109      	bne.n	8006270 <HAL_TIM_PWM_Start+0x24>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b01      	cmp	r3, #1
 8006266:	bf14      	ite	ne
 8006268:	2301      	movne	r3, #1
 800626a:	2300      	moveq	r3, #0
 800626c:	b2db      	uxtb	r3, r3
 800626e:	e03c      	b.n	80062ea <HAL_TIM_PWM_Start+0x9e>
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	2b04      	cmp	r3, #4
 8006274:	d109      	bne.n	800628a <HAL_TIM_PWM_Start+0x3e>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b01      	cmp	r3, #1
 8006280:	bf14      	ite	ne
 8006282:	2301      	movne	r3, #1
 8006284:	2300      	moveq	r3, #0
 8006286:	b2db      	uxtb	r3, r3
 8006288:	e02f      	b.n	80062ea <HAL_TIM_PWM_Start+0x9e>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b08      	cmp	r3, #8
 800628e:	d109      	bne.n	80062a4 <HAL_TIM_PWM_Start+0x58>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b01      	cmp	r3, #1
 800629a:	bf14      	ite	ne
 800629c:	2301      	movne	r3, #1
 800629e:	2300      	moveq	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	e022      	b.n	80062ea <HAL_TIM_PWM_Start+0x9e>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b0c      	cmp	r3, #12
 80062a8:	d109      	bne.n	80062be <HAL_TIM_PWM_Start+0x72>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	bf14      	ite	ne
 80062b6:	2301      	movne	r3, #1
 80062b8:	2300      	moveq	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	e015      	b.n	80062ea <HAL_TIM_PWM_Start+0x9e>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b10      	cmp	r3, #16
 80062c2:	d109      	bne.n	80062d8 <HAL_TIM_PWM_Start+0x8c>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	bf14      	ite	ne
 80062d0:	2301      	movne	r3, #1
 80062d2:	2300      	moveq	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	e008      	b.n	80062ea <HAL_TIM_PWM_Start+0x9e>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	bf14      	ite	ne
 80062e4:	2301      	movne	r3, #1
 80062e6:	2300      	moveq	r3, #0
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e0a1      	b.n	8006436 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d104      	bne.n	8006302 <HAL_TIM_PWM_Start+0xb6>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006300:	e023      	b.n	800634a <HAL_TIM_PWM_Start+0xfe>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b04      	cmp	r3, #4
 8006306:	d104      	bne.n	8006312 <HAL_TIM_PWM_Start+0xc6>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006310:	e01b      	b.n	800634a <HAL_TIM_PWM_Start+0xfe>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b08      	cmp	r3, #8
 8006316:	d104      	bne.n	8006322 <HAL_TIM_PWM_Start+0xd6>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006320:	e013      	b.n	800634a <HAL_TIM_PWM_Start+0xfe>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b0c      	cmp	r3, #12
 8006326:	d104      	bne.n	8006332 <HAL_TIM_PWM_Start+0xe6>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006330:	e00b      	b.n	800634a <HAL_TIM_PWM_Start+0xfe>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b10      	cmp	r3, #16
 8006336:	d104      	bne.n	8006342 <HAL_TIM_PWM_Start+0xf6>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006340:	e003      	b.n	800634a <HAL_TIM_PWM_Start+0xfe>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2202      	movs	r2, #2
 8006346:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2201      	movs	r2, #1
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fea2 	bl	800709c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a38      	ldr	r2, [pc, #224]	; (8006440 <HAL_TIM_PWM_Start+0x1f4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d013      	beq.n	800638a <HAL_TIM_PWM_Start+0x13e>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a37      	ldr	r2, [pc, #220]	; (8006444 <HAL_TIM_PWM_Start+0x1f8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d00e      	beq.n	800638a <HAL_TIM_PWM_Start+0x13e>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a35      	ldr	r2, [pc, #212]	; (8006448 <HAL_TIM_PWM_Start+0x1fc>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d009      	beq.n	800638a <HAL_TIM_PWM_Start+0x13e>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a34      	ldr	r2, [pc, #208]	; (800644c <HAL_TIM_PWM_Start+0x200>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d004      	beq.n	800638a <HAL_TIM_PWM_Start+0x13e>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a32      	ldr	r2, [pc, #200]	; (8006450 <HAL_TIM_PWM_Start+0x204>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d101      	bne.n	800638e <HAL_TIM_PWM_Start+0x142>
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <HAL_TIM_PWM_Start+0x144>
 800638e:	2300      	movs	r3, #0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d007      	beq.n	80063a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a25      	ldr	r2, [pc, #148]	; (8006440 <HAL_TIM_PWM_Start+0x1f4>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d022      	beq.n	80063f4 <HAL_TIM_PWM_Start+0x1a8>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b6:	d01d      	beq.n	80063f4 <HAL_TIM_PWM_Start+0x1a8>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a25      	ldr	r2, [pc, #148]	; (8006454 <HAL_TIM_PWM_Start+0x208>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d018      	beq.n	80063f4 <HAL_TIM_PWM_Start+0x1a8>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a24      	ldr	r2, [pc, #144]	; (8006458 <HAL_TIM_PWM_Start+0x20c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d013      	beq.n	80063f4 <HAL_TIM_PWM_Start+0x1a8>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a22      	ldr	r2, [pc, #136]	; (800645c <HAL_TIM_PWM_Start+0x210>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00e      	beq.n	80063f4 <HAL_TIM_PWM_Start+0x1a8>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a1a      	ldr	r2, [pc, #104]	; (8006444 <HAL_TIM_PWM_Start+0x1f8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d009      	beq.n	80063f4 <HAL_TIM_PWM_Start+0x1a8>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a1e      	ldr	r2, [pc, #120]	; (8006460 <HAL_TIM_PWM_Start+0x214>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d004      	beq.n	80063f4 <HAL_TIM_PWM_Start+0x1a8>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a16      	ldr	r2, [pc, #88]	; (8006448 <HAL_TIM_PWM_Start+0x1fc>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d115      	bne.n	8006420 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	4b1a      	ldr	r3, [pc, #104]	; (8006464 <HAL_TIM_PWM_Start+0x218>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b06      	cmp	r3, #6
 8006404:	d015      	beq.n	8006432 <HAL_TIM_PWM_Start+0x1e6>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800640c:	d011      	beq.n	8006432 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f042 0201 	orr.w	r2, r2, #1
 800641c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800641e:	e008      	b.n	8006432 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0201 	orr.w	r2, r2, #1
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	e000      	b.n	8006434 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006432:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	40010000 	.word	0x40010000
 8006444:	40010400 	.word	0x40010400
 8006448:	40014000 	.word	0x40014000
 800644c:	40014400 	.word	0x40014400
 8006450:	40014800 	.word	0x40014800
 8006454:	40000400 	.word	0x40000400
 8006458:	40000800 	.word	0x40000800
 800645c:	40000c00 	.word	0x40000c00
 8006460:	40001800 	.word	0x40001800
 8006464:	00010007 	.word	0x00010007

08006468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006482:	2302      	movs	r3, #2
 8006484:	e0ff      	b.n	8006686 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b14      	cmp	r3, #20
 8006492:	f200 80f0 	bhi.w	8006676 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006496:	a201      	add	r2, pc, #4	; (adr r2, 800649c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649c:	080064f1 	.word	0x080064f1
 80064a0:	08006677 	.word	0x08006677
 80064a4:	08006677 	.word	0x08006677
 80064a8:	08006677 	.word	0x08006677
 80064ac:	08006531 	.word	0x08006531
 80064b0:	08006677 	.word	0x08006677
 80064b4:	08006677 	.word	0x08006677
 80064b8:	08006677 	.word	0x08006677
 80064bc:	08006573 	.word	0x08006573
 80064c0:	08006677 	.word	0x08006677
 80064c4:	08006677 	.word	0x08006677
 80064c8:	08006677 	.word	0x08006677
 80064cc:	080065b3 	.word	0x080065b3
 80064d0:	08006677 	.word	0x08006677
 80064d4:	08006677 	.word	0x08006677
 80064d8:	08006677 	.word	0x08006677
 80064dc:	080065f5 	.word	0x080065f5
 80064e0:	08006677 	.word	0x08006677
 80064e4:	08006677 	.word	0x08006677
 80064e8:	08006677 	.word	0x08006677
 80064ec:	08006635 	.word	0x08006635
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68b9      	ldr	r1, [r7, #8]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 fa5c 	bl	80069b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699a      	ldr	r2, [r3, #24]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0208 	orr.w	r2, r2, #8
 800650a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699a      	ldr	r2, [r3, #24]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0204 	bic.w	r2, r2, #4
 800651a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6999      	ldr	r1, [r3, #24]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	691a      	ldr	r2, [r3, #16]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	619a      	str	r2, [r3, #24]
      break;
 800652e:	e0a5      	b.n	800667c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68b9      	ldr	r1, [r7, #8]
 8006536:	4618      	mov	r0, r3
 8006538:	f000 facc 	bl	8006ad4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699a      	ldr	r2, [r3, #24]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800654a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699a      	ldr	r2, [r3, #24]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800655a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6999      	ldr	r1, [r3, #24]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	021a      	lsls	r2, r3, #8
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	619a      	str	r2, [r3, #24]
      break;
 8006570:	e084      	b.n	800667c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68b9      	ldr	r1, [r7, #8]
 8006578:	4618      	mov	r0, r3
 800657a:	f000 fb35 	bl	8006be8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69da      	ldr	r2, [r3, #28]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0208 	orr.w	r2, r2, #8
 800658c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69da      	ldr	r2, [r3, #28]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0204 	bic.w	r2, r2, #4
 800659c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69d9      	ldr	r1, [r3, #28]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	691a      	ldr	r2, [r3, #16]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	61da      	str	r2, [r3, #28]
      break;
 80065b0:	e064      	b.n	800667c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68b9      	ldr	r1, [r7, #8]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fb9d 	bl	8006cf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69da      	ldr	r2, [r3, #28]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69da      	ldr	r2, [r3, #28]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69d9      	ldr	r1, [r3, #28]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	021a      	lsls	r2, r3, #8
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	61da      	str	r2, [r3, #28]
      break;
 80065f2:	e043      	b.n	800667c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68b9      	ldr	r1, [r7, #8]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fbe6 	bl	8006dcc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0208 	orr.w	r2, r2, #8
 800660e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0204 	bic.w	r2, r2, #4
 800661e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	691a      	ldr	r2, [r3, #16]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006632:	e023      	b.n	800667c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68b9      	ldr	r1, [r7, #8]
 800663a:	4618      	mov	r0, r3
 800663c:	f000 fc2a 	bl	8006e94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800664e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800665e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	021a      	lsls	r2, r3, #8
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006674:	e002      	b.n	800667c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	75fb      	strb	r3, [r7, #23]
      break;
 800667a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006684:	7dfb      	ldrb	r3, [r7, #23]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop

08006690 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <HAL_TIM_ConfigClockSource+0x1c>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e0dc      	b.n	8006866 <HAL_TIM_ConfigClockSource+0x1d6>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	4b6a      	ldr	r3, [pc, #424]	; (8006870 <HAL_TIM_ConfigClockSource+0x1e0>)
 80066c8:	4013      	ands	r3, r2
 80066ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a64      	ldr	r2, [pc, #400]	; (8006874 <HAL_TIM_ConfigClockSource+0x1e4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	f000 80a9 	beq.w	800683a <HAL_TIM_ConfigClockSource+0x1aa>
 80066e8:	4a62      	ldr	r2, [pc, #392]	; (8006874 <HAL_TIM_ConfigClockSource+0x1e4>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	f200 80ae 	bhi.w	800684c <HAL_TIM_ConfigClockSource+0x1bc>
 80066f0:	4a61      	ldr	r2, [pc, #388]	; (8006878 <HAL_TIM_ConfigClockSource+0x1e8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	f000 80a1 	beq.w	800683a <HAL_TIM_ConfigClockSource+0x1aa>
 80066f8:	4a5f      	ldr	r2, [pc, #380]	; (8006878 <HAL_TIM_ConfigClockSource+0x1e8>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	f200 80a6 	bhi.w	800684c <HAL_TIM_ConfigClockSource+0x1bc>
 8006700:	4a5e      	ldr	r2, [pc, #376]	; (800687c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006702:	4293      	cmp	r3, r2
 8006704:	f000 8099 	beq.w	800683a <HAL_TIM_ConfigClockSource+0x1aa>
 8006708:	4a5c      	ldr	r2, [pc, #368]	; (800687c <HAL_TIM_ConfigClockSource+0x1ec>)
 800670a:	4293      	cmp	r3, r2
 800670c:	f200 809e 	bhi.w	800684c <HAL_TIM_ConfigClockSource+0x1bc>
 8006710:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006714:	f000 8091 	beq.w	800683a <HAL_TIM_ConfigClockSource+0x1aa>
 8006718:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800671c:	f200 8096 	bhi.w	800684c <HAL_TIM_ConfigClockSource+0x1bc>
 8006720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006724:	f000 8089 	beq.w	800683a <HAL_TIM_ConfigClockSource+0x1aa>
 8006728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800672c:	f200 808e 	bhi.w	800684c <HAL_TIM_ConfigClockSource+0x1bc>
 8006730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006734:	d03e      	beq.n	80067b4 <HAL_TIM_ConfigClockSource+0x124>
 8006736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800673a:	f200 8087 	bhi.w	800684c <HAL_TIM_ConfigClockSource+0x1bc>
 800673e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006742:	f000 8086 	beq.w	8006852 <HAL_TIM_ConfigClockSource+0x1c2>
 8006746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800674a:	d87f      	bhi.n	800684c <HAL_TIM_ConfigClockSource+0x1bc>
 800674c:	2b70      	cmp	r3, #112	; 0x70
 800674e:	d01a      	beq.n	8006786 <HAL_TIM_ConfigClockSource+0xf6>
 8006750:	2b70      	cmp	r3, #112	; 0x70
 8006752:	d87b      	bhi.n	800684c <HAL_TIM_ConfigClockSource+0x1bc>
 8006754:	2b60      	cmp	r3, #96	; 0x60
 8006756:	d050      	beq.n	80067fa <HAL_TIM_ConfigClockSource+0x16a>
 8006758:	2b60      	cmp	r3, #96	; 0x60
 800675a:	d877      	bhi.n	800684c <HAL_TIM_ConfigClockSource+0x1bc>
 800675c:	2b50      	cmp	r3, #80	; 0x50
 800675e:	d03c      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x14a>
 8006760:	2b50      	cmp	r3, #80	; 0x50
 8006762:	d873      	bhi.n	800684c <HAL_TIM_ConfigClockSource+0x1bc>
 8006764:	2b40      	cmp	r3, #64	; 0x40
 8006766:	d058      	beq.n	800681a <HAL_TIM_ConfigClockSource+0x18a>
 8006768:	2b40      	cmp	r3, #64	; 0x40
 800676a:	d86f      	bhi.n	800684c <HAL_TIM_ConfigClockSource+0x1bc>
 800676c:	2b30      	cmp	r3, #48	; 0x30
 800676e:	d064      	beq.n	800683a <HAL_TIM_ConfigClockSource+0x1aa>
 8006770:	2b30      	cmp	r3, #48	; 0x30
 8006772:	d86b      	bhi.n	800684c <HAL_TIM_ConfigClockSource+0x1bc>
 8006774:	2b20      	cmp	r3, #32
 8006776:	d060      	beq.n	800683a <HAL_TIM_ConfigClockSource+0x1aa>
 8006778:	2b20      	cmp	r3, #32
 800677a:	d867      	bhi.n	800684c <HAL_TIM_ConfigClockSource+0x1bc>
 800677c:	2b00      	cmp	r3, #0
 800677e:	d05c      	beq.n	800683a <HAL_TIM_ConfigClockSource+0x1aa>
 8006780:	2b10      	cmp	r3, #16
 8006782:	d05a      	beq.n	800683a <HAL_TIM_ConfigClockSource+0x1aa>
 8006784:	e062      	b.n	800684c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	6899      	ldr	r1, [r3, #8]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f000 fc61 	bl	800705c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	609a      	str	r2, [r3, #8]
      break;
 80067b2:	e04f      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6818      	ldr	r0, [r3, #0]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	6899      	ldr	r1, [r3, #8]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f000 fc4a 	bl	800705c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689a      	ldr	r2, [r3, #8]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067d6:	609a      	str	r2, [r3, #8]
      break;
 80067d8:	e03c      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6818      	ldr	r0, [r3, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	6859      	ldr	r1, [r3, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	461a      	mov	r2, r3
 80067e8:	f000 fbba 	bl	8006f60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2150      	movs	r1, #80	; 0x50
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fc14 	bl	8007020 <TIM_ITRx_SetConfig>
      break;
 80067f8:	e02c      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6818      	ldr	r0, [r3, #0]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	6859      	ldr	r1, [r3, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	461a      	mov	r2, r3
 8006808:	f000 fbd9 	bl	8006fbe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2160      	movs	r1, #96	; 0x60
 8006812:	4618      	mov	r0, r3
 8006814:	f000 fc04 	bl	8007020 <TIM_ITRx_SetConfig>
      break;
 8006818:	e01c      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6818      	ldr	r0, [r3, #0]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	6859      	ldr	r1, [r3, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	461a      	mov	r2, r3
 8006828:	f000 fb9a 	bl	8006f60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2140      	movs	r1, #64	; 0x40
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fbf4 	bl	8007020 <TIM_ITRx_SetConfig>
      break;
 8006838:	e00c      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4619      	mov	r1, r3
 8006844:	4610      	mov	r0, r2
 8006846:	f000 fbeb 	bl	8007020 <TIM_ITRx_SetConfig>
      break;
 800684a:	e003      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	73fb      	strb	r3, [r7, #15]
      break;
 8006850:	e000      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006852:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006864:	7bfb      	ldrb	r3, [r7, #15]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	ffceff88 	.word	0xffceff88
 8006874:	00100040 	.word	0x00100040
 8006878:	00100030 	.word	0x00100030
 800687c:	00100020 	.word	0x00100020

08006880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a40      	ldr	r2, [pc, #256]	; (8006994 <TIM_Base_SetConfig+0x114>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d013      	beq.n	80068c0 <TIM_Base_SetConfig+0x40>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689e:	d00f      	beq.n	80068c0 <TIM_Base_SetConfig+0x40>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a3d      	ldr	r2, [pc, #244]	; (8006998 <TIM_Base_SetConfig+0x118>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d00b      	beq.n	80068c0 <TIM_Base_SetConfig+0x40>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a3c      	ldr	r2, [pc, #240]	; (800699c <TIM_Base_SetConfig+0x11c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d007      	beq.n	80068c0 <TIM_Base_SetConfig+0x40>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a3b      	ldr	r2, [pc, #236]	; (80069a0 <TIM_Base_SetConfig+0x120>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d003      	beq.n	80068c0 <TIM_Base_SetConfig+0x40>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a3a      	ldr	r2, [pc, #232]	; (80069a4 <TIM_Base_SetConfig+0x124>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d108      	bne.n	80068d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a2f      	ldr	r2, [pc, #188]	; (8006994 <TIM_Base_SetConfig+0x114>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d01f      	beq.n	800691a <TIM_Base_SetConfig+0x9a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e0:	d01b      	beq.n	800691a <TIM_Base_SetConfig+0x9a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a2c      	ldr	r2, [pc, #176]	; (8006998 <TIM_Base_SetConfig+0x118>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d017      	beq.n	800691a <TIM_Base_SetConfig+0x9a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a2b      	ldr	r2, [pc, #172]	; (800699c <TIM_Base_SetConfig+0x11c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d013      	beq.n	800691a <TIM_Base_SetConfig+0x9a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a2a      	ldr	r2, [pc, #168]	; (80069a0 <TIM_Base_SetConfig+0x120>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d00f      	beq.n	800691a <TIM_Base_SetConfig+0x9a>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a29      	ldr	r2, [pc, #164]	; (80069a4 <TIM_Base_SetConfig+0x124>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00b      	beq.n	800691a <TIM_Base_SetConfig+0x9a>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a28      	ldr	r2, [pc, #160]	; (80069a8 <TIM_Base_SetConfig+0x128>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d007      	beq.n	800691a <TIM_Base_SetConfig+0x9a>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a27      	ldr	r2, [pc, #156]	; (80069ac <TIM_Base_SetConfig+0x12c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d003      	beq.n	800691a <TIM_Base_SetConfig+0x9a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a26      	ldr	r2, [pc, #152]	; (80069b0 <TIM_Base_SetConfig+0x130>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d108      	bne.n	800692c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	4313      	orrs	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a10      	ldr	r2, [pc, #64]	; (8006994 <TIM_Base_SetConfig+0x114>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d00f      	beq.n	8006978 <TIM_Base_SetConfig+0xf8>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a12      	ldr	r2, [pc, #72]	; (80069a4 <TIM_Base_SetConfig+0x124>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00b      	beq.n	8006978 <TIM_Base_SetConfig+0xf8>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a11      	ldr	r2, [pc, #68]	; (80069a8 <TIM_Base_SetConfig+0x128>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d007      	beq.n	8006978 <TIM_Base_SetConfig+0xf8>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a10      	ldr	r2, [pc, #64]	; (80069ac <TIM_Base_SetConfig+0x12c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d003      	beq.n	8006978 <TIM_Base_SetConfig+0xf8>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a0f      	ldr	r2, [pc, #60]	; (80069b0 <TIM_Base_SetConfig+0x130>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d103      	bne.n	8006980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	691a      	ldr	r2, [r3, #16]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	615a      	str	r2, [r3, #20]
}
 8006986:	bf00      	nop
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	40010000 	.word	0x40010000
 8006998:	40000400 	.word	0x40000400
 800699c:	40000800 	.word	0x40000800
 80069a0:	40000c00 	.word	0x40000c00
 80069a4:	40010400 	.word	0x40010400
 80069a8:	40014000 	.word	0x40014000
 80069ac:	40014400 	.word	0x40014400
 80069b0:	40014800 	.word	0x40014800

080069b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	f023 0201 	bic.w	r2, r3, #1
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	4b37      	ldr	r3, [pc, #220]	; (8006abc <TIM_OC1_SetConfig+0x108>)
 80069e0:	4013      	ands	r3, r2
 80069e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0303 	bic.w	r3, r3, #3
 80069ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f023 0302 	bic.w	r3, r3, #2
 80069fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a2d      	ldr	r2, [pc, #180]	; (8006ac0 <TIM_OC1_SetConfig+0x10c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d00f      	beq.n	8006a30 <TIM_OC1_SetConfig+0x7c>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a2c      	ldr	r2, [pc, #176]	; (8006ac4 <TIM_OC1_SetConfig+0x110>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00b      	beq.n	8006a30 <TIM_OC1_SetConfig+0x7c>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a2b      	ldr	r2, [pc, #172]	; (8006ac8 <TIM_OC1_SetConfig+0x114>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d007      	beq.n	8006a30 <TIM_OC1_SetConfig+0x7c>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a2a      	ldr	r2, [pc, #168]	; (8006acc <TIM_OC1_SetConfig+0x118>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d003      	beq.n	8006a30 <TIM_OC1_SetConfig+0x7c>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a29      	ldr	r2, [pc, #164]	; (8006ad0 <TIM_OC1_SetConfig+0x11c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d10c      	bne.n	8006a4a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f023 0308 	bic.w	r3, r3, #8
 8006a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f023 0304 	bic.w	r3, r3, #4
 8006a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a1c      	ldr	r2, [pc, #112]	; (8006ac0 <TIM_OC1_SetConfig+0x10c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d00f      	beq.n	8006a72 <TIM_OC1_SetConfig+0xbe>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a1b      	ldr	r2, [pc, #108]	; (8006ac4 <TIM_OC1_SetConfig+0x110>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d00b      	beq.n	8006a72 <TIM_OC1_SetConfig+0xbe>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a1a      	ldr	r2, [pc, #104]	; (8006ac8 <TIM_OC1_SetConfig+0x114>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d007      	beq.n	8006a72 <TIM_OC1_SetConfig+0xbe>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a19      	ldr	r2, [pc, #100]	; (8006acc <TIM_OC1_SetConfig+0x118>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d003      	beq.n	8006a72 <TIM_OC1_SetConfig+0xbe>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a18      	ldr	r2, [pc, #96]	; (8006ad0 <TIM_OC1_SetConfig+0x11c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d111      	bne.n	8006a96 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	621a      	str	r2, [r3, #32]
}
 8006ab0:	bf00      	nop
 8006ab2:	371c      	adds	r7, #28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	fffeff8f 	.word	0xfffeff8f
 8006ac0:	40010000 	.word	0x40010000
 8006ac4:	40010400 	.word	0x40010400
 8006ac8:	40014000 	.word	0x40014000
 8006acc:	40014400 	.word	0x40014400
 8006ad0:	40014800 	.word	0x40014800

08006ad4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	f023 0210 	bic.w	r2, r3, #16
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4b34      	ldr	r3, [pc, #208]	; (8006bd0 <TIM_OC2_SetConfig+0xfc>)
 8006b00:	4013      	ands	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	021b      	lsls	r3, r3, #8
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f023 0320 	bic.w	r3, r3, #32
 8006b1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	011b      	lsls	r3, r3, #4
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a29      	ldr	r2, [pc, #164]	; (8006bd4 <TIM_OC2_SetConfig+0x100>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d003      	beq.n	8006b3c <TIM_OC2_SetConfig+0x68>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a28      	ldr	r2, [pc, #160]	; (8006bd8 <TIM_OC2_SetConfig+0x104>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d10d      	bne.n	8006b58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	011b      	lsls	r3, r3, #4
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a1e      	ldr	r2, [pc, #120]	; (8006bd4 <TIM_OC2_SetConfig+0x100>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d00f      	beq.n	8006b80 <TIM_OC2_SetConfig+0xac>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a1d      	ldr	r2, [pc, #116]	; (8006bd8 <TIM_OC2_SetConfig+0x104>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d00b      	beq.n	8006b80 <TIM_OC2_SetConfig+0xac>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a1c      	ldr	r2, [pc, #112]	; (8006bdc <TIM_OC2_SetConfig+0x108>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d007      	beq.n	8006b80 <TIM_OC2_SetConfig+0xac>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a1b      	ldr	r2, [pc, #108]	; (8006be0 <TIM_OC2_SetConfig+0x10c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d003      	beq.n	8006b80 <TIM_OC2_SetConfig+0xac>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a1a      	ldr	r2, [pc, #104]	; (8006be4 <TIM_OC2_SetConfig+0x110>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d113      	bne.n	8006ba8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	621a      	str	r2, [r3, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	feff8fff 	.word	0xfeff8fff
 8006bd4:	40010000 	.word	0x40010000
 8006bd8:	40010400 	.word	0x40010400
 8006bdc:	40014000 	.word	0x40014000
 8006be0:	40014400 	.word	0x40014400
 8006be4:	40014800 	.word	0x40014800

08006be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	4b33      	ldr	r3, [pc, #204]	; (8006ce0 <TIM_OC3_SetConfig+0xf8>)
 8006c14:	4013      	ands	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 0303 	bic.w	r3, r3, #3
 8006c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	021b      	lsls	r3, r3, #8
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a28      	ldr	r2, [pc, #160]	; (8006ce4 <TIM_OC3_SetConfig+0xfc>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d003      	beq.n	8006c4e <TIM_OC3_SetConfig+0x66>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a27      	ldr	r2, [pc, #156]	; (8006ce8 <TIM_OC3_SetConfig+0x100>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d10d      	bne.n	8006c6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	021b      	lsls	r3, r3, #8
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a1d      	ldr	r2, [pc, #116]	; (8006ce4 <TIM_OC3_SetConfig+0xfc>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00f      	beq.n	8006c92 <TIM_OC3_SetConfig+0xaa>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a1c      	ldr	r2, [pc, #112]	; (8006ce8 <TIM_OC3_SetConfig+0x100>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d00b      	beq.n	8006c92 <TIM_OC3_SetConfig+0xaa>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a1b      	ldr	r2, [pc, #108]	; (8006cec <TIM_OC3_SetConfig+0x104>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d007      	beq.n	8006c92 <TIM_OC3_SetConfig+0xaa>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a1a      	ldr	r2, [pc, #104]	; (8006cf0 <TIM_OC3_SetConfig+0x108>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d003      	beq.n	8006c92 <TIM_OC3_SetConfig+0xaa>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a19      	ldr	r2, [pc, #100]	; (8006cf4 <TIM_OC3_SetConfig+0x10c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d113      	bne.n	8006cba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	011b      	lsls	r3, r3, #4
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	011b      	lsls	r3, r3, #4
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	621a      	str	r2, [r3, #32]
}
 8006cd4:	bf00      	nop
 8006cd6:	371c      	adds	r7, #28
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	fffeff8f 	.word	0xfffeff8f
 8006ce4:	40010000 	.word	0x40010000
 8006ce8:	40010400 	.word	0x40010400
 8006cec:	40014000 	.word	0x40014000
 8006cf0:	40014400 	.word	0x40014400
 8006cf4:	40014800 	.word	0x40014800

08006cf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	4b24      	ldr	r3, [pc, #144]	; (8006db4 <TIM_OC4_SetConfig+0xbc>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	021b      	lsls	r3, r3, #8
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	031b      	lsls	r3, r3, #12
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a19      	ldr	r2, [pc, #100]	; (8006db8 <TIM_OC4_SetConfig+0xc0>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d00f      	beq.n	8006d78 <TIM_OC4_SetConfig+0x80>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a18      	ldr	r2, [pc, #96]	; (8006dbc <TIM_OC4_SetConfig+0xc4>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00b      	beq.n	8006d78 <TIM_OC4_SetConfig+0x80>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a17      	ldr	r2, [pc, #92]	; (8006dc0 <TIM_OC4_SetConfig+0xc8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d007      	beq.n	8006d78 <TIM_OC4_SetConfig+0x80>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a16      	ldr	r2, [pc, #88]	; (8006dc4 <TIM_OC4_SetConfig+0xcc>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d003      	beq.n	8006d78 <TIM_OC4_SetConfig+0x80>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a15      	ldr	r2, [pc, #84]	; (8006dc8 <TIM_OC4_SetConfig+0xd0>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d109      	bne.n	8006d8c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	019b      	lsls	r3, r3, #6
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	621a      	str	r2, [r3, #32]
}
 8006da6:	bf00      	nop
 8006da8:	371c      	adds	r7, #28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	feff8fff 	.word	0xfeff8fff
 8006db8:	40010000 	.word	0x40010000
 8006dbc:	40010400 	.word	0x40010400
 8006dc0:	40014000 	.word	0x40014000
 8006dc4:	40014400 	.word	0x40014400
 8006dc8:	40014800 	.word	0x40014800

08006dcc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	4b21      	ldr	r3, [pc, #132]	; (8006e7c <TIM_OC5_SetConfig+0xb0>)
 8006df8:	4013      	ands	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	041b      	lsls	r3, r3, #16
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a18      	ldr	r2, [pc, #96]	; (8006e80 <TIM_OC5_SetConfig+0xb4>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d00f      	beq.n	8006e42 <TIM_OC5_SetConfig+0x76>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a17      	ldr	r2, [pc, #92]	; (8006e84 <TIM_OC5_SetConfig+0xb8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d00b      	beq.n	8006e42 <TIM_OC5_SetConfig+0x76>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a16      	ldr	r2, [pc, #88]	; (8006e88 <TIM_OC5_SetConfig+0xbc>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d007      	beq.n	8006e42 <TIM_OC5_SetConfig+0x76>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a15      	ldr	r2, [pc, #84]	; (8006e8c <TIM_OC5_SetConfig+0xc0>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d003      	beq.n	8006e42 <TIM_OC5_SetConfig+0x76>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a14      	ldr	r2, [pc, #80]	; (8006e90 <TIM_OC5_SetConfig+0xc4>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d109      	bne.n	8006e56 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	021b      	lsls	r3, r3, #8
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	621a      	str	r2, [r3, #32]
}
 8006e70:	bf00      	nop
 8006e72:	371c      	adds	r7, #28
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	fffeff8f 	.word	0xfffeff8f
 8006e80:	40010000 	.word	0x40010000
 8006e84:	40010400 	.word	0x40010400
 8006e88:	40014000 	.word	0x40014000
 8006e8c:	40014400 	.word	0x40014400
 8006e90:	40014800 	.word	0x40014800

08006e94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4b22      	ldr	r3, [pc, #136]	; (8006f48 <TIM_OC6_SetConfig+0xb4>)
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	021b      	lsls	r3, r3, #8
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	051b      	lsls	r3, r3, #20
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a19      	ldr	r2, [pc, #100]	; (8006f4c <TIM_OC6_SetConfig+0xb8>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d00f      	beq.n	8006f0c <TIM_OC6_SetConfig+0x78>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a18      	ldr	r2, [pc, #96]	; (8006f50 <TIM_OC6_SetConfig+0xbc>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d00b      	beq.n	8006f0c <TIM_OC6_SetConfig+0x78>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a17      	ldr	r2, [pc, #92]	; (8006f54 <TIM_OC6_SetConfig+0xc0>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d007      	beq.n	8006f0c <TIM_OC6_SetConfig+0x78>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a16      	ldr	r2, [pc, #88]	; (8006f58 <TIM_OC6_SetConfig+0xc4>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d003      	beq.n	8006f0c <TIM_OC6_SetConfig+0x78>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a15      	ldr	r2, [pc, #84]	; (8006f5c <TIM_OC6_SetConfig+0xc8>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d109      	bne.n	8006f20 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	029b      	lsls	r3, r3, #10
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	621a      	str	r2, [r3, #32]
}
 8006f3a:	bf00      	nop
 8006f3c:	371c      	adds	r7, #28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	feff8fff 	.word	0xfeff8fff
 8006f4c:	40010000 	.word	0x40010000
 8006f50:	40010400 	.word	0x40010400
 8006f54:	40014000 	.word	0x40014000
 8006f58:	40014400 	.word	0x40014400
 8006f5c:	40014800 	.word	0x40014800

08006f60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	f023 0201 	bic.w	r2, r3, #1
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f023 030a 	bic.w	r3, r3, #10
 8006f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	621a      	str	r2, [r3, #32]
}
 8006fb2:	bf00      	nop
 8006fb4:	371c      	adds	r7, #28
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b087      	sub	sp, #28
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	60f8      	str	r0, [r7, #12]
 8006fc6:	60b9      	str	r1, [r7, #8]
 8006fc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	f023 0210 	bic.w	r2, r3, #16
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fe8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	031b      	lsls	r3, r3, #12
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ffa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	011b      	lsls	r3, r3, #4
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	4313      	orrs	r3, r2
 8007004:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	621a      	str	r2, [r3, #32]
}
 8007012:	bf00      	nop
 8007014:	371c      	adds	r7, #28
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
	...

08007020 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	4b09      	ldr	r3, [pc, #36]	; (8007058 <TIM_ITRx_SetConfig+0x38>)
 8007034:	4013      	ands	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4313      	orrs	r3, r2
 800703e:	f043 0307 	orr.w	r3, r3, #7
 8007042:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	609a      	str	r2, [r3, #8]
}
 800704a:	bf00      	nop
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	ffcfff8f 	.word	0xffcfff8f

0800705c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007076:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	021a      	lsls	r2, r3, #8
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	431a      	orrs	r2, r3
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	4313      	orrs	r3, r2
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	4313      	orrs	r3, r2
 8007088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	609a      	str	r2, [r3, #8]
}
 8007090:	bf00      	nop
 8007092:	371c      	adds	r7, #28
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800709c:	b480      	push	{r7}
 800709e:	b087      	sub	sp, #28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	f003 031f 	and.w	r3, r3, #31
 80070ae:	2201      	movs	r2, #1
 80070b0:	fa02 f303 	lsl.w	r3, r2, r3
 80070b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6a1a      	ldr	r2, [r3, #32]
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	43db      	mvns	r3, r3
 80070be:	401a      	ands	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6a1a      	ldr	r2, [r3, #32]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f003 031f 	and.w	r3, r3, #31
 80070ce:	6879      	ldr	r1, [r7, #4]
 80070d0:	fa01 f303 	lsl.w	r3, r1, r3
 80070d4:	431a      	orrs	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	621a      	str	r2, [r3, #32]
}
 80070da:	bf00      	nop
 80070dc:	371c      	adds	r7, #28
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
	...

080070e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d101      	bne.n	8007100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070fc:	2302      	movs	r3, #2
 80070fe:	e06d      	b.n	80071dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2202      	movs	r2, #2
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a30      	ldr	r2, [pc, #192]	; (80071e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d004      	beq.n	8007134 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a2f      	ldr	r2, [pc, #188]	; (80071ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d108      	bne.n	8007146 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800713a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4313      	orrs	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	4313      	orrs	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a20      	ldr	r2, [pc, #128]	; (80071e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d022      	beq.n	80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007172:	d01d      	beq.n	80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a1d      	ldr	r2, [pc, #116]	; (80071f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d018      	beq.n	80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a1c      	ldr	r2, [pc, #112]	; (80071f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d013      	beq.n	80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a1a      	ldr	r2, [pc, #104]	; (80071f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d00e      	beq.n	80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a15      	ldr	r2, [pc, #84]	; (80071ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d009      	beq.n	80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a16      	ldr	r2, [pc, #88]	; (80071fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d004      	beq.n	80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a15      	ldr	r2, [pc, #84]	; (8007200 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d10c      	bne.n	80071ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	4313      	orrs	r3, r2
 80071c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	40010000 	.word	0x40010000
 80071ec:	40010400 	.word	0x40010400
 80071f0:	40000400 	.word	0x40000400
 80071f4:	40000800 	.word	0x40000800
 80071f8:	40000c00 	.word	0x40000c00
 80071fc:	40001800 	.word	0x40001800
 8007200:	40014000 	.word	0x40014000

08007204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e042      	b.n	800729c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800721c:	2b00      	cmp	r3, #0
 800721e:	d106      	bne.n	800722e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7fa ffa7 	bl	800217c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2224      	movs	r2, #36	; 0x24
 8007232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 0201 	bic.w	r2, r2, #1
 8007244:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f8c2 	bl	80073d0 <UART_SetConfig>
 800724c:	4603      	mov	r3, r0
 800724e:	2b01      	cmp	r3, #1
 8007250:	d101      	bne.n	8007256 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e022      	b.n	800729c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fe1e 	bl	8007ea0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689a      	ldr	r2, [r3, #8]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f042 0201 	orr.w	r2, r2, #1
 8007292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fea5 	bl	8007fe4 <UART_CheckIdleState>
 800729a:	4603      	mov	r3, r0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08a      	sub	sp, #40	; 0x28
 80072a8:	af02      	add	r7, sp, #8
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	603b      	str	r3, [r7, #0]
 80072b0:	4613      	mov	r3, r2
 80072b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072ba:	2b20      	cmp	r3, #32
 80072bc:	f040 8083 	bne.w	80073c6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d002      	beq.n	80072cc <HAL_UART_Transmit+0x28>
 80072c6:	88fb      	ldrh	r3, [r7, #6]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e07b      	b.n	80073c8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d101      	bne.n	80072de <HAL_UART_Transmit+0x3a>
 80072da:	2302      	movs	r3, #2
 80072dc:	e074      	b.n	80073c8 <HAL_UART_Transmit+0x124>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2221      	movs	r2, #33	; 0x21
 80072f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072f6:	f7fb f8b7 	bl	8002468 <HAL_GetTick>
 80072fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	88fa      	ldrh	r2, [r7, #6]
 8007300:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	88fa      	ldrh	r2, [r7, #6]
 8007308:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007314:	d108      	bne.n	8007328 <HAL_UART_Transmit+0x84>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d104      	bne.n	8007328 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800731e:	2300      	movs	r3, #0
 8007320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	e003      	b.n	8007330 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800732c:	2300      	movs	r3, #0
 800732e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007338:	e02c      	b.n	8007394 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2200      	movs	r2, #0
 8007342:	2180      	movs	r1, #128	; 0x80
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 fe98 	bl	800807a <UART_WaitOnFlagUntilTimeout>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e039      	b.n	80073c8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10b      	bne.n	8007372 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007368:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	3302      	adds	r3, #2
 800736e:	61bb      	str	r3, [r7, #24]
 8007370:	e007      	b.n	8007382 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	781a      	ldrb	r2, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	3301      	adds	r3, #1
 8007380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007388:	b29b      	uxth	r3, r3
 800738a:	3b01      	subs	r3, #1
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800739a:	b29b      	uxth	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1cc      	bne.n	800733a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2200      	movs	r2, #0
 80073a8:	2140      	movs	r1, #64	; 0x40
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f000 fe65 	bl	800807a <UART_WaitOnFlagUntilTimeout>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e006      	b.n	80073c8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2220      	movs	r2, #32
 80073be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	e000      	b.n	80073c8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80073c6:	2302      	movs	r3, #2
  }
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3720      	adds	r7, #32
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073d4:	b092      	sub	sp, #72	; 0x48
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	689a      	ldr	r2, [r3, #8]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	431a      	orrs	r2, r3
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	431a      	orrs	r2, r3
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	4bbe      	ldr	r3, [pc, #760]	; (80076f8 <UART_SetConfig+0x328>)
 8007400:	4013      	ands	r3, r2
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	6812      	ldr	r2, [r2, #0]
 8007406:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007408:	430b      	orrs	r3, r1
 800740a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4ab3      	ldr	r2, [pc, #716]	; (80076fc <UART_SetConfig+0x32c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d004      	beq.n	800743c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007438:	4313      	orrs	r3, r2
 800743a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689a      	ldr	r2, [r3, #8]
 8007442:	4baf      	ldr	r3, [pc, #700]	; (8007700 <UART_SetConfig+0x330>)
 8007444:	4013      	ands	r3, r2
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	6812      	ldr	r2, [r2, #0]
 800744a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800744c:	430b      	orrs	r3, r1
 800744e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007456:	f023 010f 	bic.w	r1, r3, #15
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4aa6      	ldr	r2, [pc, #664]	; (8007704 <UART_SetConfig+0x334>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d177      	bne.n	8007560 <UART_SetConfig+0x190>
 8007470:	4ba5      	ldr	r3, [pc, #660]	; (8007708 <UART_SetConfig+0x338>)
 8007472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007474:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007478:	2b28      	cmp	r3, #40	; 0x28
 800747a:	d86d      	bhi.n	8007558 <UART_SetConfig+0x188>
 800747c:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <UART_SetConfig+0xb4>)
 800747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007482:	bf00      	nop
 8007484:	08007529 	.word	0x08007529
 8007488:	08007559 	.word	0x08007559
 800748c:	08007559 	.word	0x08007559
 8007490:	08007559 	.word	0x08007559
 8007494:	08007559 	.word	0x08007559
 8007498:	08007559 	.word	0x08007559
 800749c:	08007559 	.word	0x08007559
 80074a0:	08007559 	.word	0x08007559
 80074a4:	08007531 	.word	0x08007531
 80074a8:	08007559 	.word	0x08007559
 80074ac:	08007559 	.word	0x08007559
 80074b0:	08007559 	.word	0x08007559
 80074b4:	08007559 	.word	0x08007559
 80074b8:	08007559 	.word	0x08007559
 80074bc:	08007559 	.word	0x08007559
 80074c0:	08007559 	.word	0x08007559
 80074c4:	08007539 	.word	0x08007539
 80074c8:	08007559 	.word	0x08007559
 80074cc:	08007559 	.word	0x08007559
 80074d0:	08007559 	.word	0x08007559
 80074d4:	08007559 	.word	0x08007559
 80074d8:	08007559 	.word	0x08007559
 80074dc:	08007559 	.word	0x08007559
 80074e0:	08007559 	.word	0x08007559
 80074e4:	08007541 	.word	0x08007541
 80074e8:	08007559 	.word	0x08007559
 80074ec:	08007559 	.word	0x08007559
 80074f0:	08007559 	.word	0x08007559
 80074f4:	08007559 	.word	0x08007559
 80074f8:	08007559 	.word	0x08007559
 80074fc:	08007559 	.word	0x08007559
 8007500:	08007559 	.word	0x08007559
 8007504:	08007549 	.word	0x08007549
 8007508:	08007559 	.word	0x08007559
 800750c:	08007559 	.word	0x08007559
 8007510:	08007559 	.word	0x08007559
 8007514:	08007559 	.word	0x08007559
 8007518:	08007559 	.word	0x08007559
 800751c:	08007559 	.word	0x08007559
 8007520:	08007559 	.word	0x08007559
 8007524:	08007551 	.word	0x08007551
 8007528:	2301      	movs	r3, #1
 800752a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800752e:	e222      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007530:	2304      	movs	r3, #4
 8007532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007536:	e21e      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007538:	2308      	movs	r3, #8
 800753a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800753e:	e21a      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007540:	2310      	movs	r3, #16
 8007542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007546:	e216      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007548:	2320      	movs	r3, #32
 800754a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800754e:	e212      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007550:	2340      	movs	r3, #64	; 0x40
 8007552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007556:	e20e      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007558:	2380      	movs	r3, #128	; 0x80
 800755a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800755e:	e20a      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a69      	ldr	r2, [pc, #420]	; (800770c <UART_SetConfig+0x33c>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d130      	bne.n	80075cc <UART_SetConfig+0x1fc>
 800756a:	4b67      	ldr	r3, [pc, #412]	; (8007708 <UART_SetConfig+0x338>)
 800756c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756e:	f003 0307 	and.w	r3, r3, #7
 8007572:	2b05      	cmp	r3, #5
 8007574:	d826      	bhi.n	80075c4 <UART_SetConfig+0x1f4>
 8007576:	a201      	add	r2, pc, #4	; (adr r2, 800757c <UART_SetConfig+0x1ac>)
 8007578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757c:	08007595 	.word	0x08007595
 8007580:	0800759d 	.word	0x0800759d
 8007584:	080075a5 	.word	0x080075a5
 8007588:	080075ad 	.word	0x080075ad
 800758c:	080075b5 	.word	0x080075b5
 8007590:	080075bd 	.word	0x080075bd
 8007594:	2300      	movs	r3, #0
 8007596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800759a:	e1ec      	b.n	8007976 <UART_SetConfig+0x5a6>
 800759c:	2304      	movs	r3, #4
 800759e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075a2:	e1e8      	b.n	8007976 <UART_SetConfig+0x5a6>
 80075a4:	2308      	movs	r3, #8
 80075a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075aa:	e1e4      	b.n	8007976 <UART_SetConfig+0x5a6>
 80075ac:	2310      	movs	r3, #16
 80075ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075b2:	e1e0      	b.n	8007976 <UART_SetConfig+0x5a6>
 80075b4:	2320      	movs	r3, #32
 80075b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ba:	e1dc      	b.n	8007976 <UART_SetConfig+0x5a6>
 80075bc:	2340      	movs	r3, #64	; 0x40
 80075be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075c2:	e1d8      	b.n	8007976 <UART_SetConfig+0x5a6>
 80075c4:	2380      	movs	r3, #128	; 0x80
 80075c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ca:	e1d4      	b.n	8007976 <UART_SetConfig+0x5a6>
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a4f      	ldr	r2, [pc, #316]	; (8007710 <UART_SetConfig+0x340>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d130      	bne.n	8007638 <UART_SetConfig+0x268>
 80075d6:	4b4c      	ldr	r3, [pc, #304]	; (8007708 <UART_SetConfig+0x338>)
 80075d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075da:	f003 0307 	and.w	r3, r3, #7
 80075de:	2b05      	cmp	r3, #5
 80075e0:	d826      	bhi.n	8007630 <UART_SetConfig+0x260>
 80075e2:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <UART_SetConfig+0x218>)
 80075e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e8:	08007601 	.word	0x08007601
 80075ec:	08007609 	.word	0x08007609
 80075f0:	08007611 	.word	0x08007611
 80075f4:	08007619 	.word	0x08007619
 80075f8:	08007621 	.word	0x08007621
 80075fc:	08007629 	.word	0x08007629
 8007600:	2300      	movs	r3, #0
 8007602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007606:	e1b6      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007608:	2304      	movs	r3, #4
 800760a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800760e:	e1b2      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007610:	2308      	movs	r3, #8
 8007612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007616:	e1ae      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007618:	2310      	movs	r3, #16
 800761a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800761e:	e1aa      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007620:	2320      	movs	r3, #32
 8007622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007626:	e1a6      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007628:	2340      	movs	r3, #64	; 0x40
 800762a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800762e:	e1a2      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007630:	2380      	movs	r3, #128	; 0x80
 8007632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007636:	e19e      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a35      	ldr	r2, [pc, #212]	; (8007714 <UART_SetConfig+0x344>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d130      	bne.n	80076a4 <UART_SetConfig+0x2d4>
 8007642:	4b31      	ldr	r3, [pc, #196]	; (8007708 <UART_SetConfig+0x338>)
 8007644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007646:	f003 0307 	and.w	r3, r3, #7
 800764a:	2b05      	cmp	r3, #5
 800764c:	d826      	bhi.n	800769c <UART_SetConfig+0x2cc>
 800764e:	a201      	add	r2, pc, #4	; (adr r2, 8007654 <UART_SetConfig+0x284>)
 8007650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007654:	0800766d 	.word	0x0800766d
 8007658:	08007675 	.word	0x08007675
 800765c:	0800767d 	.word	0x0800767d
 8007660:	08007685 	.word	0x08007685
 8007664:	0800768d 	.word	0x0800768d
 8007668:	08007695 	.word	0x08007695
 800766c:	2300      	movs	r3, #0
 800766e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007672:	e180      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007674:	2304      	movs	r3, #4
 8007676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800767a:	e17c      	b.n	8007976 <UART_SetConfig+0x5a6>
 800767c:	2308      	movs	r3, #8
 800767e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007682:	e178      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007684:	2310      	movs	r3, #16
 8007686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800768a:	e174      	b.n	8007976 <UART_SetConfig+0x5a6>
 800768c:	2320      	movs	r3, #32
 800768e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007692:	e170      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007694:	2340      	movs	r3, #64	; 0x40
 8007696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800769a:	e16c      	b.n	8007976 <UART_SetConfig+0x5a6>
 800769c:	2380      	movs	r3, #128	; 0x80
 800769e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076a2:	e168      	b.n	8007976 <UART_SetConfig+0x5a6>
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a1b      	ldr	r2, [pc, #108]	; (8007718 <UART_SetConfig+0x348>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d142      	bne.n	8007734 <UART_SetConfig+0x364>
 80076ae:	4b16      	ldr	r3, [pc, #88]	; (8007708 <UART_SetConfig+0x338>)
 80076b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	2b05      	cmp	r3, #5
 80076b8:	d838      	bhi.n	800772c <UART_SetConfig+0x35c>
 80076ba:	a201      	add	r2, pc, #4	; (adr r2, 80076c0 <UART_SetConfig+0x2f0>)
 80076bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c0:	080076d9 	.word	0x080076d9
 80076c4:	080076e1 	.word	0x080076e1
 80076c8:	080076e9 	.word	0x080076e9
 80076cc:	080076f1 	.word	0x080076f1
 80076d0:	0800771d 	.word	0x0800771d
 80076d4:	08007725 	.word	0x08007725
 80076d8:	2300      	movs	r3, #0
 80076da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076de:	e14a      	b.n	8007976 <UART_SetConfig+0x5a6>
 80076e0:	2304      	movs	r3, #4
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076e6:	e146      	b.n	8007976 <UART_SetConfig+0x5a6>
 80076e8:	2308      	movs	r3, #8
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ee:	e142      	b.n	8007976 <UART_SetConfig+0x5a6>
 80076f0:	2310      	movs	r3, #16
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076f6:	e13e      	b.n	8007976 <UART_SetConfig+0x5a6>
 80076f8:	cfff69f3 	.word	0xcfff69f3
 80076fc:	58000c00 	.word	0x58000c00
 8007700:	11fff4ff 	.word	0x11fff4ff
 8007704:	40011000 	.word	0x40011000
 8007708:	58024400 	.word	0x58024400
 800770c:	40004400 	.word	0x40004400
 8007710:	40004800 	.word	0x40004800
 8007714:	40004c00 	.word	0x40004c00
 8007718:	40005000 	.word	0x40005000
 800771c:	2320      	movs	r3, #32
 800771e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007722:	e128      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007724:	2340      	movs	r3, #64	; 0x40
 8007726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800772a:	e124      	b.n	8007976 <UART_SetConfig+0x5a6>
 800772c:	2380      	movs	r3, #128	; 0x80
 800772e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007732:	e120      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4acb      	ldr	r2, [pc, #812]	; (8007a68 <UART_SetConfig+0x698>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d176      	bne.n	800782c <UART_SetConfig+0x45c>
 800773e:	4bcb      	ldr	r3, [pc, #812]	; (8007a6c <UART_SetConfig+0x69c>)
 8007740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007746:	2b28      	cmp	r3, #40	; 0x28
 8007748:	d86c      	bhi.n	8007824 <UART_SetConfig+0x454>
 800774a:	a201      	add	r2, pc, #4	; (adr r2, 8007750 <UART_SetConfig+0x380>)
 800774c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007750:	080077f5 	.word	0x080077f5
 8007754:	08007825 	.word	0x08007825
 8007758:	08007825 	.word	0x08007825
 800775c:	08007825 	.word	0x08007825
 8007760:	08007825 	.word	0x08007825
 8007764:	08007825 	.word	0x08007825
 8007768:	08007825 	.word	0x08007825
 800776c:	08007825 	.word	0x08007825
 8007770:	080077fd 	.word	0x080077fd
 8007774:	08007825 	.word	0x08007825
 8007778:	08007825 	.word	0x08007825
 800777c:	08007825 	.word	0x08007825
 8007780:	08007825 	.word	0x08007825
 8007784:	08007825 	.word	0x08007825
 8007788:	08007825 	.word	0x08007825
 800778c:	08007825 	.word	0x08007825
 8007790:	08007805 	.word	0x08007805
 8007794:	08007825 	.word	0x08007825
 8007798:	08007825 	.word	0x08007825
 800779c:	08007825 	.word	0x08007825
 80077a0:	08007825 	.word	0x08007825
 80077a4:	08007825 	.word	0x08007825
 80077a8:	08007825 	.word	0x08007825
 80077ac:	08007825 	.word	0x08007825
 80077b0:	0800780d 	.word	0x0800780d
 80077b4:	08007825 	.word	0x08007825
 80077b8:	08007825 	.word	0x08007825
 80077bc:	08007825 	.word	0x08007825
 80077c0:	08007825 	.word	0x08007825
 80077c4:	08007825 	.word	0x08007825
 80077c8:	08007825 	.word	0x08007825
 80077cc:	08007825 	.word	0x08007825
 80077d0:	08007815 	.word	0x08007815
 80077d4:	08007825 	.word	0x08007825
 80077d8:	08007825 	.word	0x08007825
 80077dc:	08007825 	.word	0x08007825
 80077e0:	08007825 	.word	0x08007825
 80077e4:	08007825 	.word	0x08007825
 80077e8:	08007825 	.word	0x08007825
 80077ec:	08007825 	.word	0x08007825
 80077f0:	0800781d 	.word	0x0800781d
 80077f4:	2301      	movs	r3, #1
 80077f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077fa:	e0bc      	b.n	8007976 <UART_SetConfig+0x5a6>
 80077fc:	2304      	movs	r3, #4
 80077fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007802:	e0b8      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007804:	2308      	movs	r3, #8
 8007806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800780a:	e0b4      	b.n	8007976 <UART_SetConfig+0x5a6>
 800780c:	2310      	movs	r3, #16
 800780e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007812:	e0b0      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007814:	2320      	movs	r3, #32
 8007816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800781a:	e0ac      	b.n	8007976 <UART_SetConfig+0x5a6>
 800781c:	2340      	movs	r3, #64	; 0x40
 800781e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007822:	e0a8      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007824:	2380      	movs	r3, #128	; 0x80
 8007826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800782a:	e0a4      	b.n	8007976 <UART_SetConfig+0x5a6>
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a8f      	ldr	r2, [pc, #572]	; (8007a70 <UART_SetConfig+0x6a0>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d130      	bne.n	8007898 <UART_SetConfig+0x4c8>
 8007836:	4b8d      	ldr	r3, [pc, #564]	; (8007a6c <UART_SetConfig+0x69c>)
 8007838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783a:	f003 0307 	and.w	r3, r3, #7
 800783e:	2b05      	cmp	r3, #5
 8007840:	d826      	bhi.n	8007890 <UART_SetConfig+0x4c0>
 8007842:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <UART_SetConfig+0x478>)
 8007844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007848:	08007861 	.word	0x08007861
 800784c:	08007869 	.word	0x08007869
 8007850:	08007871 	.word	0x08007871
 8007854:	08007879 	.word	0x08007879
 8007858:	08007881 	.word	0x08007881
 800785c:	08007889 	.word	0x08007889
 8007860:	2300      	movs	r3, #0
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007866:	e086      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007868:	2304      	movs	r3, #4
 800786a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800786e:	e082      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007870:	2308      	movs	r3, #8
 8007872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007876:	e07e      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007878:	2310      	movs	r3, #16
 800787a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800787e:	e07a      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007880:	2320      	movs	r3, #32
 8007882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007886:	e076      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007888:	2340      	movs	r3, #64	; 0x40
 800788a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800788e:	e072      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007890:	2380      	movs	r3, #128	; 0x80
 8007892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007896:	e06e      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a75      	ldr	r2, [pc, #468]	; (8007a74 <UART_SetConfig+0x6a4>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d130      	bne.n	8007904 <UART_SetConfig+0x534>
 80078a2:	4b72      	ldr	r3, [pc, #456]	; (8007a6c <UART_SetConfig+0x69c>)
 80078a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	2b05      	cmp	r3, #5
 80078ac:	d826      	bhi.n	80078fc <UART_SetConfig+0x52c>
 80078ae:	a201      	add	r2, pc, #4	; (adr r2, 80078b4 <UART_SetConfig+0x4e4>)
 80078b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b4:	080078cd 	.word	0x080078cd
 80078b8:	080078d5 	.word	0x080078d5
 80078bc:	080078dd 	.word	0x080078dd
 80078c0:	080078e5 	.word	0x080078e5
 80078c4:	080078ed 	.word	0x080078ed
 80078c8:	080078f5 	.word	0x080078f5
 80078cc:	2300      	movs	r3, #0
 80078ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078d2:	e050      	b.n	8007976 <UART_SetConfig+0x5a6>
 80078d4:	2304      	movs	r3, #4
 80078d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078da:	e04c      	b.n	8007976 <UART_SetConfig+0x5a6>
 80078dc:	2308      	movs	r3, #8
 80078de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078e2:	e048      	b.n	8007976 <UART_SetConfig+0x5a6>
 80078e4:	2310      	movs	r3, #16
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ea:	e044      	b.n	8007976 <UART_SetConfig+0x5a6>
 80078ec:	2320      	movs	r3, #32
 80078ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078f2:	e040      	b.n	8007976 <UART_SetConfig+0x5a6>
 80078f4:	2340      	movs	r3, #64	; 0x40
 80078f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078fa:	e03c      	b.n	8007976 <UART_SetConfig+0x5a6>
 80078fc:	2380      	movs	r3, #128	; 0x80
 80078fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007902:	e038      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a5b      	ldr	r2, [pc, #364]	; (8007a78 <UART_SetConfig+0x6a8>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d130      	bne.n	8007970 <UART_SetConfig+0x5a0>
 800790e:	4b57      	ldr	r3, [pc, #348]	; (8007a6c <UART_SetConfig+0x69c>)
 8007910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007912:	f003 0307 	and.w	r3, r3, #7
 8007916:	2b05      	cmp	r3, #5
 8007918:	d826      	bhi.n	8007968 <UART_SetConfig+0x598>
 800791a:	a201      	add	r2, pc, #4	; (adr r2, 8007920 <UART_SetConfig+0x550>)
 800791c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007920:	08007939 	.word	0x08007939
 8007924:	08007941 	.word	0x08007941
 8007928:	08007949 	.word	0x08007949
 800792c:	08007951 	.word	0x08007951
 8007930:	08007959 	.word	0x08007959
 8007934:	08007961 	.word	0x08007961
 8007938:	2302      	movs	r3, #2
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800793e:	e01a      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007940:	2304      	movs	r3, #4
 8007942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007946:	e016      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007948:	2308      	movs	r3, #8
 800794a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800794e:	e012      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007950:	2310      	movs	r3, #16
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007956:	e00e      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007958:	2320      	movs	r3, #32
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800795e:	e00a      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007960:	2340      	movs	r3, #64	; 0x40
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007966:	e006      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007968:	2380      	movs	r3, #128	; 0x80
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800796e:	e002      	b.n	8007976 <UART_SetConfig+0x5a6>
 8007970:	2380      	movs	r3, #128	; 0x80
 8007972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a3f      	ldr	r2, [pc, #252]	; (8007a78 <UART_SetConfig+0x6a8>)
 800797c:	4293      	cmp	r3, r2
 800797e:	f040 80f8 	bne.w	8007b72 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007982:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007986:	2b20      	cmp	r3, #32
 8007988:	dc46      	bgt.n	8007a18 <UART_SetConfig+0x648>
 800798a:	2b02      	cmp	r3, #2
 800798c:	f2c0 8082 	blt.w	8007a94 <UART_SetConfig+0x6c4>
 8007990:	3b02      	subs	r3, #2
 8007992:	2b1e      	cmp	r3, #30
 8007994:	d87e      	bhi.n	8007a94 <UART_SetConfig+0x6c4>
 8007996:	a201      	add	r2, pc, #4	; (adr r2, 800799c <UART_SetConfig+0x5cc>)
 8007998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799c:	08007a1f 	.word	0x08007a1f
 80079a0:	08007a95 	.word	0x08007a95
 80079a4:	08007a27 	.word	0x08007a27
 80079a8:	08007a95 	.word	0x08007a95
 80079ac:	08007a95 	.word	0x08007a95
 80079b0:	08007a95 	.word	0x08007a95
 80079b4:	08007a37 	.word	0x08007a37
 80079b8:	08007a95 	.word	0x08007a95
 80079bc:	08007a95 	.word	0x08007a95
 80079c0:	08007a95 	.word	0x08007a95
 80079c4:	08007a95 	.word	0x08007a95
 80079c8:	08007a95 	.word	0x08007a95
 80079cc:	08007a95 	.word	0x08007a95
 80079d0:	08007a95 	.word	0x08007a95
 80079d4:	08007a47 	.word	0x08007a47
 80079d8:	08007a95 	.word	0x08007a95
 80079dc:	08007a95 	.word	0x08007a95
 80079e0:	08007a95 	.word	0x08007a95
 80079e4:	08007a95 	.word	0x08007a95
 80079e8:	08007a95 	.word	0x08007a95
 80079ec:	08007a95 	.word	0x08007a95
 80079f0:	08007a95 	.word	0x08007a95
 80079f4:	08007a95 	.word	0x08007a95
 80079f8:	08007a95 	.word	0x08007a95
 80079fc:	08007a95 	.word	0x08007a95
 8007a00:	08007a95 	.word	0x08007a95
 8007a04:	08007a95 	.word	0x08007a95
 8007a08:	08007a95 	.word	0x08007a95
 8007a0c:	08007a95 	.word	0x08007a95
 8007a10:	08007a95 	.word	0x08007a95
 8007a14:	08007a87 	.word	0x08007a87
 8007a18:	2b40      	cmp	r3, #64	; 0x40
 8007a1a:	d037      	beq.n	8007a8c <UART_SetConfig+0x6bc>
 8007a1c:	e03a      	b.n	8007a94 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a1e:	f7fc ff95 	bl	800494c <HAL_RCCEx_GetD3PCLK1Freq>
 8007a22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a24:	e03c      	b.n	8007aa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fc ffa4 	bl	8004978 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a34:	e034      	b.n	8007aa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a36:	f107 0318 	add.w	r3, r7, #24
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fd f8f0 	bl	8004c20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a44:	e02c      	b.n	8007aa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a46:	4b09      	ldr	r3, [pc, #36]	; (8007a6c <UART_SetConfig+0x69c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0320 	and.w	r3, r3, #32
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d016      	beq.n	8007a80 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a52:	4b06      	ldr	r3, [pc, #24]	; (8007a6c <UART_SetConfig+0x69c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	08db      	lsrs	r3, r3, #3
 8007a58:	f003 0303 	and.w	r3, r3, #3
 8007a5c:	4a07      	ldr	r2, [pc, #28]	; (8007a7c <UART_SetConfig+0x6ac>)
 8007a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a64:	e01c      	b.n	8007aa0 <UART_SetConfig+0x6d0>
 8007a66:	bf00      	nop
 8007a68:	40011400 	.word	0x40011400
 8007a6c:	58024400 	.word	0x58024400
 8007a70:	40007800 	.word	0x40007800
 8007a74:	40007c00 	.word	0x40007c00
 8007a78:	58000c00 	.word	0x58000c00
 8007a7c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007a80:	4b9d      	ldr	r3, [pc, #628]	; (8007cf8 <UART_SetConfig+0x928>)
 8007a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a84:	e00c      	b.n	8007aa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a86:	4b9d      	ldr	r3, [pc, #628]	; (8007cfc <UART_SetConfig+0x92c>)
 8007a88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a8a:	e009      	b.n	8007aa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a92:	e005      	b.n	8007aa0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007a9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 81de 	beq.w	8007e64 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	4a94      	ldr	r2, [pc, #592]	; (8007d00 <UART_SetConfig+0x930>)
 8007aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aba:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	4413      	add	r3, r2
 8007ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d305      	bcc.n	8007ad8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d903      	bls.n	8007ae0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007ade:	e1c1      	b.n	8007e64 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	60bb      	str	r3, [r7, #8]
 8007ae6:	60fa      	str	r2, [r7, #12]
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	4a84      	ldr	r2, [pc, #528]	; (8007d00 <UART_SetConfig+0x930>)
 8007aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	2200      	movs	r2, #0
 8007af6:	603b      	str	r3, [r7, #0]
 8007af8:	607a      	str	r2, [r7, #4]
 8007afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007afe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b02:	f7f8 fc45 	bl	8000390 <__aeabi_uldivmod>
 8007b06:	4602      	mov	r2, r0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	f04f 0200 	mov.w	r2, #0
 8007b12:	f04f 0300 	mov.w	r3, #0
 8007b16:	020b      	lsls	r3, r1, #8
 8007b18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b1c:	0202      	lsls	r2, r0, #8
 8007b1e:	6979      	ldr	r1, [r7, #20]
 8007b20:	6849      	ldr	r1, [r1, #4]
 8007b22:	0849      	lsrs	r1, r1, #1
 8007b24:	2000      	movs	r0, #0
 8007b26:	460c      	mov	r4, r1
 8007b28:	4605      	mov	r5, r0
 8007b2a:	eb12 0804 	adds.w	r8, r2, r4
 8007b2e:	eb43 0905 	adc.w	r9, r3, r5
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	469a      	mov	sl, r3
 8007b3a:	4693      	mov	fp, r2
 8007b3c:	4652      	mov	r2, sl
 8007b3e:	465b      	mov	r3, fp
 8007b40:	4640      	mov	r0, r8
 8007b42:	4649      	mov	r1, r9
 8007b44:	f7f8 fc24 	bl	8000390 <__aeabi_uldivmod>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b56:	d308      	bcc.n	8007b6a <UART_SetConfig+0x79a>
 8007b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b5e:	d204      	bcs.n	8007b6a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b66:	60da      	str	r2, [r3, #12]
 8007b68:	e17c      	b.n	8007e64 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007b70:	e178      	b.n	8007e64 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b7a:	f040 80c5 	bne.w	8007d08 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007b7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007b82:	2b20      	cmp	r3, #32
 8007b84:	dc48      	bgt.n	8007c18 <UART_SetConfig+0x848>
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	db7b      	blt.n	8007c82 <UART_SetConfig+0x8b2>
 8007b8a:	2b20      	cmp	r3, #32
 8007b8c:	d879      	bhi.n	8007c82 <UART_SetConfig+0x8b2>
 8007b8e:	a201      	add	r2, pc, #4	; (adr r2, 8007b94 <UART_SetConfig+0x7c4>)
 8007b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b94:	08007c1f 	.word	0x08007c1f
 8007b98:	08007c27 	.word	0x08007c27
 8007b9c:	08007c83 	.word	0x08007c83
 8007ba0:	08007c83 	.word	0x08007c83
 8007ba4:	08007c2f 	.word	0x08007c2f
 8007ba8:	08007c83 	.word	0x08007c83
 8007bac:	08007c83 	.word	0x08007c83
 8007bb0:	08007c83 	.word	0x08007c83
 8007bb4:	08007c3f 	.word	0x08007c3f
 8007bb8:	08007c83 	.word	0x08007c83
 8007bbc:	08007c83 	.word	0x08007c83
 8007bc0:	08007c83 	.word	0x08007c83
 8007bc4:	08007c83 	.word	0x08007c83
 8007bc8:	08007c83 	.word	0x08007c83
 8007bcc:	08007c83 	.word	0x08007c83
 8007bd0:	08007c83 	.word	0x08007c83
 8007bd4:	08007c4f 	.word	0x08007c4f
 8007bd8:	08007c83 	.word	0x08007c83
 8007bdc:	08007c83 	.word	0x08007c83
 8007be0:	08007c83 	.word	0x08007c83
 8007be4:	08007c83 	.word	0x08007c83
 8007be8:	08007c83 	.word	0x08007c83
 8007bec:	08007c83 	.word	0x08007c83
 8007bf0:	08007c83 	.word	0x08007c83
 8007bf4:	08007c83 	.word	0x08007c83
 8007bf8:	08007c83 	.word	0x08007c83
 8007bfc:	08007c83 	.word	0x08007c83
 8007c00:	08007c83 	.word	0x08007c83
 8007c04:	08007c83 	.word	0x08007c83
 8007c08:	08007c83 	.word	0x08007c83
 8007c0c:	08007c83 	.word	0x08007c83
 8007c10:	08007c83 	.word	0x08007c83
 8007c14:	08007c75 	.word	0x08007c75
 8007c18:	2b40      	cmp	r3, #64	; 0x40
 8007c1a:	d02e      	beq.n	8007c7a <UART_SetConfig+0x8aa>
 8007c1c:	e031      	b.n	8007c82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c1e:	f7fb ff23 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 8007c22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c24:	e033      	b.n	8007c8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c26:	f7fb ff35 	bl	8003a94 <HAL_RCC_GetPCLK2Freq>
 8007c2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c2c:	e02f      	b.n	8007c8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fc fea0 	bl	8004978 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c3c:	e027      	b.n	8007c8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c3e:	f107 0318 	add.w	r3, r7, #24
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fc ffec 	bl	8004c20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c4c:	e01f      	b.n	8007c8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c4e:	4b2d      	ldr	r3, [pc, #180]	; (8007d04 <UART_SetConfig+0x934>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0320 	and.w	r3, r3, #32
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d009      	beq.n	8007c6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c5a:	4b2a      	ldr	r3, [pc, #168]	; (8007d04 <UART_SetConfig+0x934>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	08db      	lsrs	r3, r3, #3
 8007c60:	f003 0303 	and.w	r3, r3, #3
 8007c64:	4a24      	ldr	r2, [pc, #144]	; (8007cf8 <UART_SetConfig+0x928>)
 8007c66:	fa22 f303 	lsr.w	r3, r2, r3
 8007c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c6c:	e00f      	b.n	8007c8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007c6e:	4b22      	ldr	r3, [pc, #136]	; (8007cf8 <UART_SetConfig+0x928>)
 8007c70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c72:	e00c      	b.n	8007c8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c74:	4b21      	ldr	r3, [pc, #132]	; (8007cfc <UART_SetConfig+0x92c>)
 8007c76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c78:	e009      	b.n	8007c8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c80:	e005      	b.n	8007c8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007c8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f000 80e7 	beq.w	8007e64 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9a:	4a19      	ldr	r2, [pc, #100]	; (8007d00 <UART_SetConfig+0x930>)
 8007c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ca8:	005a      	lsls	r2, r3, #1
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	085b      	lsrs	r3, r3, #1
 8007cb0:	441a      	add	r2, r3
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbe:	2b0f      	cmp	r3, #15
 8007cc0:	d916      	bls.n	8007cf0 <UART_SetConfig+0x920>
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cc8:	d212      	bcs.n	8007cf0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	f023 030f 	bic.w	r3, r3, #15
 8007cd2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd6:	085b      	lsrs	r3, r3, #1
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	f003 0307 	and.w	r3, r3, #7
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007cec:	60da      	str	r2, [r3, #12]
 8007cee:	e0b9      	b.n	8007e64 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007cf6:	e0b5      	b.n	8007e64 <UART_SetConfig+0xa94>
 8007cf8:	03d09000 	.word	0x03d09000
 8007cfc:	003d0900 	.word	0x003d0900
 8007d00:	080092cc 	.word	0x080092cc
 8007d04:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d0c:	2b20      	cmp	r3, #32
 8007d0e:	dc49      	bgt.n	8007da4 <UART_SetConfig+0x9d4>
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	db7c      	blt.n	8007e0e <UART_SetConfig+0xa3e>
 8007d14:	2b20      	cmp	r3, #32
 8007d16:	d87a      	bhi.n	8007e0e <UART_SetConfig+0xa3e>
 8007d18:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <UART_SetConfig+0x950>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007dab 	.word	0x08007dab
 8007d24:	08007db3 	.word	0x08007db3
 8007d28:	08007e0f 	.word	0x08007e0f
 8007d2c:	08007e0f 	.word	0x08007e0f
 8007d30:	08007dbb 	.word	0x08007dbb
 8007d34:	08007e0f 	.word	0x08007e0f
 8007d38:	08007e0f 	.word	0x08007e0f
 8007d3c:	08007e0f 	.word	0x08007e0f
 8007d40:	08007dcb 	.word	0x08007dcb
 8007d44:	08007e0f 	.word	0x08007e0f
 8007d48:	08007e0f 	.word	0x08007e0f
 8007d4c:	08007e0f 	.word	0x08007e0f
 8007d50:	08007e0f 	.word	0x08007e0f
 8007d54:	08007e0f 	.word	0x08007e0f
 8007d58:	08007e0f 	.word	0x08007e0f
 8007d5c:	08007e0f 	.word	0x08007e0f
 8007d60:	08007ddb 	.word	0x08007ddb
 8007d64:	08007e0f 	.word	0x08007e0f
 8007d68:	08007e0f 	.word	0x08007e0f
 8007d6c:	08007e0f 	.word	0x08007e0f
 8007d70:	08007e0f 	.word	0x08007e0f
 8007d74:	08007e0f 	.word	0x08007e0f
 8007d78:	08007e0f 	.word	0x08007e0f
 8007d7c:	08007e0f 	.word	0x08007e0f
 8007d80:	08007e0f 	.word	0x08007e0f
 8007d84:	08007e0f 	.word	0x08007e0f
 8007d88:	08007e0f 	.word	0x08007e0f
 8007d8c:	08007e0f 	.word	0x08007e0f
 8007d90:	08007e0f 	.word	0x08007e0f
 8007d94:	08007e0f 	.word	0x08007e0f
 8007d98:	08007e0f 	.word	0x08007e0f
 8007d9c:	08007e0f 	.word	0x08007e0f
 8007da0:	08007e01 	.word	0x08007e01
 8007da4:	2b40      	cmp	r3, #64	; 0x40
 8007da6:	d02e      	beq.n	8007e06 <UART_SetConfig+0xa36>
 8007da8:	e031      	b.n	8007e0e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007daa:	f7fb fe5d 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 8007dae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007db0:	e033      	b.n	8007e1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007db2:	f7fb fe6f 	bl	8003a94 <HAL_RCC_GetPCLK2Freq>
 8007db6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007db8:	e02f      	b.n	8007e1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fc fdda 	bl	8004978 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dc8:	e027      	b.n	8007e1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dca:	f107 0318 	add.w	r3, r7, #24
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fc ff26 	bl	8004c20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dd8:	e01f      	b.n	8007e1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dda:	4b2d      	ldr	r3, [pc, #180]	; (8007e90 <UART_SetConfig+0xac0>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0320 	and.w	r3, r3, #32
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d009      	beq.n	8007dfa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007de6:	4b2a      	ldr	r3, [pc, #168]	; (8007e90 <UART_SetConfig+0xac0>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	08db      	lsrs	r3, r3, #3
 8007dec:	f003 0303 	and.w	r3, r3, #3
 8007df0:	4a28      	ldr	r2, [pc, #160]	; (8007e94 <UART_SetConfig+0xac4>)
 8007df2:	fa22 f303 	lsr.w	r3, r2, r3
 8007df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007df8:	e00f      	b.n	8007e1a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007dfa:	4b26      	ldr	r3, [pc, #152]	; (8007e94 <UART_SetConfig+0xac4>)
 8007dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dfe:	e00c      	b.n	8007e1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e00:	4b25      	ldr	r3, [pc, #148]	; (8007e98 <UART_SetConfig+0xac8>)
 8007e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e04:	e009      	b.n	8007e1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e0c:	e005      	b.n	8007e1a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007e18:	bf00      	nop
    }

    if (pclk != 0U)
 8007e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d021      	beq.n	8007e64 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e24:	4a1d      	ldr	r2, [pc, #116]	; (8007e9c <UART_SetConfig+0xacc>)
 8007e26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	085b      	lsrs	r3, r3, #1
 8007e38:	441a      	add	r2, r3
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e42:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e46:	2b0f      	cmp	r3, #15
 8007e48:	d909      	bls.n	8007e5e <UART_SetConfig+0xa8e>
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e50:	d205      	bcs.n	8007e5e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	60da      	str	r2, [r3, #12]
 8007e5c:	e002      	b.n	8007e64 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	2200      	movs	r2, #0
 8007e78:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007e80:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3748      	adds	r7, #72	; 0x48
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e8e:	bf00      	nop
 8007e90:	58024400 	.word	0x58024400
 8007e94:	03d09000 	.word	0x03d09000
 8007e98:	003d0900 	.word	0x003d0900
 8007e9c:	080092cc 	.word	0x080092cc

08007ea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00a      	beq.n	8007eca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ece:	f003 0302 	and.w	r3, r3, #2
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00a      	beq.n	8007eec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef0:	f003 0304 	and.w	r3, r3, #4
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00a      	beq.n	8007f0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f12:	f003 0308 	and.w	r3, r3, #8
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00a      	beq.n	8007f30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	430a      	orrs	r2, r1
 8007f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f34:	f003 0310 	and.w	r3, r3, #16
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00a      	beq.n	8007f52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f56:	f003 0320 	and.w	r3, r3, #32
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00a      	beq.n	8007f74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	430a      	orrs	r2, r1
 8007f72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d01a      	beq.n	8007fb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f9e:	d10a      	bne.n	8007fb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00a      	beq.n	8007fd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	605a      	str	r2, [r3, #4]
  }
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af02      	add	r7, sp, #8
 8007fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ff4:	f7fa fa38 	bl	8002468 <HAL_GetTick>
 8007ff8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 0308 	and.w	r3, r3, #8
 8008004:	2b08      	cmp	r3, #8
 8008006:	d10e      	bne.n	8008026 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008008:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f82f 	bl	800807a <UART_WaitOnFlagUntilTimeout>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d001      	beq.n	8008026 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e025      	b.n	8008072 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0304 	and.w	r3, r3, #4
 8008030:	2b04      	cmp	r3, #4
 8008032:	d10e      	bne.n	8008052 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008034:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f819 	bl	800807a <UART_WaitOnFlagUntilTimeout>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e00f      	b.n	8008072 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2220      	movs	r2, #32
 8008056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2220      	movs	r2, #32
 800805e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b09c      	sub	sp, #112	; 0x70
 800807e:	af00      	add	r7, sp, #0
 8008080:	60f8      	str	r0, [r7, #12]
 8008082:	60b9      	str	r1, [r7, #8]
 8008084:	603b      	str	r3, [r7, #0]
 8008086:	4613      	mov	r3, r2
 8008088:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800808a:	e0a9      	b.n	80081e0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800808c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800808e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008092:	f000 80a5 	beq.w	80081e0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008096:	f7fa f9e7 	bl	8002468 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d302      	bcc.n	80080ac <UART_WaitOnFlagUntilTimeout+0x32>
 80080a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d140      	bne.n	800812e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080b4:	e853 3f00 	ldrex	r3, [r3]
 80080b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80080ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080c0:	667b      	str	r3, [r7, #100]	; 0x64
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80080d2:	e841 2300 	strex	r3, r2, [r1]
 80080d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80080d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1e6      	bne.n	80080ac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3308      	adds	r3, #8
 80080e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e8:	e853 3f00 	ldrex	r3, [r3]
 80080ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f0:	f023 0301 	bic.w	r3, r3, #1
 80080f4:	663b      	str	r3, [r7, #96]	; 0x60
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3308      	adds	r3, #8
 80080fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80080fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8008100:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008102:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008104:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008106:	e841 2300 	strex	r3, r2, [r1]
 800810a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800810c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1e5      	bne.n	80080de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2220      	movs	r2, #32
 8008116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2220      	movs	r2, #32
 800811e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e069      	b.n	8008202 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	2b00      	cmp	r3, #0
 800813a:	d051      	beq.n	80081e0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800814a:	d149      	bne.n	80081e0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008154:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815e:	e853 3f00 	ldrex	r3, [r3]
 8008162:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008166:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800816a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	461a      	mov	r2, r3
 8008172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008174:	637b      	str	r3, [r7, #52]	; 0x34
 8008176:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800817a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800817c:	e841 2300 	strex	r3, r2, [r1]
 8008180:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e6      	bne.n	8008156 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3308      	adds	r3, #8
 800818e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	e853 3f00 	ldrex	r3, [r3]
 8008196:	613b      	str	r3, [r7, #16]
   return(result);
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	f023 0301 	bic.w	r3, r3, #1
 800819e:	66bb      	str	r3, [r7, #104]	; 0x68
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3308      	adds	r3, #8
 80081a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80081a8:	623a      	str	r2, [r7, #32]
 80081aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ac:	69f9      	ldr	r1, [r7, #28]
 80081ae:	6a3a      	ldr	r2, [r7, #32]
 80081b0:	e841 2300 	strex	r3, r2, [r1]
 80081b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1e5      	bne.n	8008188 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2220      	movs	r2, #32
 80081c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2220      	movs	r2, #32
 80081c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2220      	movs	r2, #32
 80081d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e010      	b.n	8008202 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	69da      	ldr	r2, [r3, #28]
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	4013      	ands	r3, r2
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	bf0c      	ite	eq
 80081f0:	2301      	moveq	r3, #1
 80081f2:	2300      	movne	r3, #0
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	461a      	mov	r2, r3
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	f43f af46 	beq.w	800808c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3770      	adds	r7, #112	; 0x70
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800820a:	b480      	push	{r7}
 800820c:	b085      	sub	sp, #20
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008218:	2b01      	cmp	r3, #1
 800821a:	d101      	bne.n	8008220 <HAL_UARTEx_DisableFifoMode+0x16>
 800821c:	2302      	movs	r3, #2
 800821e:	e027      	b.n	8008270 <HAL_UARTEx_DisableFifoMode+0x66>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2224      	movs	r2, #36	; 0x24
 800822c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f022 0201 	bic.w	r2, r2, #1
 8008246:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800824e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2220      	movs	r2, #32
 8008262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800828c:	2b01      	cmp	r3, #1
 800828e:	d101      	bne.n	8008294 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008290:	2302      	movs	r3, #2
 8008292:	e02d      	b.n	80082f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2224      	movs	r2, #36	; 0x24
 80082a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f022 0201 	bic.w	r2, r2, #1
 80082ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	430a      	orrs	r2, r1
 80082ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f84f 	bl	8008374 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008308:	2b01      	cmp	r3, #1
 800830a:	d101      	bne.n	8008310 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800830c:	2302      	movs	r3, #2
 800830e:	e02d      	b.n	800836c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2224      	movs	r2, #36	; 0x24
 800831c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f022 0201 	bic.w	r2, r2, #1
 8008336:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	430a      	orrs	r2, r1
 800834a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f811 	bl	8008374 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2220      	movs	r2, #32
 800835e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008380:	2b00      	cmp	r3, #0
 8008382:	d108      	bne.n	8008396 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008394:	e031      	b.n	80083fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008396:	2310      	movs	r3, #16
 8008398:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800839a:	2310      	movs	r3, #16
 800839c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	0e5b      	lsrs	r3, r3, #25
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	f003 0307 	and.w	r3, r3, #7
 80083ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	0f5b      	lsrs	r3, r3, #29
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	f003 0307 	and.w	r3, r3, #7
 80083bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	7b3a      	ldrb	r2, [r7, #12]
 80083c2:	4911      	ldr	r1, [pc, #68]	; (8008408 <UARTEx_SetNbDataToProcess+0x94>)
 80083c4:	5c8a      	ldrb	r2, [r1, r2]
 80083c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80083ca:	7b3a      	ldrb	r2, [r7, #12]
 80083cc:	490f      	ldr	r1, [pc, #60]	; (800840c <UARTEx_SetNbDataToProcess+0x98>)
 80083ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
 80083de:	7b7a      	ldrb	r2, [r7, #13]
 80083e0:	4909      	ldr	r1, [pc, #36]	; (8008408 <UARTEx_SetNbDataToProcess+0x94>)
 80083e2:	5c8a      	ldrb	r2, [r1, r2]
 80083e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083e8:	7b7a      	ldrb	r2, [r7, #13]
 80083ea:	4908      	ldr	r1, [pc, #32]	; (800840c <UARTEx_SetNbDataToProcess+0x98>)
 80083ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80083fa:	bf00      	nop
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	080092e4 	.word	0x080092e4
 800840c:	080092ec 	.word	0x080092ec

08008410 <__errno>:
 8008410:	4b01      	ldr	r3, [pc, #4]	; (8008418 <__errno+0x8>)
 8008412:	6818      	ldr	r0, [r3, #0]
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	24000018 	.word	0x24000018

0800841c <__libc_init_array>:
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	4d0d      	ldr	r5, [pc, #52]	; (8008454 <__libc_init_array+0x38>)
 8008420:	4c0d      	ldr	r4, [pc, #52]	; (8008458 <__libc_init_array+0x3c>)
 8008422:	1b64      	subs	r4, r4, r5
 8008424:	10a4      	asrs	r4, r4, #2
 8008426:	2600      	movs	r6, #0
 8008428:	42a6      	cmp	r6, r4
 800842a:	d109      	bne.n	8008440 <__libc_init_array+0x24>
 800842c:	4d0b      	ldr	r5, [pc, #44]	; (800845c <__libc_init_array+0x40>)
 800842e:	4c0c      	ldr	r4, [pc, #48]	; (8008460 <__libc_init_array+0x44>)
 8008430:	f000 fc8e 	bl	8008d50 <_init>
 8008434:	1b64      	subs	r4, r4, r5
 8008436:	10a4      	asrs	r4, r4, #2
 8008438:	2600      	movs	r6, #0
 800843a:	42a6      	cmp	r6, r4
 800843c:	d105      	bne.n	800844a <__libc_init_array+0x2e>
 800843e:	bd70      	pop	{r4, r5, r6, pc}
 8008440:	f855 3b04 	ldr.w	r3, [r5], #4
 8008444:	4798      	blx	r3
 8008446:	3601      	adds	r6, #1
 8008448:	e7ee      	b.n	8008428 <__libc_init_array+0xc>
 800844a:	f855 3b04 	ldr.w	r3, [r5], #4
 800844e:	4798      	blx	r3
 8008450:	3601      	adds	r6, #1
 8008452:	e7f2      	b.n	800843a <__libc_init_array+0x1e>
 8008454:	08009390 	.word	0x08009390
 8008458:	08009390 	.word	0x08009390
 800845c:	08009390 	.word	0x08009390
 8008460:	08009394 	.word	0x08009394

08008464 <memcpy>:
 8008464:	440a      	add	r2, r1
 8008466:	4291      	cmp	r1, r2
 8008468:	f100 33ff 	add.w	r3, r0, #4294967295
 800846c:	d100      	bne.n	8008470 <memcpy+0xc>
 800846e:	4770      	bx	lr
 8008470:	b510      	push	{r4, lr}
 8008472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008476:	f803 4f01 	strb.w	r4, [r3, #1]!
 800847a:	4291      	cmp	r1, r2
 800847c:	d1f9      	bne.n	8008472 <memcpy+0xe>
 800847e:	bd10      	pop	{r4, pc}

08008480 <memset>:
 8008480:	4402      	add	r2, r0
 8008482:	4603      	mov	r3, r0
 8008484:	4293      	cmp	r3, r2
 8008486:	d100      	bne.n	800848a <memset+0xa>
 8008488:	4770      	bx	lr
 800848a:	f803 1b01 	strb.w	r1, [r3], #1
 800848e:	e7f9      	b.n	8008484 <memset+0x4>

08008490 <siprintf>:
 8008490:	b40e      	push	{r1, r2, r3}
 8008492:	b500      	push	{lr}
 8008494:	b09c      	sub	sp, #112	; 0x70
 8008496:	ab1d      	add	r3, sp, #116	; 0x74
 8008498:	9002      	str	r0, [sp, #8]
 800849a:	9006      	str	r0, [sp, #24]
 800849c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084a0:	4809      	ldr	r0, [pc, #36]	; (80084c8 <siprintf+0x38>)
 80084a2:	9107      	str	r1, [sp, #28]
 80084a4:	9104      	str	r1, [sp, #16]
 80084a6:	4909      	ldr	r1, [pc, #36]	; (80084cc <siprintf+0x3c>)
 80084a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ac:	9105      	str	r1, [sp, #20]
 80084ae:	6800      	ldr	r0, [r0, #0]
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	a902      	add	r1, sp, #8
 80084b4:	f000 f8fe 	bl	80086b4 <_svfiprintf_r>
 80084b8:	9b02      	ldr	r3, [sp, #8]
 80084ba:	2200      	movs	r2, #0
 80084bc:	701a      	strb	r2, [r3, #0]
 80084be:	b01c      	add	sp, #112	; 0x70
 80084c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084c4:	b003      	add	sp, #12
 80084c6:	4770      	bx	lr
 80084c8:	24000018 	.word	0x24000018
 80084cc:	ffff0208 	.word	0xffff0208

080084d0 <__retarget_lock_acquire_recursive>:
 80084d0:	4770      	bx	lr

080084d2 <__retarget_lock_release_recursive>:
 80084d2:	4770      	bx	lr

080084d4 <sbrk_aligned>:
 80084d4:	b570      	push	{r4, r5, r6, lr}
 80084d6:	4e0e      	ldr	r6, [pc, #56]	; (8008510 <sbrk_aligned+0x3c>)
 80084d8:	460c      	mov	r4, r1
 80084da:	6831      	ldr	r1, [r6, #0]
 80084dc:	4605      	mov	r5, r0
 80084de:	b911      	cbnz	r1, 80084e6 <sbrk_aligned+0x12>
 80084e0:	f000 fb7c 	bl	8008bdc <_sbrk_r>
 80084e4:	6030      	str	r0, [r6, #0]
 80084e6:	4621      	mov	r1, r4
 80084e8:	4628      	mov	r0, r5
 80084ea:	f000 fb77 	bl	8008bdc <_sbrk_r>
 80084ee:	1c43      	adds	r3, r0, #1
 80084f0:	d00a      	beq.n	8008508 <sbrk_aligned+0x34>
 80084f2:	1cc4      	adds	r4, r0, #3
 80084f4:	f024 0403 	bic.w	r4, r4, #3
 80084f8:	42a0      	cmp	r0, r4
 80084fa:	d007      	beq.n	800850c <sbrk_aligned+0x38>
 80084fc:	1a21      	subs	r1, r4, r0
 80084fe:	4628      	mov	r0, r5
 8008500:	f000 fb6c 	bl	8008bdc <_sbrk_r>
 8008504:	3001      	adds	r0, #1
 8008506:	d101      	bne.n	800850c <sbrk_aligned+0x38>
 8008508:	f04f 34ff 	mov.w	r4, #4294967295
 800850c:	4620      	mov	r0, r4
 800850e:	bd70      	pop	{r4, r5, r6, pc}
 8008510:	2400038c 	.word	0x2400038c

08008514 <_malloc_r>:
 8008514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008518:	1ccd      	adds	r5, r1, #3
 800851a:	f025 0503 	bic.w	r5, r5, #3
 800851e:	3508      	adds	r5, #8
 8008520:	2d0c      	cmp	r5, #12
 8008522:	bf38      	it	cc
 8008524:	250c      	movcc	r5, #12
 8008526:	2d00      	cmp	r5, #0
 8008528:	4607      	mov	r7, r0
 800852a:	db01      	blt.n	8008530 <_malloc_r+0x1c>
 800852c:	42a9      	cmp	r1, r5
 800852e:	d905      	bls.n	800853c <_malloc_r+0x28>
 8008530:	230c      	movs	r3, #12
 8008532:	603b      	str	r3, [r7, #0]
 8008534:	2600      	movs	r6, #0
 8008536:	4630      	mov	r0, r6
 8008538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800853c:	4e2e      	ldr	r6, [pc, #184]	; (80085f8 <_malloc_r+0xe4>)
 800853e:	f000 fb77 	bl	8008c30 <__malloc_lock>
 8008542:	6833      	ldr	r3, [r6, #0]
 8008544:	461c      	mov	r4, r3
 8008546:	bb34      	cbnz	r4, 8008596 <_malloc_r+0x82>
 8008548:	4629      	mov	r1, r5
 800854a:	4638      	mov	r0, r7
 800854c:	f7ff ffc2 	bl	80084d4 <sbrk_aligned>
 8008550:	1c43      	adds	r3, r0, #1
 8008552:	4604      	mov	r4, r0
 8008554:	d14d      	bne.n	80085f2 <_malloc_r+0xde>
 8008556:	6834      	ldr	r4, [r6, #0]
 8008558:	4626      	mov	r6, r4
 800855a:	2e00      	cmp	r6, #0
 800855c:	d140      	bne.n	80085e0 <_malloc_r+0xcc>
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	4631      	mov	r1, r6
 8008562:	4638      	mov	r0, r7
 8008564:	eb04 0803 	add.w	r8, r4, r3
 8008568:	f000 fb38 	bl	8008bdc <_sbrk_r>
 800856c:	4580      	cmp	r8, r0
 800856e:	d13a      	bne.n	80085e6 <_malloc_r+0xd2>
 8008570:	6821      	ldr	r1, [r4, #0]
 8008572:	3503      	adds	r5, #3
 8008574:	1a6d      	subs	r5, r5, r1
 8008576:	f025 0503 	bic.w	r5, r5, #3
 800857a:	3508      	adds	r5, #8
 800857c:	2d0c      	cmp	r5, #12
 800857e:	bf38      	it	cc
 8008580:	250c      	movcc	r5, #12
 8008582:	4629      	mov	r1, r5
 8008584:	4638      	mov	r0, r7
 8008586:	f7ff ffa5 	bl	80084d4 <sbrk_aligned>
 800858a:	3001      	adds	r0, #1
 800858c:	d02b      	beq.n	80085e6 <_malloc_r+0xd2>
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	442b      	add	r3, r5
 8008592:	6023      	str	r3, [r4, #0]
 8008594:	e00e      	b.n	80085b4 <_malloc_r+0xa0>
 8008596:	6822      	ldr	r2, [r4, #0]
 8008598:	1b52      	subs	r2, r2, r5
 800859a:	d41e      	bmi.n	80085da <_malloc_r+0xc6>
 800859c:	2a0b      	cmp	r2, #11
 800859e:	d916      	bls.n	80085ce <_malloc_r+0xba>
 80085a0:	1961      	adds	r1, r4, r5
 80085a2:	42a3      	cmp	r3, r4
 80085a4:	6025      	str	r5, [r4, #0]
 80085a6:	bf18      	it	ne
 80085a8:	6059      	strne	r1, [r3, #4]
 80085aa:	6863      	ldr	r3, [r4, #4]
 80085ac:	bf08      	it	eq
 80085ae:	6031      	streq	r1, [r6, #0]
 80085b0:	5162      	str	r2, [r4, r5]
 80085b2:	604b      	str	r3, [r1, #4]
 80085b4:	4638      	mov	r0, r7
 80085b6:	f104 060b 	add.w	r6, r4, #11
 80085ba:	f000 fb3f 	bl	8008c3c <__malloc_unlock>
 80085be:	f026 0607 	bic.w	r6, r6, #7
 80085c2:	1d23      	adds	r3, r4, #4
 80085c4:	1af2      	subs	r2, r6, r3
 80085c6:	d0b6      	beq.n	8008536 <_malloc_r+0x22>
 80085c8:	1b9b      	subs	r3, r3, r6
 80085ca:	50a3      	str	r3, [r4, r2]
 80085cc:	e7b3      	b.n	8008536 <_malloc_r+0x22>
 80085ce:	6862      	ldr	r2, [r4, #4]
 80085d0:	42a3      	cmp	r3, r4
 80085d2:	bf0c      	ite	eq
 80085d4:	6032      	streq	r2, [r6, #0]
 80085d6:	605a      	strne	r2, [r3, #4]
 80085d8:	e7ec      	b.n	80085b4 <_malloc_r+0xa0>
 80085da:	4623      	mov	r3, r4
 80085dc:	6864      	ldr	r4, [r4, #4]
 80085de:	e7b2      	b.n	8008546 <_malloc_r+0x32>
 80085e0:	4634      	mov	r4, r6
 80085e2:	6876      	ldr	r6, [r6, #4]
 80085e4:	e7b9      	b.n	800855a <_malloc_r+0x46>
 80085e6:	230c      	movs	r3, #12
 80085e8:	603b      	str	r3, [r7, #0]
 80085ea:	4638      	mov	r0, r7
 80085ec:	f000 fb26 	bl	8008c3c <__malloc_unlock>
 80085f0:	e7a1      	b.n	8008536 <_malloc_r+0x22>
 80085f2:	6025      	str	r5, [r4, #0]
 80085f4:	e7de      	b.n	80085b4 <_malloc_r+0xa0>
 80085f6:	bf00      	nop
 80085f8:	24000388 	.word	0x24000388

080085fc <__ssputs_r>:
 80085fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008600:	688e      	ldr	r6, [r1, #8]
 8008602:	429e      	cmp	r6, r3
 8008604:	4682      	mov	sl, r0
 8008606:	460c      	mov	r4, r1
 8008608:	4690      	mov	r8, r2
 800860a:	461f      	mov	r7, r3
 800860c:	d838      	bhi.n	8008680 <__ssputs_r+0x84>
 800860e:	898a      	ldrh	r2, [r1, #12]
 8008610:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008614:	d032      	beq.n	800867c <__ssputs_r+0x80>
 8008616:	6825      	ldr	r5, [r4, #0]
 8008618:	6909      	ldr	r1, [r1, #16]
 800861a:	eba5 0901 	sub.w	r9, r5, r1
 800861e:	6965      	ldr	r5, [r4, #20]
 8008620:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008624:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008628:	3301      	adds	r3, #1
 800862a:	444b      	add	r3, r9
 800862c:	106d      	asrs	r5, r5, #1
 800862e:	429d      	cmp	r5, r3
 8008630:	bf38      	it	cc
 8008632:	461d      	movcc	r5, r3
 8008634:	0553      	lsls	r3, r2, #21
 8008636:	d531      	bpl.n	800869c <__ssputs_r+0xa0>
 8008638:	4629      	mov	r1, r5
 800863a:	f7ff ff6b 	bl	8008514 <_malloc_r>
 800863e:	4606      	mov	r6, r0
 8008640:	b950      	cbnz	r0, 8008658 <__ssputs_r+0x5c>
 8008642:	230c      	movs	r3, #12
 8008644:	f8ca 3000 	str.w	r3, [sl]
 8008648:	89a3      	ldrh	r3, [r4, #12]
 800864a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800864e:	81a3      	strh	r3, [r4, #12]
 8008650:	f04f 30ff 	mov.w	r0, #4294967295
 8008654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008658:	6921      	ldr	r1, [r4, #16]
 800865a:	464a      	mov	r2, r9
 800865c:	f7ff ff02 	bl	8008464 <memcpy>
 8008660:	89a3      	ldrh	r3, [r4, #12]
 8008662:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800866a:	81a3      	strh	r3, [r4, #12]
 800866c:	6126      	str	r6, [r4, #16]
 800866e:	6165      	str	r5, [r4, #20]
 8008670:	444e      	add	r6, r9
 8008672:	eba5 0509 	sub.w	r5, r5, r9
 8008676:	6026      	str	r6, [r4, #0]
 8008678:	60a5      	str	r5, [r4, #8]
 800867a:	463e      	mov	r6, r7
 800867c:	42be      	cmp	r6, r7
 800867e:	d900      	bls.n	8008682 <__ssputs_r+0x86>
 8008680:	463e      	mov	r6, r7
 8008682:	6820      	ldr	r0, [r4, #0]
 8008684:	4632      	mov	r2, r6
 8008686:	4641      	mov	r1, r8
 8008688:	f000 fab8 	bl	8008bfc <memmove>
 800868c:	68a3      	ldr	r3, [r4, #8]
 800868e:	1b9b      	subs	r3, r3, r6
 8008690:	60a3      	str	r3, [r4, #8]
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	4433      	add	r3, r6
 8008696:	6023      	str	r3, [r4, #0]
 8008698:	2000      	movs	r0, #0
 800869a:	e7db      	b.n	8008654 <__ssputs_r+0x58>
 800869c:	462a      	mov	r2, r5
 800869e:	f000 fb1f 	bl	8008ce0 <_realloc_r>
 80086a2:	4606      	mov	r6, r0
 80086a4:	2800      	cmp	r0, #0
 80086a6:	d1e1      	bne.n	800866c <__ssputs_r+0x70>
 80086a8:	6921      	ldr	r1, [r4, #16]
 80086aa:	4650      	mov	r0, sl
 80086ac:	f000 facc 	bl	8008c48 <_free_r>
 80086b0:	e7c7      	b.n	8008642 <__ssputs_r+0x46>
	...

080086b4 <_svfiprintf_r>:
 80086b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b8:	4698      	mov	r8, r3
 80086ba:	898b      	ldrh	r3, [r1, #12]
 80086bc:	061b      	lsls	r3, r3, #24
 80086be:	b09d      	sub	sp, #116	; 0x74
 80086c0:	4607      	mov	r7, r0
 80086c2:	460d      	mov	r5, r1
 80086c4:	4614      	mov	r4, r2
 80086c6:	d50e      	bpl.n	80086e6 <_svfiprintf_r+0x32>
 80086c8:	690b      	ldr	r3, [r1, #16]
 80086ca:	b963      	cbnz	r3, 80086e6 <_svfiprintf_r+0x32>
 80086cc:	2140      	movs	r1, #64	; 0x40
 80086ce:	f7ff ff21 	bl	8008514 <_malloc_r>
 80086d2:	6028      	str	r0, [r5, #0]
 80086d4:	6128      	str	r0, [r5, #16]
 80086d6:	b920      	cbnz	r0, 80086e2 <_svfiprintf_r+0x2e>
 80086d8:	230c      	movs	r3, #12
 80086da:	603b      	str	r3, [r7, #0]
 80086dc:	f04f 30ff 	mov.w	r0, #4294967295
 80086e0:	e0d1      	b.n	8008886 <_svfiprintf_r+0x1d2>
 80086e2:	2340      	movs	r3, #64	; 0x40
 80086e4:	616b      	str	r3, [r5, #20]
 80086e6:	2300      	movs	r3, #0
 80086e8:	9309      	str	r3, [sp, #36]	; 0x24
 80086ea:	2320      	movs	r3, #32
 80086ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80086f4:	2330      	movs	r3, #48	; 0x30
 80086f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80088a0 <_svfiprintf_r+0x1ec>
 80086fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086fe:	f04f 0901 	mov.w	r9, #1
 8008702:	4623      	mov	r3, r4
 8008704:	469a      	mov	sl, r3
 8008706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800870a:	b10a      	cbz	r2, 8008710 <_svfiprintf_r+0x5c>
 800870c:	2a25      	cmp	r2, #37	; 0x25
 800870e:	d1f9      	bne.n	8008704 <_svfiprintf_r+0x50>
 8008710:	ebba 0b04 	subs.w	fp, sl, r4
 8008714:	d00b      	beq.n	800872e <_svfiprintf_r+0x7a>
 8008716:	465b      	mov	r3, fp
 8008718:	4622      	mov	r2, r4
 800871a:	4629      	mov	r1, r5
 800871c:	4638      	mov	r0, r7
 800871e:	f7ff ff6d 	bl	80085fc <__ssputs_r>
 8008722:	3001      	adds	r0, #1
 8008724:	f000 80aa 	beq.w	800887c <_svfiprintf_r+0x1c8>
 8008728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800872a:	445a      	add	r2, fp
 800872c:	9209      	str	r2, [sp, #36]	; 0x24
 800872e:	f89a 3000 	ldrb.w	r3, [sl]
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 80a2 	beq.w	800887c <_svfiprintf_r+0x1c8>
 8008738:	2300      	movs	r3, #0
 800873a:	f04f 32ff 	mov.w	r2, #4294967295
 800873e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008742:	f10a 0a01 	add.w	sl, sl, #1
 8008746:	9304      	str	r3, [sp, #16]
 8008748:	9307      	str	r3, [sp, #28]
 800874a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800874e:	931a      	str	r3, [sp, #104]	; 0x68
 8008750:	4654      	mov	r4, sl
 8008752:	2205      	movs	r2, #5
 8008754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008758:	4851      	ldr	r0, [pc, #324]	; (80088a0 <_svfiprintf_r+0x1ec>)
 800875a:	f7f7 fdc9 	bl	80002f0 <memchr>
 800875e:	9a04      	ldr	r2, [sp, #16]
 8008760:	b9d8      	cbnz	r0, 800879a <_svfiprintf_r+0xe6>
 8008762:	06d0      	lsls	r0, r2, #27
 8008764:	bf44      	itt	mi
 8008766:	2320      	movmi	r3, #32
 8008768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800876c:	0711      	lsls	r1, r2, #28
 800876e:	bf44      	itt	mi
 8008770:	232b      	movmi	r3, #43	; 0x2b
 8008772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008776:	f89a 3000 	ldrb.w	r3, [sl]
 800877a:	2b2a      	cmp	r3, #42	; 0x2a
 800877c:	d015      	beq.n	80087aa <_svfiprintf_r+0xf6>
 800877e:	9a07      	ldr	r2, [sp, #28]
 8008780:	4654      	mov	r4, sl
 8008782:	2000      	movs	r0, #0
 8008784:	f04f 0c0a 	mov.w	ip, #10
 8008788:	4621      	mov	r1, r4
 800878a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800878e:	3b30      	subs	r3, #48	; 0x30
 8008790:	2b09      	cmp	r3, #9
 8008792:	d94e      	bls.n	8008832 <_svfiprintf_r+0x17e>
 8008794:	b1b0      	cbz	r0, 80087c4 <_svfiprintf_r+0x110>
 8008796:	9207      	str	r2, [sp, #28]
 8008798:	e014      	b.n	80087c4 <_svfiprintf_r+0x110>
 800879a:	eba0 0308 	sub.w	r3, r0, r8
 800879e:	fa09 f303 	lsl.w	r3, r9, r3
 80087a2:	4313      	orrs	r3, r2
 80087a4:	9304      	str	r3, [sp, #16]
 80087a6:	46a2      	mov	sl, r4
 80087a8:	e7d2      	b.n	8008750 <_svfiprintf_r+0x9c>
 80087aa:	9b03      	ldr	r3, [sp, #12]
 80087ac:	1d19      	adds	r1, r3, #4
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	9103      	str	r1, [sp, #12]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	bfbb      	ittet	lt
 80087b6:	425b      	neglt	r3, r3
 80087b8:	f042 0202 	orrlt.w	r2, r2, #2
 80087bc:	9307      	strge	r3, [sp, #28]
 80087be:	9307      	strlt	r3, [sp, #28]
 80087c0:	bfb8      	it	lt
 80087c2:	9204      	strlt	r2, [sp, #16]
 80087c4:	7823      	ldrb	r3, [r4, #0]
 80087c6:	2b2e      	cmp	r3, #46	; 0x2e
 80087c8:	d10c      	bne.n	80087e4 <_svfiprintf_r+0x130>
 80087ca:	7863      	ldrb	r3, [r4, #1]
 80087cc:	2b2a      	cmp	r3, #42	; 0x2a
 80087ce:	d135      	bne.n	800883c <_svfiprintf_r+0x188>
 80087d0:	9b03      	ldr	r3, [sp, #12]
 80087d2:	1d1a      	adds	r2, r3, #4
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	9203      	str	r2, [sp, #12]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	bfb8      	it	lt
 80087dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80087e0:	3402      	adds	r4, #2
 80087e2:	9305      	str	r3, [sp, #20]
 80087e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80088b0 <_svfiprintf_r+0x1fc>
 80087e8:	7821      	ldrb	r1, [r4, #0]
 80087ea:	2203      	movs	r2, #3
 80087ec:	4650      	mov	r0, sl
 80087ee:	f7f7 fd7f 	bl	80002f0 <memchr>
 80087f2:	b140      	cbz	r0, 8008806 <_svfiprintf_r+0x152>
 80087f4:	2340      	movs	r3, #64	; 0x40
 80087f6:	eba0 000a 	sub.w	r0, r0, sl
 80087fa:	fa03 f000 	lsl.w	r0, r3, r0
 80087fe:	9b04      	ldr	r3, [sp, #16]
 8008800:	4303      	orrs	r3, r0
 8008802:	3401      	adds	r4, #1
 8008804:	9304      	str	r3, [sp, #16]
 8008806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800880a:	4826      	ldr	r0, [pc, #152]	; (80088a4 <_svfiprintf_r+0x1f0>)
 800880c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008810:	2206      	movs	r2, #6
 8008812:	f7f7 fd6d 	bl	80002f0 <memchr>
 8008816:	2800      	cmp	r0, #0
 8008818:	d038      	beq.n	800888c <_svfiprintf_r+0x1d8>
 800881a:	4b23      	ldr	r3, [pc, #140]	; (80088a8 <_svfiprintf_r+0x1f4>)
 800881c:	bb1b      	cbnz	r3, 8008866 <_svfiprintf_r+0x1b2>
 800881e:	9b03      	ldr	r3, [sp, #12]
 8008820:	3307      	adds	r3, #7
 8008822:	f023 0307 	bic.w	r3, r3, #7
 8008826:	3308      	adds	r3, #8
 8008828:	9303      	str	r3, [sp, #12]
 800882a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800882c:	4433      	add	r3, r6
 800882e:	9309      	str	r3, [sp, #36]	; 0x24
 8008830:	e767      	b.n	8008702 <_svfiprintf_r+0x4e>
 8008832:	fb0c 3202 	mla	r2, ip, r2, r3
 8008836:	460c      	mov	r4, r1
 8008838:	2001      	movs	r0, #1
 800883a:	e7a5      	b.n	8008788 <_svfiprintf_r+0xd4>
 800883c:	2300      	movs	r3, #0
 800883e:	3401      	adds	r4, #1
 8008840:	9305      	str	r3, [sp, #20]
 8008842:	4619      	mov	r1, r3
 8008844:	f04f 0c0a 	mov.w	ip, #10
 8008848:	4620      	mov	r0, r4
 800884a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800884e:	3a30      	subs	r2, #48	; 0x30
 8008850:	2a09      	cmp	r2, #9
 8008852:	d903      	bls.n	800885c <_svfiprintf_r+0x1a8>
 8008854:	2b00      	cmp	r3, #0
 8008856:	d0c5      	beq.n	80087e4 <_svfiprintf_r+0x130>
 8008858:	9105      	str	r1, [sp, #20]
 800885a:	e7c3      	b.n	80087e4 <_svfiprintf_r+0x130>
 800885c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008860:	4604      	mov	r4, r0
 8008862:	2301      	movs	r3, #1
 8008864:	e7f0      	b.n	8008848 <_svfiprintf_r+0x194>
 8008866:	ab03      	add	r3, sp, #12
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	462a      	mov	r2, r5
 800886c:	4b0f      	ldr	r3, [pc, #60]	; (80088ac <_svfiprintf_r+0x1f8>)
 800886e:	a904      	add	r1, sp, #16
 8008870:	4638      	mov	r0, r7
 8008872:	f3af 8000 	nop.w
 8008876:	1c42      	adds	r2, r0, #1
 8008878:	4606      	mov	r6, r0
 800887a:	d1d6      	bne.n	800882a <_svfiprintf_r+0x176>
 800887c:	89ab      	ldrh	r3, [r5, #12]
 800887e:	065b      	lsls	r3, r3, #25
 8008880:	f53f af2c 	bmi.w	80086dc <_svfiprintf_r+0x28>
 8008884:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008886:	b01d      	add	sp, #116	; 0x74
 8008888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800888c:	ab03      	add	r3, sp, #12
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	462a      	mov	r2, r5
 8008892:	4b06      	ldr	r3, [pc, #24]	; (80088ac <_svfiprintf_r+0x1f8>)
 8008894:	a904      	add	r1, sp, #16
 8008896:	4638      	mov	r0, r7
 8008898:	f000 f87a 	bl	8008990 <_printf_i>
 800889c:	e7eb      	b.n	8008876 <_svfiprintf_r+0x1c2>
 800889e:	bf00      	nop
 80088a0:	08009354 	.word	0x08009354
 80088a4:	0800935e 	.word	0x0800935e
 80088a8:	00000000 	.word	0x00000000
 80088ac:	080085fd 	.word	0x080085fd
 80088b0:	0800935a 	.word	0x0800935a

080088b4 <_printf_common>:
 80088b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088b8:	4616      	mov	r6, r2
 80088ba:	4699      	mov	r9, r3
 80088bc:	688a      	ldr	r2, [r1, #8]
 80088be:	690b      	ldr	r3, [r1, #16]
 80088c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088c4:	4293      	cmp	r3, r2
 80088c6:	bfb8      	it	lt
 80088c8:	4613      	movlt	r3, r2
 80088ca:	6033      	str	r3, [r6, #0]
 80088cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088d0:	4607      	mov	r7, r0
 80088d2:	460c      	mov	r4, r1
 80088d4:	b10a      	cbz	r2, 80088da <_printf_common+0x26>
 80088d6:	3301      	adds	r3, #1
 80088d8:	6033      	str	r3, [r6, #0]
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	0699      	lsls	r1, r3, #26
 80088de:	bf42      	ittt	mi
 80088e0:	6833      	ldrmi	r3, [r6, #0]
 80088e2:	3302      	addmi	r3, #2
 80088e4:	6033      	strmi	r3, [r6, #0]
 80088e6:	6825      	ldr	r5, [r4, #0]
 80088e8:	f015 0506 	ands.w	r5, r5, #6
 80088ec:	d106      	bne.n	80088fc <_printf_common+0x48>
 80088ee:	f104 0a19 	add.w	sl, r4, #25
 80088f2:	68e3      	ldr	r3, [r4, #12]
 80088f4:	6832      	ldr	r2, [r6, #0]
 80088f6:	1a9b      	subs	r3, r3, r2
 80088f8:	42ab      	cmp	r3, r5
 80088fa:	dc26      	bgt.n	800894a <_printf_common+0x96>
 80088fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008900:	1e13      	subs	r3, r2, #0
 8008902:	6822      	ldr	r2, [r4, #0]
 8008904:	bf18      	it	ne
 8008906:	2301      	movne	r3, #1
 8008908:	0692      	lsls	r2, r2, #26
 800890a:	d42b      	bmi.n	8008964 <_printf_common+0xb0>
 800890c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008910:	4649      	mov	r1, r9
 8008912:	4638      	mov	r0, r7
 8008914:	47c0      	blx	r8
 8008916:	3001      	adds	r0, #1
 8008918:	d01e      	beq.n	8008958 <_printf_common+0xa4>
 800891a:	6823      	ldr	r3, [r4, #0]
 800891c:	68e5      	ldr	r5, [r4, #12]
 800891e:	6832      	ldr	r2, [r6, #0]
 8008920:	f003 0306 	and.w	r3, r3, #6
 8008924:	2b04      	cmp	r3, #4
 8008926:	bf08      	it	eq
 8008928:	1aad      	subeq	r5, r5, r2
 800892a:	68a3      	ldr	r3, [r4, #8]
 800892c:	6922      	ldr	r2, [r4, #16]
 800892e:	bf0c      	ite	eq
 8008930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008934:	2500      	movne	r5, #0
 8008936:	4293      	cmp	r3, r2
 8008938:	bfc4      	itt	gt
 800893a:	1a9b      	subgt	r3, r3, r2
 800893c:	18ed      	addgt	r5, r5, r3
 800893e:	2600      	movs	r6, #0
 8008940:	341a      	adds	r4, #26
 8008942:	42b5      	cmp	r5, r6
 8008944:	d11a      	bne.n	800897c <_printf_common+0xc8>
 8008946:	2000      	movs	r0, #0
 8008948:	e008      	b.n	800895c <_printf_common+0xa8>
 800894a:	2301      	movs	r3, #1
 800894c:	4652      	mov	r2, sl
 800894e:	4649      	mov	r1, r9
 8008950:	4638      	mov	r0, r7
 8008952:	47c0      	blx	r8
 8008954:	3001      	adds	r0, #1
 8008956:	d103      	bne.n	8008960 <_printf_common+0xac>
 8008958:	f04f 30ff 	mov.w	r0, #4294967295
 800895c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008960:	3501      	adds	r5, #1
 8008962:	e7c6      	b.n	80088f2 <_printf_common+0x3e>
 8008964:	18e1      	adds	r1, r4, r3
 8008966:	1c5a      	adds	r2, r3, #1
 8008968:	2030      	movs	r0, #48	; 0x30
 800896a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800896e:	4422      	add	r2, r4
 8008970:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008974:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008978:	3302      	adds	r3, #2
 800897a:	e7c7      	b.n	800890c <_printf_common+0x58>
 800897c:	2301      	movs	r3, #1
 800897e:	4622      	mov	r2, r4
 8008980:	4649      	mov	r1, r9
 8008982:	4638      	mov	r0, r7
 8008984:	47c0      	blx	r8
 8008986:	3001      	adds	r0, #1
 8008988:	d0e6      	beq.n	8008958 <_printf_common+0xa4>
 800898a:	3601      	adds	r6, #1
 800898c:	e7d9      	b.n	8008942 <_printf_common+0x8e>
	...

08008990 <_printf_i>:
 8008990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008994:	7e0f      	ldrb	r7, [r1, #24]
 8008996:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008998:	2f78      	cmp	r7, #120	; 0x78
 800899a:	4691      	mov	r9, r2
 800899c:	4680      	mov	r8, r0
 800899e:	460c      	mov	r4, r1
 80089a0:	469a      	mov	sl, r3
 80089a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80089a6:	d807      	bhi.n	80089b8 <_printf_i+0x28>
 80089a8:	2f62      	cmp	r7, #98	; 0x62
 80089aa:	d80a      	bhi.n	80089c2 <_printf_i+0x32>
 80089ac:	2f00      	cmp	r7, #0
 80089ae:	f000 80d8 	beq.w	8008b62 <_printf_i+0x1d2>
 80089b2:	2f58      	cmp	r7, #88	; 0x58
 80089b4:	f000 80a3 	beq.w	8008afe <_printf_i+0x16e>
 80089b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089c0:	e03a      	b.n	8008a38 <_printf_i+0xa8>
 80089c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089c6:	2b15      	cmp	r3, #21
 80089c8:	d8f6      	bhi.n	80089b8 <_printf_i+0x28>
 80089ca:	a101      	add	r1, pc, #4	; (adr r1, 80089d0 <_printf_i+0x40>)
 80089cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089d0:	08008a29 	.word	0x08008a29
 80089d4:	08008a3d 	.word	0x08008a3d
 80089d8:	080089b9 	.word	0x080089b9
 80089dc:	080089b9 	.word	0x080089b9
 80089e0:	080089b9 	.word	0x080089b9
 80089e4:	080089b9 	.word	0x080089b9
 80089e8:	08008a3d 	.word	0x08008a3d
 80089ec:	080089b9 	.word	0x080089b9
 80089f0:	080089b9 	.word	0x080089b9
 80089f4:	080089b9 	.word	0x080089b9
 80089f8:	080089b9 	.word	0x080089b9
 80089fc:	08008b49 	.word	0x08008b49
 8008a00:	08008a6d 	.word	0x08008a6d
 8008a04:	08008b2b 	.word	0x08008b2b
 8008a08:	080089b9 	.word	0x080089b9
 8008a0c:	080089b9 	.word	0x080089b9
 8008a10:	08008b6b 	.word	0x08008b6b
 8008a14:	080089b9 	.word	0x080089b9
 8008a18:	08008a6d 	.word	0x08008a6d
 8008a1c:	080089b9 	.word	0x080089b9
 8008a20:	080089b9 	.word	0x080089b9
 8008a24:	08008b33 	.word	0x08008b33
 8008a28:	682b      	ldr	r3, [r5, #0]
 8008a2a:	1d1a      	adds	r2, r3, #4
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	602a      	str	r2, [r5, #0]
 8008a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e0a3      	b.n	8008b84 <_printf_i+0x1f4>
 8008a3c:	6820      	ldr	r0, [r4, #0]
 8008a3e:	6829      	ldr	r1, [r5, #0]
 8008a40:	0606      	lsls	r6, r0, #24
 8008a42:	f101 0304 	add.w	r3, r1, #4
 8008a46:	d50a      	bpl.n	8008a5e <_printf_i+0xce>
 8008a48:	680e      	ldr	r6, [r1, #0]
 8008a4a:	602b      	str	r3, [r5, #0]
 8008a4c:	2e00      	cmp	r6, #0
 8008a4e:	da03      	bge.n	8008a58 <_printf_i+0xc8>
 8008a50:	232d      	movs	r3, #45	; 0x2d
 8008a52:	4276      	negs	r6, r6
 8008a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a58:	485e      	ldr	r0, [pc, #376]	; (8008bd4 <_printf_i+0x244>)
 8008a5a:	230a      	movs	r3, #10
 8008a5c:	e019      	b.n	8008a92 <_printf_i+0x102>
 8008a5e:	680e      	ldr	r6, [r1, #0]
 8008a60:	602b      	str	r3, [r5, #0]
 8008a62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a66:	bf18      	it	ne
 8008a68:	b236      	sxthne	r6, r6
 8008a6a:	e7ef      	b.n	8008a4c <_printf_i+0xbc>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	6820      	ldr	r0, [r4, #0]
 8008a70:	1d19      	adds	r1, r3, #4
 8008a72:	6029      	str	r1, [r5, #0]
 8008a74:	0601      	lsls	r1, r0, #24
 8008a76:	d501      	bpl.n	8008a7c <_printf_i+0xec>
 8008a78:	681e      	ldr	r6, [r3, #0]
 8008a7a:	e002      	b.n	8008a82 <_printf_i+0xf2>
 8008a7c:	0646      	lsls	r6, r0, #25
 8008a7e:	d5fb      	bpl.n	8008a78 <_printf_i+0xe8>
 8008a80:	881e      	ldrh	r6, [r3, #0]
 8008a82:	4854      	ldr	r0, [pc, #336]	; (8008bd4 <_printf_i+0x244>)
 8008a84:	2f6f      	cmp	r7, #111	; 0x6f
 8008a86:	bf0c      	ite	eq
 8008a88:	2308      	moveq	r3, #8
 8008a8a:	230a      	movne	r3, #10
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a92:	6865      	ldr	r5, [r4, #4]
 8008a94:	60a5      	str	r5, [r4, #8]
 8008a96:	2d00      	cmp	r5, #0
 8008a98:	bfa2      	ittt	ge
 8008a9a:	6821      	ldrge	r1, [r4, #0]
 8008a9c:	f021 0104 	bicge.w	r1, r1, #4
 8008aa0:	6021      	strge	r1, [r4, #0]
 8008aa2:	b90e      	cbnz	r6, 8008aa8 <_printf_i+0x118>
 8008aa4:	2d00      	cmp	r5, #0
 8008aa6:	d04d      	beq.n	8008b44 <_printf_i+0x1b4>
 8008aa8:	4615      	mov	r5, r2
 8008aaa:	fbb6 f1f3 	udiv	r1, r6, r3
 8008aae:	fb03 6711 	mls	r7, r3, r1, r6
 8008ab2:	5dc7      	ldrb	r7, [r0, r7]
 8008ab4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ab8:	4637      	mov	r7, r6
 8008aba:	42bb      	cmp	r3, r7
 8008abc:	460e      	mov	r6, r1
 8008abe:	d9f4      	bls.n	8008aaa <_printf_i+0x11a>
 8008ac0:	2b08      	cmp	r3, #8
 8008ac2:	d10b      	bne.n	8008adc <_printf_i+0x14c>
 8008ac4:	6823      	ldr	r3, [r4, #0]
 8008ac6:	07de      	lsls	r6, r3, #31
 8008ac8:	d508      	bpl.n	8008adc <_printf_i+0x14c>
 8008aca:	6923      	ldr	r3, [r4, #16]
 8008acc:	6861      	ldr	r1, [r4, #4]
 8008ace:	4299      	cmp	r1, r3
 8008ad0:	bfde      	ittt	le
 8008ad2:	2330      	movle	r3, #48	; 0x30
 8008ad4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ad8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008adc:	1b52      	subs	r2, r2, r5
 8008ade:	6122      	str	r2, [r4, #16]
 8008ae0:	f8cd a000 	str.w	sl, [sp]
 8008ae4:	464b      	mov	r3, r9
 8008ae6:	aa03      	add	r2, sp, #12
 8008ae8:	4621      	mov	r1, r4
 8008aea:	4640      	mov	r0, r8
 8008aec:	f7ff fee2 	bl	80088b4 <_printf_common>
 8008af0:	3001      	adds	r0, #1
 8008af2:	d14c      	bne.n	8008b8e <_printf_i+0x1fe>
 8008af4:	f04f 30ff 	mov.w	r0, #4294967295
 8008af8:	b004      	add	sp, #16
 8008afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008afe:	4835      	ldr	r0, [pc, #212]	; (8008bd4 <_printf_i+0x244>)
 8008b00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008b04:	6829      	ldr	r1, [r5, #0]
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b0c:	6029      	str	r1, [r5, #0]
 8008b0e:	061d      	lsls	r5, r3, #24
 8008b10:	d514      	bpl.n	8008b3c <_printf_i+0x1ac>
 8008b12:	07df      	lsls	r7, r3, #31
 8008b14:	bf44      	itt	mi
 8008b16:	f043 0320 	orrmi.w	r3, r3, #32
 8008b1a:	6023      	strmi	r3, [r4, #0]
 8008b1c:	b91e      	cbnz	r6, 8008b26 <_printf_i+0x196>
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	f023 0320 	bic.w	r3, r3, #32
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	2310      	movs	r3, #16
 8008b28:	e7b0      	b.n	8008a8c <_printf_i+0xfc>
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	f043 0320 	orr.w	r3, r3, #32
 8008b30:	6023      	str	r3, [r4, #0]
 8008b32:	2378      	movs	r3, #120	; 0x78
 8008b34:	4828      	ldr	r0, [pc, #160]	; (8008bd8 <_printf_i+0x248>)
 8008b36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b3a:	e7e3      	b.n	8008b04 <_printf_i+0x174>
 8008b3c:	0659      	lsls	r1, r3, #25
 8008b3e:	bf48      	it	mi
 8008b40:	b2b6      	uxthmi	r6, r6
 8008b42:	e7e6      	b.n	8008b12 <_printf_i+0x182>
 8008b44:	4615      	mov	r5, r2
 8008b46:	e7bb      	b.n	8008ac0 <_printf_i+0x130>
 8008b48:	682b      	ldr	r3, [r5, #0]
 8008b4a:	6826      	ldr	r6, [r4, #0]
 8008b4c:	6961      	ldr	r1, [r4, #20]
 8008b4e:	1d18      	adds	r0, r3, #4
 8008b50:	6028      	str	r0, [r5, #0]
 8008b52:	0635      	lsls	r5, r6, #24
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	d501      	bpl.n	8008b5c <_printf_i+0x1cc>
 8008b58:	6019      	str	r1, [r3, #0]
 8008b5a:	e002      	b.n	8008b62 <_printf_i+0x1d2>
 8008b5c:	0670      	lsls	r0, r6, #25
 8008b5e:	d5fb      	bpl.n	8008b58 <_printf_i+0x1c8>
 8008b60:	8019      	strh	r1, [r3, #0]
 8008b62:	2300      	movs	r3, #0
 8008b64:	6123      	str	r3, [r4, #16]
 8008b66:	4615      	mov	r5, r2
 8008b68:	e7ba      	b.n	8008ae0 <_printf_i+0x150>
 8008b6a:	682b      	ldr	r3, [r5, #0]
 8008b6c:	1d1a      	adds	r2, r3, #4
 8008b6e:	602a      	str	r2, [r5, #0]
 8008b70:	681d      	ldr	r5, [r3, #0]
 8008b72:	6862      	ldr	r2, [r4, #4]
 8008b74:	2100      	movs	r1, #0
 8008b76:	4628      	mov	r0, r5
 8008b78:	f7f7 fbba 	bl	80002f0 <memchr>
 8008b7c:	b108      	cbz	r0, 8008b82 <_printf_i+0x1f2>
 8008b7e:	1b40      	subs	r0, r0, r5
 8008b80:	6060      	str	r0, [r4, #4]
 8008b82:	6863      	ldr	r3, [r4, #4]
 8008b84:	6123      	str	r3, [r4, #16]
 8008b86:	2300      	movs	r3, #0
 8008b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b8c:	e7a8      	b.n	8008ae0 <_printf_i+0x150>
 8008b8e:	6923      	ldr	r3, [r4, #16]
 8008b90:	462a      	mov	r2, r5
 8008b92:	4649      	mov	r1, r9
 8008b94:	4640      	mov	r0, r8
 8008b96:	47d0      	blx	sl
 8008b98:	3001      	adds	r0, #1
 8008b9a:	d0ab      	beq.n	8008af4 <_printf_i+0x164>
 8008b9c:	6823      	ldr	r3, [r4, #0]
 8008b9e:	079b      	lsls	r3, r3, #30
 8008ba0:	d413      	bmi.n	8008bca <_printf_i+0x23a>
 8008ba2:	68e0      	ldr	r0, [r4, #12]
 8008ba4:	9b03      	ldr	r3, [sp, #12]
 8008ba6:	4298      	cmp	r0, r3
 8008ba8:	bfb8      	it	lt
 8008baa:	4618      	movlt	r0, r3
 8008bac:	e7a4      	b.n	8008af8 <_printf_i+0x168>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	4632      	mov	r2, r6
 8008bb2:	4649      	mov	r1, r9
 8008bb4:	4640      	mov	r0, r8
 8008bb6:	47d0      	blx	sl
 8008bb8:	3001      	adds	r0, #1
 8008bba:	d09b      	beq.n	8008af4 <_printf_i+0x164>
 8008bbc:	3501      	adds	r5, #1
 8008bbe:	68e3      	ldr	r3, [r4, #12]
 8008bc0:	9903      	ldr	r1, [sp, #12]
 8008bc2:	1a5b      	subs	r3, r3, r1
 8008bc4:	42ab      	cmp	r3, r5
 8008bc6:	dcf2      	bgt.n	8008bae <_printf_i+0x21e>
 8008bc8:	e7eb      	b.n	8008ba2 <_printf_i+0x212>
 8008bca:	2500      	movs	r5, #0
 8008bcc:	f104 0619 	add.w	r6, r4, #25
 8008bd0:	e7f5      	b.n	8008bbe <_printf_i+0x22e>
 8008bd2:	bf00      	nop
 8008bd4:	08009365 	.word	0x08009365
 8008bd8:	08009376 	.word	0x08009376

08008bdc <_sbrk_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	4d06      	ldr	r5, [pc, #24]	; (8008bf8 <_sbrk_r+0x1c>)
 8008be0:	2300      	movs	r3, #0
 8008be2:	4604      	mov	r4, r0
 8008be4:	4608      	mov	r0, r1
 8008be6:	602b      	str	r3, [r5, #0]
 8008be8:	f7f9 fb58 	bl	800229c <_sbrk>
 8008bec:	1c43      	adds	r3, r0, #1
 8008bee:	d102      	bne.n	8008bf6 <_sbrk_r+0x1a>
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	b103      	cbz	r3, 8008bf6 <_sbrk_r+0x1a>
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	bd38      	pop	{r3, r4, r5, pc}
 8008bf8:	24000390 	.word	0x24000390

08008bfc <memmove>:
 8008bfc:	4288      	cmp	r0, r1
 8008bfe:	b510      	push	{r4, lr}
 8008c00:	eb01 0402 	add.w	r4, r1, r2
 8008c04:	d902      	bls.n	8008c0c <memmove+0x10>
 8008c06:	4284      	cmp	r4, r0
 8008c08:	4623      	mov	r3, r4
 8008c0a:	d807      	bhi.n	8008c1c <memmove+0x20>
 8008c0c:	1e43      	subs	r3, r0, #1
 8008c0e:	42a1      	cmp	r1, r4
 8008c10:	d008      	beq.n	8008c24 <memmove+0x28>
 8008c12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c1a:	e7f8      	b.n	8008c0e <memmove+0x12>
 8008c1c:	4402      	add	r2, r0
 8008c1e:	4601      	mov	r1, r0
 8008c20:	428a      	cmp	r2, r1
 8008c22:	d100      	bne.n	8008c26 <memmove+0x2a>
 8008c24:	bd10      	pop	{r4, pc}
 8008c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c2e:	e7f7      	b.n	8008c20 <memmove+0x24>

08008c30 <__malloc_lock>:
 8008c30:	4801      	ldr	r0, [pc, #4]	; (8008c38 <__malloc_lock+0x8>)
 8008c32:	f7ff bc4d 	b.w	80084d0 <__retarget_lock_acquire_recursive>
 8008c36:	bf00      	nop
 8008c38:	24000384 	.word	0x24000384

08008c3c <__malloc_unlock>:
 8008c3c:	4801      	ldr	r0, [pc, #4]	; (8008c44 <__malloc_unlock+0x8>)
 8008c3e:	f7ff bc48 	b.w	80084d2 <__retarget_lock_release_recursive>
 8008c42:	bf00      	nop
 8008c44:	24000384 	.word	0x24000384

08008c48 <_free_r>:
 8008c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c4a:	2900      	cmp	r1, #0
 8008c4c:	d044      	beq.n	8008cd8 <_free_r+0x90>
 8008c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c52:	9001      	str	r0, [sp, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f1a1 0404 	sub.w	r4, r1, #4
 8008c5a:	bfb8      	it	lt
 8008c5c:	18e4      	addlt	r4, r4, r3
 8008c5e:	f7ff ffe7 	bl	8008c30 <__malloc_lock>
 8008c62:	4a1e      	ldr	r2, [pc, #120]	; (8008cdc <_free_r+0x94>)
 8008c64:	9801      	ldr	r0, [sp, #4]
 8008c66:	6813      	ldr	r3, [r2, #0]
 8008c68:	b933      	cbnz	r3, 8008c78 <_free_r+0x30>
 8008c6a:	6063      	str	r3, [r4, #4]
 8008c6c:	6014      	str	r4, [r2, #0]
 8008c6e:	b003      	add	sp, #12
 8008c70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c74:	f7ff bfe2 	b.w	8008c3c <__malloc_unlock>
 8008c78:	42a3      	cmp	r3, r4
 8008c7a:	d908      	bls.n	8008c8e <_free_r+0x46>
 8008c7c:	6825      	ldr	r5, [r4, #0]
 8008c7e:	1961      	adds	r1, r4, r5
 8008c80:	428b      	cmp	r3, r1
 8008c82:	bf01      	itttt	eq
 8008c84:	6819      	ldreq	r1, [r3, #0]
 8008c86:	685b      	ldreq	r3, [r3, #4]
 8008c88:	1949      	addeq	r1, r1, r5
 8008c8a:	6021      	streq	r1, [r4, #0]
 8008c8c:	e7ed      	b.n	8008c6a <_free_r+0x22>
 8008c8e:	461a      	mov	r2, r3
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	b10b      	cbz	r3, 8008c98 <_free_r+0x50>
 8008c94:	42a3      	cmp	r3, r4
 8008c96:	d9fa      	bls.n	8008c8e <_free_r+0x46>
 8008c98:	6811      	ldr	r1, [r2, #0]
 8008c9a:	1855      	adds	r5, r2, r1
 8008c9c:	42a5      	cmp	r5, r4
 8008c9e:	d10b      	bne.n	8008cb8 <_free_r+0x70>
 8008ca0:	6824      	ldr	r4, [r4, #0]
 8008ca2:	4421      	add	r1, r4
 8008ca4:	1854      	adds	r4, r2, r1
 8008ca6:	42a3      	cmp	r3, r4
 8008ca8:	6011      	str	r1, [r2, #0]
 8008caa:	d1e0      	bne.n	8008c6e <_free_r+0x26>
 8008cac:	681c      	ldr	r4, [r3, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	6053      	str	r3, [r2, #4]
 8008cb2:	4421      	add	r1, r4
 8008cb4:	6011      	str	r1, [r2, #0]
 8008cb6:	e7da      	b.n	8008c6e <_free_r+0x26>
 8008cb8:	d902      	bls.n	8008cc0 <_free_r+0x78>
 8008cba:	230c      	movs	r3, #12
 8008cbc:	6003      	str	r3, [r0, #0]
 8008cbe:	e7d6      	b.n	8008c6e <_free_r+0x26>
 8008cc0:	6825      	ldr	r5, [r4, #0]
 8008cc2:	1961      	adds	r1, r4, r5
 8008cc4:	428b      	cmp	r3, r1
 8008cc6:	bf04      	itt	eq
 8008cc8:	6819      	ldreq	r1, [r3, #0]
 8008cca:	685b      	ldreq	r3, [r3, #4]
 8008ccc:	6063      	str	r3, [r4, #4]
 8008cce:	bf04      	itt	eq
 8008cd0:	1949      	addeq	r1, r1, r5
 8008cd2:	6021      	streq	r1, [r4, #0]
 8008cd4:	6054      	str	r4, [r2, #4]
 8008cd6:	e7ca      	b.n	8008c6e <_free_r+0x26>
 8008cd8:	b003      	add	sp, #12
 8008cda:	bd30      	pop	{r4, r5, pc}
 8008cdc:	24000388 	.word	0x24000388

08008ce0 <_realloc_r>:
 8008ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce4:	4680      	mov	r8, r0
 8008ce6:	4614      	mov	r4, r2
 8008ce8:	460e      	mov	r6, r1
 8008cea:	b921      	cbnz	r1, 8008cf6 <_realloc_r+0x16>
 8008cec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	f7ff bc0f 	b.w	8008514 <_malloc_r>
 8008cf6:	b92a      	cbnz	r2, 8008d04 <_realloc_r+0x24>
 8008cf8:	f7ff ffa6 	bl	8008c48 <_free_r>
 8008cfc:	4625      	mov	r5, r4
 8008cfe:	4628      	mov	r0, r5
 8008d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d04:	f000 f81b 	bl	8008d3e <_malloc_usable_size_r>
 8008d08:	4284      	cmp	r4, r0
 8008d0a:	4607      	mov	r7, r0
 8008d0c:	d802      	bhi.n	8008d14 <_realloc_r+0x34>
 8008d0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d12:	d812      	bhi.n	8008d3a <_realloc_r+0x5a>
 8008d14:	4621      	mov	r1, r4
 8008d16:	4640      	mov	r0, r8
 8008d18:	f7ff fbfc 	bl	8008514 <_malloc_r>
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	d0ed      	beq.n	8008cfe <_realloc_r+0x1e>
 8008d22:	42bc      	cmp	r4, r7
 8008d24:	4622      	mov	r2, r4
 8008d26:	4631      	mov	r1, r6
 8008d28:	bf28      	it	cs
 8008d2a:	463a      	movcs	r2, r7
 8008d2c:	f7ff fb9a 	bl	8008464 <memcpy>
 8008d30:	4631      	mov	r1, r6
 8008d32:	4640      	mov	r0, r8
 8008d34:	f7ff ff88 	bl	8008c48 <_free_r>
 8008d38:	e7e1      	b.n	8008cfe <_realloc_r+0x1e>
 8008d3a:	4635      	mov	r5, r6
 8008d3c:	e7df      	b.n	8008cfe <_realloc_r+0x1e>

08008d3e <_malloc_usable_size_r>:
 8008d3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d42:	1f18      	subs	r0, r3, #4
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	bfbc      	itt	lt
 8008d48:	580b      	ldrlt	r3, [r1, r0]
 8008d4a:	18c0      	addlt	r0, r0, r3
 8008d4c:	4770      	bx	lr
	...

08008d50 <_init>:
 8008d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d52:	bf00      	nop
 8008d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d56:	bc08      	pop	{r3}
 8008d58:	469e      	mov	lr, r3
 8008d5a:	4770      	bx	lr

08008d5c <_fini>:
 8008d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5e:	bf00      	nop
 8008d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d62:	bc08      	pop	{r3}
 8008d64:	469e      	mov	lr, r3
 8008d66:	4770      	bx	lr
