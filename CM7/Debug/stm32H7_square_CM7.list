
stm32H7_square_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009480  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  08009720  08009720  00019720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d58  08009d58  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d58  08009d58  00019d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d60  08009d60  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d60  08009d60  00019d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d64  08009d64  00019d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  24000000  08009d68  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  24000080  08009de4  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240003c8  08009de4  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f34  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d8e  00000000  00000000  00039fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  0003cd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001410  00000000  00000000  0003e298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bff6  00000000  00000000  0003f6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196d7  00000000  00000000  0007b69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018a62d  00000000  00000000  00094d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021f3a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006258  00000000  00000000  0021f3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009708 	.word	0x08009708

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08009708 	.word	0x08009708

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f002 f9cf 	bl	8002bc0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 f9c6 	bl	8002bc0 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	240000ac 	.word	0x240000ac
 8000840:	240000b0 	.word	0x240000b0

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f002 f9af 	bl	8002bc0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f002 f9a6 	bl	8002bc0 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	240000ac 	.word	0x240000ac
 8000880:	240000b2 	.word	0x240000b2

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f004 fe54 	bl	8005554 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f005 f83e 	bl	8005938 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	240000b4 	.word	0x240000b4

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f004 fe29 	bl	8005554 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f005 f814 	bl	8005938 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	240000b4 	.word	0x240000b4

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f004 fdff 	bl	8005554 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	240000b4 	.word	0x240000b4

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f004 fddf 	bl	8005554 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f004 fdd8 	bl	8005554 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	240000b4 	.word	0x240000b4

080009b8 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80009c4:	f000 fa0a 	bl	8000ddc <NRF24_getPayloadSize>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d303      	bcc.n	80009da <NRF24_read_payload+0x22>
 80009d2:	f000 fa03 	bl	8000ddc <NRF24_getPayloadSize>
 80009d6:	4603      	mov	r3, r0
 80009d8:	e000      	b.n	80009dc <NRF24_read_payload+0x24>
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff10 	bl	8000804 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80009e4:	2361      	movs	r3, #97	; 0x61
 80009e6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80009e8:	f107 010e 	add.w	r1, r7, #14
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <NRF24_read_payload+0x5c>)
 80009f2:	f004 fdaf 	bl	8005554 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <NRF24_read_payload+0x5c>)
 8000a00:	f004 ff9a 	bl	8005938 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fefd 	bl	8000804 <NRF24_csn>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	240000b4 	.word	0x240000b4

08000a18 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a1c:	21ff      	movs	r1, #255	; 0xff
 8000a1e:	20e1      	movs	r0, #225	; 0xe1
 8000a20:	f7ff ff80 	bl	8000924 <NRF24_write_register>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a2c:	21ff      	movs	r1, #255	; 0xff
 8000a2e:	20e2      	movs	r0, #226	; 0xe2
 8000a30:	f7ff ff78 	bl	8000924 <NRF24_write_register>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff ff20 	bl	8000884 <NRF24_read_register>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000a54:	b082      	sub	sp, #8
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
 8000a64:	4613      	mov	r3, r2
 8000a66:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000a68:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <NRF24_begin+0x1b0>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2288      	movs	r2, #136	; 0x88
 8000a72:	4619      	mov	r1, r3
 8000a74:	f007 fdd2 	bl	800861c <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000a78:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <NRF24_begin+0x1b4>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a7e:	4a63      	ldr	r2, [pc, #396]	; (8000c0c <NRF24_begin+0x1b8>)
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a84:	4a62      	ldr	r2, [pc, #392]	; (8000c10 <NRF24_begin+0x1bc>)
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff feba 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fed7 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f001 fdce 	bl	8002638 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff40 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000aa4:	213f      	movs	r1, #63	; 0x3f
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff3c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000aac:	2103      	movs	r1, #3
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff ff38 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000abc:	2103      	movs	r1, #3
 8000abe:	2004      	movs	r0, #4
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000acc:	210f      	movs	r1, #15
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff ff24 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f7ff ff20 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2009      	movs	r0, #9
 8000ae8:	f7ff ff1c 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000aec:	23e7      	movs	r3, #231	; 0xe7
 8000aee:	733b      	strb	r3, [r7, #12]
 8000af0:	23e7      	movs	r3, #231	; 0xe7
 8000af2:	72fb      	strb	r3, [r7, #11]
 8000af4:	23e7      	movs	r3, #231	; 0xe7
 8000af6:	72bb      	strb	r3, [r7, #10]
 8000af8:	23e7      	movs	r3, #231	; 0xe7
 8000afa:	727b      	strb	r3, [r7, #9]
 8000afc:	23e7      	movs	r3, #231	; 0xe7
 8000afe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2205      	movs	r2, #5
 8000b06:	4619      	mov	r1, r3
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f7ff ff2d 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000b0e:	23c2      	movs	r3, #194	; 0xc2
 8000b10:	733b      	strb	r3, [r7, #12]
 8000b12:	23c2      	movs	r3, #194	; 0xc2
 8000b14:	72fb      	strb	r3, [r7, #11]
 8000b16:	23c2      	movs	r3, #194	; 0xc2
 8000b18:	72bb      	strb	r3, [r7, #10]
 8000b1a:	23c2      	movs	r3, #194	; 0xc2
 8000b1c:	727b      	strb	r3, [r7, #9]
 8000b1e:	23c2      	movs	r3, #194	; 0xc2
 8000b20:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2205      	movs	r2, #5
 8000b28:	4619      	mov	r1, r3
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f7ff ff1c 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b30:	21c3      	movs	r1, #195	; 0xc3
 8000b32:	200c      	movs	r0, #12
 8000b34:	f7ff fef6 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b38:	21c4      	movs	r1, #196	; 0xc4
 8000b3a:	200d      	movs	r0, #13
 8000b3c:	f7ff fef2 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b40:	21c5      	movs	r1, #197	; 0xc5
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff feee 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b48:	21c6      	movs	r1, #198	; 0xc6
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff feea 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000b50:	23e7      	movs	r3, #231	; 0xe7
 8000b52:	733b      	strb	r3, [r7, #12]
 8000b54:	23e7      	movs	r3, #231	; 0xe7
 8000b56:	72fb      	strb	r3, [r7, #11]
 8000b58:	23e7      	movs	r3, #231	; 0xe7
 8000b5a:	72bb      	strb	r3, [r7, #10]
 8000b5c:	23e7      	movs	r3, #231	; 0xe7
 8000b5e:	727b      	strb	r3, [r7, #9]
 8000b60:	23e7      	movs	r3, #231	; 0xe7
 8000b62:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2205      	movs	r2, #5
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2010      	movs	r0, #16
 8000b6e:	f7ff fefb 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2011      	movs	r0, #17
 8000b76:	f7ff fed5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f7ff fed1 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2013      	movs	r0, #19
 8000b86:	f7ff fecd 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2014      	movs	r0, #20
 8000b8e:	f7ff fec9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2015      	movs	r0, #21
 8000b96:	f7ff fec5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2016      	movs	r0, #22
 8000b9e:	f7ff fec1 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000ba2:	f000 fa7d 	bl	80010a0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	201c      	movs	r0, #28
 8000baa:	f7ff febb 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f7ff feb7 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000bb6:	f000 fa8d 	bl	80010d4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000bba:	210f      	movs	r1, #15
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	f000 f8c5 	bl	8000d4c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f000 f97d 	bl	8000ec2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f9b3 	bl	8000f34 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 f9f6 	bl	8000fc0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000bd4:	f000 f948 	bl	8000e68 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f000 f8e7 	bl	8000dac <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000bde:	f000 fa56 	bl	800108e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000be2:	204c      	movs	r0, #76	; 0x4c
 8000be4:	f000 f8cd 	bl	8000d82 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000be8:	f7ff ff16 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bec:	f7ff ff1c 	bl	8000a28 <NRF24_flush_rx>

	NRF24_powerDown();
 8000bf0:	f000 fa0e 	bl	8001010 <NRF24_powerDown>

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfe:	b002      	add	sp, #8
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	240000b4 	.word	0x240000b4
 8000c08:	240000ac 	.word	0x240000ac
 8000c0c:	240000b0 	.word	0x240000b0
 8000c10:	240000b2 	.word	0x240000b2

08000c14 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe33 	bl	8000884 <NRF24_read_register>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f043 0303 	orr.w	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fe7b 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <NRF24_startListening+0x48>)
 8000c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	d004      	beq.n	8000c42 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c38:	2205      	movs	r2, #5
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <NRF24_startListening+0x48>)
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f7ff fe93 	bl	8000968 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000c42:	f7ff fee9 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c46:	f7ff feef 	bl	8000a28 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdfa 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000c50:	2096      	movs	r0, #150	; 0x96
 8000c52:	f7ff fdb5 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	240000a0 	.word	0x240000a0

08000c60 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 f9e2 	bl	800102e <NRF24_availablePipe>
 8000c6a:	4603      	mov	r3, r0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe99 	bl	80009b8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c86:	2017      	movs	r0, #23
 8000c88:	f7ff fdfc 	bl	8000884 <NRF24_read_register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000c94:	f7ff fec8 	bl	8000a28 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000c98:	f000 f8ac 	bl	8000df4 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	e9c7 2300 	strd	r2, r3, [r7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cca:	491c      	ldr	r1, [pc, #112]	; (8000d3c <NRF24_openReadingPipe+0x8c>)
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d82d      	bhi.n	8000d32 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d808      	bhi.n	8000cee <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe3e 	bl	8000968 <NRF24_write_registerN>
 8000cec:	e007      	b.n	8000cfe <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe35 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <NRF24_openReadingPipe+0x94>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <NRF24_openReadingPipe+0x98>)
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe0a 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fdb7 	bl	8000884 <NRF24_read_register>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	}

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	240000a0 	.word	0x240000a0
 8000d40:	08009c88 	.word	0x08009c88
 8000d44:	08009c90 	.word	0x08009c90
 8000d48:	240000a8 	.word	0x240000a8

08000d4c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff fdd5 	bl	8000924 <NRF24_write_register>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d8c:	237f      	movs	r3, #127	; 0x7f
 8000d8e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	bf28      	it	cs
 8000d98:	4613      	movcs	r3, r2
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f7ff fdc0 	bl	8000924 <NRF24_write_register>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000db6:	2320      	movs	r3, #32
 8000db8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bf28      	it	cs
 8000dc2:	4613      	movcs	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <NRF24_setPayloadSize+0x2c>)
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	240000a8 	.word	0x240000a8

08000ddc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return payload_size;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <NRF24_getPayloadSize+0x14>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	240000a8 	.word	0x240000a8

08000df4 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000df8:	2060      	movs	r0, #96	; 0x60
 8000dfa:	f7ff fd43 	bl	8000884 <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <NRF24_enableDynamicPayloads>:
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
}
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e08:	201d      	movs	r0, #29
 8000e0a:	f7ff fd3b 	bl	8000884 <NRF24_read_register>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f7ff fd83 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f7ff fd30 	bl	8000884 <NRF24_read_register>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10c      	bne.n	8000e44 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e2a:	f000 f939 	bl	80010a0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e2e:	201d      	movs	r0, #29
 8000e30:	f7ff fd28 	bl	8000884 <NRF24_read_register>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	201d      	movs	r0, #29
 8000e40:	f7ff fd70 	bl	8000924 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000e44:	201c      	movs	r0, #28
 8000e46:	f7ff fd1d 	bl	8000884 <NRF24_read_register>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	201c      	movs	r0, #28
 8000e56:	f7ff fd65 	bl	8000924 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000e5a:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <NRF24_enableDynamicPayloads+0x60>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	240000a9 	.word	0x240000a9

08000e68 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000e6c:	201d      	movs	r0, #29
 8000e6e:	f7ff fd09 	bl	8000884 <NRF24_read_register>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f023 0304 	bic.w	r3, r3, #4
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	201d      	movs	r0, #29
 8000e7e:	f7ff fd51 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000e82:	2100      	movs	r1, #0
 8000e84:	201c      	movs	r0, #28
 8000e86:	f7ff fd4d 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000e8a:	4b02      	ldr	r3, [pc, #8]	; (8000e94 <NRF24_disableDynamicPayloads+0x2c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	240000a9 	.word	0x240000a9

08000e98 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d004      	beq.n	8000eb2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000ea8:	213f      	movs	r1, #63	; 0x3f
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff fd3a 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000eb0:	e003      	b.n	8000eba <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f7ff fd35 	bl	8000924 <NRF24_write_register>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000ecc:	2006      	movs	r0, #6
 8000ece:	f7ff fcd9 	bl	8000884 <NRF24_read_register>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	f023 0306 	bic.w	r3, r3, #6
 8000edc:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d104      	bne.n	8000eee <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	f043 0306 	orr.w	r3, r3, #6
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e019      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d104      	bne.n	8000efe <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e011      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d104      	bne.n	8000f0e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e009      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d006      	beq.n	8000f22 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d103      	bne.n	8000f22 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	f043 0306 	orr.w	r3, r3, #6
 8000f20:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4619      	mov	r1, r3
 8000f26:	2006      	movs	r0, #6
 8000f28:	f7ff fcfc 	bl	8000924 <NRF24_write_register>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f42:	2006      	movs	r0, #6
 8000f44:	f7ff fc9e 	bl	8000884 <NRF24_read_register>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000f58:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d107      	bne.n	8000f70 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	f043 0320 	orr.w	r3, r3, #32
 8000f6c:	73bb      	strb	r3, [r7, #14]
 8000f6e:	e00d      	b.n	8000f8c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d107      	bne.n	8000f86 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	73bb      	strb	r3, [r7, #14]
 8000f84:	e002      	b.n	8000f8c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	2006      	movs	r0, #6
 8000f92:	f7ff fcc7 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000f96:	2006      	movs	r0, #6
 8000f98:	f7ff fc74 	bl	8000884 <NRF24_read_register>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d102      	bne.n	8000fac <NRF24_setDataRate+0x78>
  {
    result = true;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e002      	b.n	8000fb2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	240000aa 	.word	0x240000aa

08000fc0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff fc5a 	bl	8000884 <NRF24_read_register>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f023 030c 	bic.w	r3, r3, #12
 8000fd6:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00f      	beq.n	8000ffe <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d104      	bne.n	8000fee <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e007      	b.n	8000ffe <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	4619      	mov	r1, r3
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff fc8e 	bl	8000924 <NRF24_write_register>
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff fc35 	bl	8000884 <NRF24_read_register>
 800101a:	4603      	mov	r3, r0
 800101c:	f023 0302 	bic.w	r3, r3, #2
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4619      	mov	r1, r3
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fc7d 	bl	8000924 <NRF24_write_register>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}

0800102e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001036:	f7ff fcff 	bl	8000a38 <NRF24_get_status>
 800103a:	4603      	mov	r3, r0
 800103c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001044:	2b00      	cmp	r3, #0
 8001046:	bf14      	ite	ne
 8001048:	2301      	movne	r3, #1
 800104a:	2300      	moveq	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

  if (result)
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d017      	beq.n	8001084 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	b2da      	uxtb	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	2007      	movs	r0, #7
 800106e:	f7ff fc59 	bl	8000924 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	f003 0320 	and.w	r3, r3, #32
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800107c:	2120      	movs	r1, #32
 800107e:	2007      	movs	r0, #7
 8001080:	f7ff fc50 	bl	8000924 <NRF24_write_register>
    }
  }
  return result;
 8001084:	7bbb      	ldrb	r3, [r7, #14]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001092:	2170      	movs	r1, #112	; 0x70
 8001094:	2007      	movs	r0, #7
 8001096:	f7ff fc45 	bl	8000924 <NRF24_write_register>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fbac 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80010ac:	2350      	movs	r3, #80	; 0x50
 80010ae:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80010b0:	2373      	movs	r3, #115	; 0x73
 80010b2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80010b4:	1d39      	adds	r1, r7, #4
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	2202      	movs	r2, #2
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <NRF24_ACTIVATE_cmd+0x30>)
 80010bc:	f004 fa4a 	bl	8005554 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f7ff fb9f 	bl	8000804 <NRF24_csn>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	240000b4 	.word	0x240000b4

080010d4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80010d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d6:	b0a1      	sub	sp, #132	; 0x84
 80010d8:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	49c3      	ldr	r1, [pc, #780]	; (80013ec <printRadioSettings+0x318>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f007 fb27 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f8f8 	bl	80002e0 <strlen>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	f107 0108 	add.w	r1, r7, #8
 80010f8:	230a      	movs	r3, #10
 80010fa:	48bd      	ldr	r0, [pc, #756]	; (80013f0 <printRadioSettings+0x31c>)
 80010fc:	f006 f9ae 	bl	800745c <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001100:	2000      	movs	r0, #0
 8001102:	f7ff fbbf 	bl	8000884 <NRF24_read_register>
 8001106:	4603      	mov	r3, r0
 8001108:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800110c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001118:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <printRadioSettings+0x5e>
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	49b2      	ldr	r1, [pc, #712]	; (80013f4 <printRadioSettings+0x320>)
 800112a:	4618      	mov	r0, r3
 800112c:	f007 fb02 	bl	8008734 <siprintf>
 8001130:	e00c      	b.n	800114c <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	49b0      	ldr	r1, [pc, #704]	; (80013f8 <printRadioSettings+0x324>)
 8001138:	4618      	mov	r0, r3
 800113a:	f007 fafb 	bl	8008734 <siprintf>
 800113e:	e005      	b.n	800114c <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	49ad      	ldr	r1, [pc, #692]	; (80013fc <printRadioSettings+0x328>)
 8001146:	4618      	mov	r0, r3
 8001148:	f007 faf4 	bl	8008734 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f8c5 	bl	80002e0 <strlen>
 8001156:	4603      	mov	r3, r0
 8001158:	b29a      	uxth	r2, r3
 800115a:	f107 0108 	add.w	r1, r7, #8
 800115e:	230a      	movs	r3, #10
 8001160:	48a3      	ldr	r0, [pc, #652]	; (80013f0 <printRadioSettings+0x31c>)
 8001162:	f006 f97b 	bl	800745c <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001166:	2001      	movs	r0, #1
 8001168:	f7ff fb8c 	bl	8000884 <NRF24_read_register>
 800116c:	4603      	mov	r3, r0
 800116e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001172:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001176:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800117a:	2b00      	cmp	r3, #0
 800117c:	bfcc      	ite	gt
 800117e:	2301      	movgt	r3, #1
 8001180:	2300      	movle	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001186:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800118a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800118e:	2b00      	cmp	r3, #0
 8001190:	bfcc      	ite	gt
 8001192:	2301      	movgt	r3, #1
 8001194:	2300      	movle	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800119a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800119e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bfcc      	ite	gt
 80011a6:	2301      	movgt	r3, #1
 80011a8:	2300      	movle	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011b2:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bfcc      	ite	gt
 80011ba:	2301      	movgt	r3, #1
 80011bc:	2300      	movle	r3, #0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011c6:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bfcc      	ite	gt
 80011ce:	2301      	movgt	r3, #1
 80011d0:	2300      	movle	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011da:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bfcc      	ite	gt
 80011e2:	2301      	movgt	r3, #1
 80011e4:	2300      	movle	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	f107 0008 	add.w	r0, r7, #8
 80011ec:	9303      	str	r3, [sp, #12]
 80011ee:	9402      	str	r4, [sp, #8]
 80011f0:	9101      	str	r1, [sp, #4]
 80011f2:	9200      	str	r2, [sp, #0]
 80011f4:	4633      	mov	r3, r6
 80011f6:	462a      	mov	r2, r5
 80011f8:	4981      	ldr	r1, [pc, #516]	; (8001400 <printRadioSettings+0x32c>)
 80011fa:	f007 fa9b 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f86c 	bl	80002e0 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	f107 0108 	add.w	r1, r7, #8
 8001210:	230a      	movs	r3, #10
 8001212:	4877      	ldr	r0, [pc, #476]	; (80013f0 <printRadioSettings+0x31c>)
 8001214:	f006 f922 	bl	800745c <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001218:	2002      	movs	r0, #2
 800121a:	f7ff fb33 	bl	8000884 <NRF24_read_register>
 800121e:	4603      	mov	r3, r0
 8001220:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001224:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001228:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800122c:	2b00      	cmp	r3, #0
 800122e:	bfcc      	ite	gt
 8001230:	2301      	movgt	r3, #1
 8001232:	2300      	movle	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001238:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001240:	2b00      	cmp	r3, #0
 8001242:	bfcc      	ite	gt
 8001244:	2301      	movgt	r3, #1
 8001246:	2300      	movle	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800124c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001250:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001254:	2b00      	cmp	r3, #0
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001260:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001264:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001268:	2b00      	cmp	r3, #0
 800126a:	bfcc      	ite	gt
 800126c:	2301      	movgt	r3, #1
 800126e:	2300      	movle	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001274:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001278:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800127c:	2b00      	cmp	r3, #0
 800127e:	bfcc      	ite	gt
 8001280:	2301      	movgt	r3, #1
 8001282:	2300      	movle	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001288:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800128c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001290:	2b00      	cmp	r3, #0
 8001292:	bfcc      	ite	gt
 8001294:	2301      	movgt	r3, #1
 8001296:	2300      	movle	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f107 0008 	add.w	r0, r7, #8
 800129e:	9303      	str	r3, [sp, #12]
 80012a0:	9402      	str	r4, [sp, #8]
 80012a2:	9101      	str	r1, [sp, #4]
 80012a4:	9200      	str	r2, [sp, #0]
 80012a6:	4633      	mov	r3, r6
 80012a8:	462a      	mov	r2, r5
 80012aa:	4956      	ldr	r1, [pc, #344]	; (8001404 <printRadioSettings+0x330>)
 80012ac:	f007 fa42 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f813 	bl	80002e0 <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f107 0108 	add.w	r1, r7, #8
 80012c2:	230a      	movs	r3, #10
 80012c4:	484a      	ldr	r0, [pc, #296]	; (80013f0 <printRadioSettings+0x31c>)
 80012c6:	f006 f8c9 	bl	800745c <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80012ca:	2003      	movs	r0, #3
 80012cc:	f7ff fada 	bl	8000884 <NRF24_read_register>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80012da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012de:	3302      	adds	r3, #2
 80012e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80012e4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4946      	ldr	r1, [pc, #280]	; (8001408 <printRadioSettings+0x334>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f007 fa20 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7fe fff1 	bl	80002e0 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f107 0108 	add.w	r1, r7, #8
 8001306:	230a      	movs	r3, #10
 8001308:	4839      	ldr	r0, [pc, #228]	; (80013f0 <printRadioSettings+0x31c>)
 800130a:	f006 f8a7 	bl	800745c <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800130e:	2005      	movs	r0, #5
 8001310:	f7ff fab8 	bl	8000884 <NRF24_read_register>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800131a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800131e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	4939      	ldr	r1, [pc, #228]	; (800140c <printRadioSettings+0x338>)
 8001328:	4618      	mov	r0, r3
 800132a:	f007 fa03 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ffd4 	bl	80002e0 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	f107 0108 	add.w	r1, r7, #8
 8001340:	230a      	movs	r3, #10
 8001342:	482b      	ldr	r0, [pc, #172]	; (80013f0 <printRadioSettings+0x31c>)
 8001344:	f006 f88a 	bl	800745c <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001348:	2006      	movs	r0, #6
 800134a:	f7ff fa9b 	bl	8000884 <NRF24_read_register>
 800134e:	4603      	mov	r3, r0
 8001350:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001354:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <printRadioSettings+0x29a>
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	492a      	ldr	r1, [pc, #168]	; (8001410 <printRadioSettings+0x33c>)
 8001366:	4618      	mov	r0, r3
 8001368:	f007 f9e4 	bl	8008734 <siprintf>
 800136c:	e005      	b.n	800137a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	4928      	ldr	r1, [pc, #160]	; (8001414 <printRadioSettings+0x340>)
 8001374:	4618      	mov	r0, r3
 8001376:	f007 f9dd 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	4618      	mov	r0, r3
 8001380:	f7fe ffae 	bl	80002e0 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	b29a      	uxth	r2, r3
 8001388:	f107 0108 	add.w	r1, r7, #8
 800138c:	230a      	movs	r3, #10
 800138e:	4818      	ldr	r0, [pc, #96]	; (80013f0 <printRadioSettings+0x31c>)
 8001390:	f006 f864 	bl	800745c <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001394:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001398:	f003 0306 	and.w	r3, r3, #6
 800139c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80013a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80013aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <printRadioSettings+0x2ec>
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	4918      	ldr	r1, [pc, #96]	; (8001418 <printRadioSettings+0x344>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f007 f9bb 	bl	8008734 <siprintf>
 80013be:	e03b      	b.n	8001438 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80013c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d106      	bne.n	80013d6 <printRadioSettings+0x302>
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	4913      	ldr	r1, [pc, #76]	; (800141c <printRadioSettings+0x348>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f007 f9b0 	bl	8008734 <siprintf>
 80013d4:	e030      	b.n	8001438 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80013d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d122      	bne.n	8001424 <printRadioSettings+0x350>
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	490f      	ldr	r1, [pc, #60]	; (8001420 <printRadioSettings+0x34c>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f007 f9a5 	bl	8008734 <siprintf>
 80013ea:	e025      	b.n	8001438 <printRadioSettings+0x364>
 80013ec:	08009720 	.word	0x08009720
 80013f0:	2400013c 	.word	0x2400013c
 80013f4:	08009754 	.word	0x08009754
 80013f8:	08009770 	.word	0x08009770
 80013fc:	0800978c 	.word	0x0800978c
 8001400:	080097a0 	.word	0x080097a0
 8001404:	080097e4 	.word	0x080097e4
 8001408:	08009830 	.word	0x08009830
 800140c:	0800984c 	.word	0x0800984c
 8001410:	08009860 	.word	0x08009860
 8001414:	08009878 	.word	0x08009878
 8001418:	08009890 	.word	0x08009890
 800141c:	080098a4 	.word	0x080098a4
 8001420:	080098b8 	.word	0x080098b8
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001424:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001428:	2b03      	cmp	r3, #3
 800142a:	d105      	bne.n	8001438 <printRadioSettings+0x364>
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	49d7      	ldr	r1, [pc, #860]	; (8001790 <printRadioSettings+0x6bc>)
 8001432:	4618      	mov	r0, r3
 8001434:	f007 f97e 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe ff4f 	bl	80002e0 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	f107 0108 	add.w	r1, r7, #8
 800144a:	230a      	movs	r3, #10
 800144c:	48d1      	ldr	r0, [pc, #836]	; (8001794 <printRadioSettings+0x6c0>)
 800144e:	f006 f805 	bl	800745c <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001452:	463b      	mov	r3, r7
 8001454:	2205      	movs	r2, #5
 8001456:	4619      	mov	r1, r3
 8001458:	200a      	movs	r0, #10
 800145a:	f7ff fa3b 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800145e:	793b      	ldrb	r3, [r7, #4]
 8001460:	461c      	mov	r4, r3
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	461d      	mov	r5, r3
 8001466:	78bb      	ldrb	r3, [r7, #2]
 8001468:	787a      	ldrb	r2, [r7, #1]
 800146a:	7839      	ldrb	r1, [r7, #0]
 800146c:	f107 0008 	add.w	r0, r7, #8
 8001470:	9102      	str	r1, [sp, #8]
 8001472:	9201      	str	r2, [sp, #4]
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	462b      	mov	r3, r5
 8001478:	4622      	mov	r2, r4
 800147a:	49c7      	ldr	r1, [pc, #796]	; (8001798 <printRadioSettings+0x6c4>)
 800147c:	f007 f95a 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ff2b 	bl	80002e0 <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	f107 0108 	add.w	r1, r7, #8
 8001492:	230a      	movs	r3, #10
 8001494:	48bf      	ldr	r0, [pc, #764]	; (8001794 <printRadioSettings+0x6c0>)
 8001496:	f005 ffe1 	bl	800745c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800149a:	463b      	mov	r3, r7
 800149c:	2205      	movs	r2, #5
 800149e:	4619      	mov	r1, r3
 80014a0:	200b      	movs	r0, #11
 80014a2:	f7ff fa17 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80014a6:	793b      	ldrb	r3, [r7, #4]
 80014a8:	461c      	mov	r4, r3
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	461d      	mov	r5, r3
 80014ae:	78bb      	ldrb	r3, [r7, #2]
 80014b0:	787a      	ldrb	r2, [r7, #1]
 80014b2:	7839      	ldrb	r1, [r7, #0]
 80014b4:	f107 0008 	add.w	r0, r7, #8
 80014b8:	9102      	str	r1, [sp, #8]
 80014ba:	9201      	str	r2, [sp, #4]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	462b      	mov	r3, r5
 80014c0:	4622      	mov	r2, r4
 80014c2:	49b6      	ldr	r1, [pc, #728]	; (800179c <printRadioSettings+0x6c8>)
 80014c4:	f007 f936 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014c8:	f107 0308 	add.w	r3, r7, #8
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe ff07 	bl	80002e0 <strlen>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	f107 0108 	add.w	r1, r7, #8
 80014da:	230a      	movs	r3, #10
 80014dc:	48ad      	ldr	r0, [pc, #692]	; (8001794 <printRadioSettings+0x6c0>)
 80014de:	f005 ffbd 	bl	800745c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80014e2:	463b      	mov	r3, r7
 80014e4:	2201      	movs	r2, #1
 80014e6:	4619      	mov	r1, r3
 80014e8:	200c      	movs	r0, #12
 80014ea:	f7ff f9f3 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014ee:	783b      	ldrb	r3, [r7, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	49aa      	ldr	r1, [pc, #680]	; (80017a0 <printRadioSettings+0x6cc>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f007 f91b 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe feec 	bl	80002e0 <strlen>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	f107 0108 	add.w	r1, r7, #8
 8001510:	230a      	movs	r3, #10
 8001512:	48a0      	ldr	r0, [pc, #640]	; (8001794 <printRadioSettings+0x6c0>)
 8001514:	f005 ffa2 	bl	800745c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001518:	463b      	mov	r3, r7
 800151a:	2201      	movs	r2, #1
 800151c:	4619      	mov	r1, r3
 800151e:	200d      	movs	r0, #13
 8001520:	f7ff f9d8 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001524:	783b      	ldrb	r3, [r7, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	499d      	ldr	r1, [pc, #628]	; (80017a4 <printRadioSettings+0x6d0>)
 800152e:	4618      	mov	r0, r3
 8001530:	f007 f900 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fed1 	bl	80002e0 <strlen>
 800153e:	4603      	mov	r3, r0
 8001540:	b29a      	uxth	r2, r3
 8001542:	f107 0108 	add.w	r1, r7, #8
 8001546:	230a      	movs	r3, #10
 8001548:	4892      	ldr	r0, [pc, #584]	; (8001794 <printRadioSettings+0x6c0>)
 800154a:	f005 ff87 	bl	800745c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800154e:	463b      	mov	r3, r7
 8001550:	2201      	movs	r2, #1
 8001552:	4619      	mov	r1, r3
 8001554:	200e      	movs	r0, #14
 8001556:	f7ff f9bd 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800155a:	783b      	ldrb	r3, [r7, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	4991      	ldr	r1, [pc, #580]	; (80017a8 <printRadioSettings+0x6d4>)
 8001564:	4618      	mov	r0, r3
 8001566:	f007 f8e5 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe feb6 	bl	80002e0 <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	b29a      	uxth	r2, r3
 8001578:	f107 0108 	add.w	r1, r7, #8
 800157c:	230a      	movs	r3, #10
 800157e:	4885      	ldr	r0, [pc, #532]	; (8001794 <printRadioSettings+0x6c0>)
 8001580:	f005 ff6c 	bl	800745c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001584:	463b      	mov	r3, r7
 8001586:	2201      	movs	r2, #1
 8001588:	4619      	mov	r1, r3
 800158a:	200f      	movs	r0, #15
 800158c:	f7ff f9a2 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001590:	783b      	ldrb	r3, [r7, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	4984      	ldr	r1, [pc, #528]	; (80017ac <printRadioSettings+0x6d8>)
 800159a:	4618      	mov	r0, r3
 800159c:	f007 f8ca 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe fe9b 	bl	80002e0 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	f107 0108 	add.w	r1, r7, #8
 80015b2:	230a      	movs	r3, #10
 80015b4:	4877      	ldr	r0, [pc, #476]	; (8001794 <printRadioSettings+0x6c0>)
 80015b6:	f005 ff51 	bl	800745c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80015ba:	463b      	mov	r3, r7
 80015bc:	2205      	movs	r2, #5
 80015be:	4619      	mov	r1, r3
 80015c0:	2010      	movs	r0, #16
 80015c2:	f7ff f987 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015c6:	793b      	ldrb	r3, [r7, #4]
 80015c8:	461c      	mov	r4, r3
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	461d      	mov	r5, r3
 80015ce:	78bb      	ldrb	r3, [r7, #2]
 80015d0:	787a      	ldrb	r2, [r7, #1]
 80015d2:	7839      	ldrb	r1, [r7, #0]
 80015d4:	f107 0008 	add.w	r0, r7, #8
 80015d8:	9102      	str	r1, [sp, #8]
 80015da:	9201      	str	r2, [sp, #4]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	462b      	mov	r3, r5
 80015e0:	4622      	mov	r2, r4
 80015e2:	4973      	ldr	r1, [pc, #460]	; (80017b0 <printRadioSettings+0x6dc>)
 80015e4:	f007 f8a6 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe fe77 	bl	80002e0 <strlen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	f107 0108 	add.w	r1, r7, #8
 80015fa:	230a      	movs	r3, #10
 80015fc:	4865      	ldr	r0, [pc, #404]	; (8001794 <printRadioSettings+0x6c0>)
 80015fe:	f005 ff2d 	bl	800745c <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001602:	2011      	movs	r0, #17
 8001604:	f7ff f93e 	bl	8000884 <NRF24_read_register>
 8001608:	4603      	mov	r3, r0
 800160a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800160e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001612:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	4966      	ldr	r1, [pc, #408]	; (80017b4 <printRadioSettings+0x6e0>)
 800161c:	4618      	mov	r0, r3
 800161e:	f007 f889 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fe5a 	bl	80002e0 <strlen>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	f107 0108 	add.w	r1, r7, #8
 8001634:	230a      	movs	r3, #10
 8001636:	4857      	ldr	r0, [pc, #348]	; (8001794 <printRadioSettings+0x6c0>)
 8001638:	f005 ff10 	bl	800745c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 800163c:	2012      	movs	r0, #18
 800163e:	f7ff f921 	bl	8000884 <NRF24_read_register>
 8001642:	4603      	mov	r3, r0
 8001644:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001648:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800164c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4958      	ldr	r1, [pc, #352]	; (80017b8 <printRadioSettings+0x6e4>)
 8001656:	4618      	mov	r0, r3
 8001658:	f007 f86c 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fe3d 	bl	80002e0 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	f107 0108 	add.w	r1, r7, #8
 800166e:	230a      	movs	r3, #10
 8001670:	4848      	ldr	r0, [pc, #288]	; (8001794 <printRadioSettings+0x6c0>)
 8001672:	f005 fef3 	bl	800745c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001676:	2013      	movs	r0, #19
 8001678:	f7ff f904 	bl	8000884 <NRF24_read_register>
 800167c:	4603      	mov	r3, r0
 800167e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001682:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	494b      	ldr	r1, [pc, #300]	; (80017bc <printRadioSettings+0x6e8>)
 8001690:	4618      	mov	r0, r3
 8001692:	f007 f84f 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fe20 	bl	80002e0 <strlen>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	f107 0108 	add.w	r1, r7, #8
 80016a8:	230a      	movs	r3, #10
 80016aa:	483a      	ldr	r0, [pc, #232]	; (8001794 <printRadioSettings+0x6c0>)
 80016ac:	f005 fed6 	bl	800745c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80016b0:	2014      	movs	r0, #20
 80016b2:	f7ff f8e7 	bl	8000884 <NRF24_read_register>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	493d      	ldr	r1, [pc, #244]	; (80017c0 <printRadioSettings+0x6ec>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f007 f832 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fe03 	bl	80002e0 <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f107 0108 	add.w	r1, r7, #8
 80016e2:	230a      	movs	r3, #10
 80016e4:	482b      	ldr	r0, [pc, #172]	; (8001794 <printRadioSettings+0x6c0>)
 80016e6:	f005 feb9 	bl	800745c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80016ea:	2015      	movs	r0, #21
 80016ec:	f7ff f8ca 	bl	8000884 <NRF24_read_register>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4930      	ldr	r1, [pc, #192]	; (80017c4 <printRadioSettings+0x6f0>)
 8001704:	4618      	mov	r0, r3
 8001706:	f007 f815 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fde6 	bl	80002e0 <strlen>
 8001714:	4603      	mov	r3, r0
 8001716:	b29a      	uxth	r2, r3
 8001718:	f107 0108 	add.w	r1, r7, #8
 800171c:	230a      	movs	r3, #10
 800171e:	481d      	ldr	r0, [pc, #116]	; (8001794 <printRadioSettings+0x6c0>)
 8001720:	f005 fe9c 	bl	800745c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001724:	2016      	movs	r0, #22
 8001726:	f7ff f8ad 	bl	8000884 <NRF24_read_register>
 800172a:	4603      	mov	r3, r0
 800172c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001730:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001734:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	4922      	ldr	r1, [pc, #136]	; (80017c8 <printRadioSettings+0x6f4>)
 800173e:	4618      	mov	r0, r3
 8001740:	f006 fff8 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fdc9 	bl	80002e0 <strlen>
 800174e:	4603      	mov	r3, r0
 8001750:	b29a      	uxth	r2, r3
 8001752:	f107 0108 	add.w	r1, r7, #8
 8001756:	230a      	movs	r3, #10
 8001758:	480e      	ldr	r0, [pc, #56]	; (8001794 <printRadioSettings+0x6c0>)
 800175a:	f005 fe7f 	bl	800745c <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800175e:	201c      	movs	r0, #28
 8001760:	f7ff f890 	bl	8000884 <NRF24_read_register>
 8001764:	4603      	mov	r3, r0
 8001766:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800176a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800176e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001772:	2b00      	cmp	r3, #0
 8001774:	bfcc      	ite	gt
 8001776:	2301      	movgt	r3, #1
 8001778:	2300      	movle	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800177e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001782:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001786:	2b00      	cmp	r3, #0
 8001788:	bfcc      	ite	gt
 800178a:	2301      	movgt	r3, #1
 800178c:	2300      	movle	r3, #0
 800178e:	e01d      	b.n	80017cc <printRadioSettings+0x6f8>
 8001790:	080098cc 	.word	0x080098cc
 8001794:	2400013c 	.word	0x2400013c
 8001798:	080098e0 	.word	0x080098e0
 800179c:	08009910 	.word	0x08009910
 80017a0:	08009940 	.word	0x08009940
 80017a4:	08009968 	.word	0x08009968
 80017a8:	08009990 	.word	0x08009990
 80017ac:	080099b8 	.word	0x080099b8
 80017b0:	080099e0 	.word	0x080099e0
 80017b4:	08009a0c 	.word	0x08009a0c
 80017b8:	08009a28 	.word	0x08009a28
 80017bc:	08009a44 	.word	0x08009a44
 80017c0:	08009a60 	.word	0x08009a60
 80017c4:	08009a7c 	.word	0x08009a7c
 80017c8:	08009a98 	.word	0x08009a98
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bfcc      	ite	gt
 80017dc:	2301      	movgt	r3, #1
 80017de:	2300      	movle	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bfcc      	ite	gt
 80017f0:	2301      	movgt	r3, #1
 80017f2:	2300      	movle	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017fc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001800:	2b00      	cmp	r3, #0
 8001802:	bfcc      	ite	gt
 8001804:	2301      	movgt	r3, #1
 8001806:	2300      	movle	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800180c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001810:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001814:	2b00      	cmp	r3, #0
 8001816:	bfcc      	ite	gt
 8001818:	2301      	movgt	r3, #1
 800181a:	2300      	movle	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f107 0008 	add.w	r0, r7, #8
 8001822:	9303      	str	r3, [sp, #12]
 8001824:	9402      	str	r4, [sp, #8]
 8001826:	9101      	str	r1, [sp, #4]
 8001828:	9200      	str	r2, [sp, #0]
 800182a:	4633      	mov	r3, r6
 800182c:	462a      	mov	r2, r5
 800182e:	4936      	ldr	r1, [pc, #216]	; (8001908 <printRadioSettings+0x834>)
 8001830:	f006 ff80 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fd51 	bl	80002e0 <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	b29a      	uxth	r2, r3
 8001842:	f107 0108 	add.w	r1, r7, #8
 8001846:	230a      	movs	r3, #10
 8001848:	4830      	ldr	r0, [pc, #192]	; (800190c <printRadioSettings+0x838>)
 800184a:	f005 fe07 	bl	800745c <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800184e:	201d      	movs	r0, #29
 8001850:	f7ff f818 	bl	8000884 <NRF24_read_register>
 8001854:	4603      	mov	r3, r0
 8001856:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800185a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <printRadioSettings+0x7a0>
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	4929      	ldr	r1, [pc, #164]	; (8001910 <printRadioSettings+0x83c>)
 800186c:	4618      	mov	r0, r3
 800186e:	f006 ff61 	bl	8008734 <siprintf>
 8001872:	e005      	b.n	8001880 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	4926      	ldr	r1, [pc, #152]	; (8001914 <printRadioSettings+0x840>)
 800187a:	4618      	mov	r0, r3
 800187c:	f006 ff5a 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fd2b 	bl	80002e0 <strlen>
 800188a:	4603      	mov	r3, r0
 800188c:	b29a      	uxth	r2, r3
 800188e:	f107 0108 	add.w	r1, r7, #8
 8001892:	230a      	movs	r3, #10
 8001894:	481d      	ldr	r0, [pc, #116]	; (800190c <printRadioSettings+0x838>)
 8001896:	f005 fde1 	bl	800745c <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800189a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <printRadioSettings+0x7e0>
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	491b      	ldr	r1, [pc, #108]	; (8001918 <printRadioSettings+0x844>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f006 ff41 	bl	8008734 <siprintf>
 80018b2:	e005      	b.n	80018c0 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	4918      	ldr	r1, [pc, #96]	; (800191c <printRadioSettings+0x848>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	f006 ff3a 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fd0b 	bl	80002e0 <strlen>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	f107 0108 	add.w	r1, r7, #8
 80018d2:	230a      	movs	r3, #10
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <printRadioSettings+0x838>)
 80018d6:	f005 fdc1 	bl	800745c <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	4910      	ldr	r1, [pc, #64]	; (8001920 <printRadioSettings+0x84c>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f006 ff27 	bl	8008734 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fcf8 	bl	80002e0 <strlen>
 80018f0:	4603      	mov	r3, r0
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	f107 0108 	add.w	r1, r7, #8
 80018f8:	230a      	movs	r3, #10
 80018fa:	4804      	ldr	r0, [pc, #16]	; (800190c <printRadioSettings+0x838>)
 80018fc:	f005 fdae 	bl	800745c <HAL_UART_Transmit>
}
 8001900:	bf00      	nop
 8001902:	3774      	adds	r7, #116	; 0x74
 8001904:	46bd      	mov	sp, r7
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001908:	08009ab4 	.word	0x08009ab4
 800190c:	2400013c 	.word	0x2400013c
 8001910:	08009b00 	.word	0x08009b00
 8001914:	08009b18 	.word	0x08009b18
 8001918:	08009b30 	.word	0x08009b30
 800191c:	08009b4c 	.word	0x08009b4c
 8001920:	08009720 	.word	0x08009720

08001924 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001924:	b084      	sub	sp, #16
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
 800192a:	f107 0c08 	add.w	ip, r7, #8
 800192e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <nrf24_DebugUART_Init+0x2c>)
 8001934:	4618      	mov	r0, r3
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	2290      	movs	r2, #144	; 0x90
 800193c:	4619      	mov	r1, r3
 800193e:	f006 fe6d 	bl	800861c <memcpy>
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800194a:	b004      	add	sp, #16
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	2400013c 	.word	0x2400013c

08001954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b0a5      	sub	sp, #148	; 0x94
 8001958:	af22      	add	r7, sp, #136	; 0x88
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800195a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800195e:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8001960:	bf00      	nop
 8001962:	4b4e      	ldr	r3, [pc, #312]	; (8001a9c <main+0x148>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d004      	beq.n	8001978 <main+0x24>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	1e5a      	subs	r2, r3, #1
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	dcf4      	bgt.n	8001962 <main+0xe>
		;
	if (timeout < 0) {
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	da01      	bge.n	8001982 <main+0x2e>
		Error_Handler();
 800197e:	f000 fb39 	bl	8001ff4 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001982:	f000 fdc7 	bl	8002514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001986:	f000 f89b 	bl	8001ac0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800198a:	4b44      	ldr	r3, [pc, #272]	; (8001a9c <main+0x148>)
 800198c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001990:	4a42      	ldr	r2, [pc, #264]	; (8001a9c <main+0x148>)
 8001992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800199a:	4b40      	ldr	r3, [pc, #256]	; (8001a9c <main+0x148>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80019a8:	2000      	movs	r0, #0
 80019aa:	f001 f923 	bl	8002bf4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 80019ae:	2100      	movs	r1, #0
 80019b0:	2000      	movs	r0, #0
 80019b2:	f001 f939 	bl	8002c28 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80019b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ba:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 80019bc:	bf00      	nop
 80019be:	4b37      	ldr	r3, [pc, #220]	; (8001a9c <main+0x148>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d104      	bne.n	80019d4 <main+0x80>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	1e5a      	subs	r2, r3, #1
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dcf4      	bgt.n	80019be <main+0x6a>
		;
	if (timeout < 0) {
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da01      	bge.n	80019de <main+0x8a>
		Error_Handler();
 80019da:	f000 fb0b 	bl	8001ff4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019de:	f000 fa7b 	bl	8001ed8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80019e2:	f000 fa2d 	bl	8001e40 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80019e6:	f000 f93d 	bl	8001c64 <MX_TIM2_Init>
  MX_SPI5_Init();
 80019ea:	f000 f8e5 	bl	8001bb8 <MX_SPI5_Init>
  MX_TIM3_Init();
 80019ee:	f000 f9af 	bl	8001d50 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80019f2:	2100      	movs	r1, #0
 80019f4:	482a      	ldr	r0, [pc, #168]	; (8001aa0 <main+0x14c>)
 80019f6:	f004 fd05 	bl	8006404 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80019fa:	210c      	movs	r1, #12
 80019fc:	4829      	ldr	r0, [pc, #164]	; (8001aa4 <main+0x150>)
 80019fe:	f004 fd01 	bl	8006404 <HAL_TIM_PWM_Start>
	//NO ACK
	NRF24_begin(GPIOC, Nrf_CSn_Pin, Nrf_CE_Pin, hspi5);
 8001a02:	4c29      	ldr	r4, [pc, #164]	; (8001aa8 <main+0x154>)
 8001a04:	4668      	mov	r0, sp
 8001a06:	1d23      	adds	r3, r4, #4
 8001a08:	2284      	movs	r2, #132	; 0x84
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f006 fe06 	bl	800861c <memcpy>
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	2240      	movs	r2, #64	; 0x40
 8001a14:	2180      	movs	r1, #128	; 0x80
 8001a16:	4825      	ldr	r0, [pc, #148]	; (8001aac <main+0x158>)
 8001a18:	f7ff f81c 	bl	8000a54 <NRF24_begin>
	nrf24_DebugUART_Init(huart3);
 8001a1c:	4c24      	ldr	r4, [pc, #144]	; (8001ab0 <main+0x15c>)
 8001a1e:	4668      	mov	r0, sp
 8001a20:	f104 0310 	add.w	r3, r4, #16
 8001a24:	2280      	movs	r2, #128	; 0x80
 8001a26:	4619      	mov	r1, r3
 8001a28:	f006 fdf8 	bl	800861c <memcpy>
 8001a2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a30:	f7ff ff78 	bl	8001924 <nrf24_DebugUART_Init>
	NRF24_setAutoAck(false);
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff fa2f 	bl	8000e98 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 8001a3a:	2034      	movs	r0, #52	; 0x34
 8001a3c:	f7ff f9a1 	bl	8000d82 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 8001a40:	2020      	movs	r0, #32
 8001a42:	f7ff f9b3 	bl	8000dac <NRF24_setPayloadSize>
	NRF24_setDataRate(RF24_2MBPS);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f7ff fa74 	bl	8000f34 <NRF24_setDataRate>
	NRF24_openReadingPipe(0, RxpipeAddrs);
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <main+0x160>)
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff f92c 	bl	8000cb0 <NRF24_openReadingPipe>
	NRF24_enableDynamicPayloads();
 8001a58:	f7ff f9d4 	bl	8000e04 <NRF24_enableDynamicPayloads>
	printRadioSettings();
 8001a5c:	f7ff fb3a 	bl	80010d4 <printRadioSettings>
	NRF24_startListening();
 8001a60:	f7ff f8d8 	bl	8000c14 <NRF24_startListening>
	printf("Empezando conexion\r\n");
 8001a64:	4814      	ldr	r0, [pc, #80]	; (8001ab8 <main+0x164>)
 8001a66:	f006 fe5d 	bl	8008724 <puts>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (NRF24_available()) {
 8001a6a:	f7ff f8f9 	bl	8000c60 <NRF24_available>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0fa      	beq.n	8001a6a <main+0x116>
			NRF24_read(myRxData, 32);
 8001a74:	2120      	movs	r1, #32
 8001a76:	4811      	ldr	r0, [pc, #68]	; (8001abc <main+0x168>)
 8001a78:	f7ff f8fa 	bl	8000c70 <NRF24_read>
			myRxData[32] = '\r';
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <main+0x168>)
 8001a7e:	220d      	movs	r2, #13
 8001a80:	f883 2020 	strb.w	r2, [r3, #32]
			myRxData[32 + 1] = '\n';
 8001a84:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <main+0x168>)
 8001a86:	220a      	movs	r2, #10
 8001a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			HAL_UART_Transmit(&huart3, (uint8_t*) myRxData, 32 + 2, 10);
 8001a8c:	230a      	movs	r3, #10
 8001a8e:	2222      	movs	r2, #34	; 0x22
 8001a90:	490a      	ldr	r1, [pc, #40]	; (8001abc <main+0x168>)
 8001a92:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <main+0x15c>)
 8001a94:	f005 fce2 	bl	800745c <HAL_UART_Transmit>
		if (NRF24_available()) {
 8001a98:	e7e7      	b.n	8001a6a <main+0x116>
 8001a9a:	bf00      	nop
 8001a9c:	58024400 	.word	0x58024400
 8001aa0:	24000254 	.word	0x24000254
 8001aa4:	240002a0 	.word	0x240002a0
 8001aa8:	240001cc 	.word	0x240001cc
 8001aac:	58020800 	.word	0x58020800
 8001ab0:	240002ec 	.word	0x240002ec
 8001ab4:	24000008 	.word	0x24000008
 8001ab8:	08009c64 	.word	0x08009c64
 8001abc:	2400037c 	.word	0x2400037c

08001ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b09c      	sub	sp, #112	; 0x70
 8001ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aca:	224c      	movs	r2, #76	; 0x4c
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f006 fdb2 	bl	8008638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f006 fdac 	bl	8008638 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001ae0:	2004      	movs	r0, #4
 8001ae2:	f001 f8b5 	bl	8002c50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	603b      	str	r3, [r7, #0]
 8001aea:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <SystemClock_Config+0xf0>)
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	4a30      	ldr	r2, [pc, #192]	; (8001bb0 <SystemClock_Config+0xf0>)
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001af6:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <SystemClock_Config+0xf0>)
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	4b2c      	ldr	r3, [pc, #176]	; (8001bb4 <SystemClock_Config+0xf4>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b08:	4a2a      	ldr	r2, [pc, #168]	; (8001bb4 <SystemClock_Config+0xf4>)
 8001b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <SystemClock_Config+0xf4>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b1c:	bf00      	nop
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <SystemClock_Config+0xf4>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b2a:	d1f8      	bne.n	8001b1e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b30:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001b34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b36:	2302      	movs	r3, #2
 8001b38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001b42:	2378      	movs	r3, #120	; 0x78
 8001b44:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b46:	2302      	movs	r3, #2
 8001b48:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001b52:	2308      	movs	r3, #8
 8001b54:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b62:	4618      	mov	r0, r3
 8001b64:	f001 f8ce 	bl	8002d04 <HAL_RCC_OscConfig>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001b6e:	f000 fa41 	bl	8001ff4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b72:	233f      	movs	r3, #63	; 0x3f
 8001b74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b76:	2303      	movs	r3, #3
 8001b78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001b7e:	2308      	movs	r3, #8
 8001b80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001b82:	2340      	movs	r3, #64	; 0x40
 8001b84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b86:	2340      	movs	r3, #64	; 0x40
 8001b88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b8e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b90:	2340      	movs	r3, #64	; 0x40
 8001b92:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	2102      	movs	r1, #2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f001 fce1 	bl	8003560 <HAL_RCC_ClockConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001ba4:	f000 fa26 	bl	8001ff4 <Error_Handler>
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3770      	adds	r7, #112	; 0x70
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	58000400 	.word	0x58000400
 8001bb4:	58024800 	.word	0x58024800

08001bb8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001bbc:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001bbe:	4a28      	ldr	r2, [pc, #160]	; (8001c60 <MX_SPI5_Init+0xa8>)
 8001bc0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001bc2:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001bc4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001bc8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001bca:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bd0:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001bd2:	2207      	movs	r2, #7
 8001bd4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bd6:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001be2:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001be4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001be8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001bec:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001bf0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c0a:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001c0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c10:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001c18:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <MX_SPI5_Init+0xa4>)
 8001c4a:	f003 fb7d 	bl	8005348 <HAL_SPI_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 8001c54:	f000 f9ce 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	240001cc 	.word	0x240001cc
 8001c60:	40015000 	.word	0x40015000

08001c64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08e      	sub	sp, #56	; 0x38
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c84:	463b      	mov	r3, r7
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
 8001c90:	611a      	str	r2, [r3, #16]
 8001c92:	615a      	str	r2, [r3, #20]
 8001c94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c96:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <MX_TIM2_Init+0xe8>)
 8001c98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 74;
 8001c9e:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <MX_TIM2_Init+0xe8>)
 8001ca0:	224a      	movs	r2, #74	; 0x4a
 8001ca2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca4:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <MX_TIM2_Init+0xe8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8001caa:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <MX_TIM2_Init+0xe8>)
 8001cac:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001cb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb2:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <MX_TIM2_Init+0xe8>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cb8:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <MX_TIM2_Init+0xe8>)
 8001cba:	2280      	movs	r2, #128	; 0x80
 8001cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cbe:	4823      	ldr	r0, [pc, #140]	; (8001d4c <MX_TIM2_Init+0xe8>)
 8001cc0:	f004 fae7 	bl	8006292 <HAL_TIM_Base_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001cca:	f000 f993 	bl	8001ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cd8:	4619      	mov	r1, r3
 8001cda:	481c      	ldr	r0, [pc, #112]	; (8001d4c <MX_TIM2_Init+0xe8>)
 8001cdc:	f004 fdb4 	bl	8006848 <HAL_TIM_ConfigClockSource>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001ce6:	f000 f985 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cea:	4818      	ldr	r0, [pc, #96]	; (8001d4c <MX_TIM2_Init+0xe8>)
 8001cec:	f004 fb28 	bl	8006340 <HAL_TIM_PWM_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001cf6:	f000 f97d 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	4810      	ldr	r0, [pc, #64]	; (8001d4c <MX_TIM2_Init+0xe8>)
 8001d0a:	f005 fac9 	bl	80072a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001d14:	f000 f96e 	bl	8001ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d18:	2360      	movs	r3, #96	; 0x60
 8001d1a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d28:	463b      	mov	r3, r7
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4807      	ldr	r0, [pc, #28]	; (8001d4c <MX_TIM2_Init+0xe8>)
 8001d30:	f004 fc76 	bl	8006620 <HAL_TIM_PWM_ConfigChannel>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001d3a:	f000 f95b 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d3e:	4803      	ldr	r0, [pc, #12]	; (8001d4c <MX_TIM2_Init+0xe8>)
 8001d40:	f000 fa28 	bl	8002194 <HAL_TIM_MspPostInit>

}
 8001d44:	bf00      	nop
 8001d46:	3738      	adds	r7, #56	; 0x38
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	24000254 	.word	0x24000254

08001d50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08e      	sub	sp, #56	; 0x38
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d70:	463b      	mov	r3, r7
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
 8001d7c:	611a      	str	r2, [r3, #16]
 8001d7e:	615a      	str	r2, [r3, #20]
 8001d80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d82:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <MX_TIM3_Init+0xe8>)
 8001d84:	4a2d      	ldr	r2, [pc, #180]	; (8001e3c <MX_TIM3_Init+0xec>)
 8001d86:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 74;
 8001d88:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <MX_TIM3_Init+0xe8>)
 8001d8a:	224a      	movs	r2, #74	; 0x4a
 8001d8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8e:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <MX_TIM3_Init+0xe8>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 8001d94:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <MX_TIM3_Init+0xe8>)
 8001d96:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001d9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9c:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <MX_TIM3_Init+0xe8>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001da2:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <MX_TIM3_Init+0xe8>)
 8001da4:	2280      	movs	r2, #128	; 0x80
 8001da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001da8:	4823      	ldr	r0, [pc, #140]	; (8001e38 <MX_TIM3_Init+0xe8>)
 8001daa:	f004 fa72 	bl	8006292 <HAL_TIM_Base_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001db4:	f000 f91e 	bl	8001ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	481c      	ldr	r0, [pc, #112]	; (8001e38 <MX_TIM3_Init+0xe8>)
 8001dc6:	f004 fd3f 	bl	8006848 <HAL_TIM_ConfigClockSource>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001dd0:	f000 f910 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dd4:	4818      	ldr	r0, [pc, #96]	; (8001e38 <MX_TIM3_Init+0xe8>)
 8001dd6:	f004 fab3 	bl	8006340 <HAL_TIM_PWM_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001de0:	f000 f908 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	4619      	mov	r1, r3
 8001df2:	4811      	ldr	r0, [pc, #68]	; (8001e38 <MX_TIM3_Init+0xe8>)
 8001df4:	f005 fa54 	bl	80072a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001dfe:	f000 f8f9 	bl	8001ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e02:	2360      	movs	r3, #96	; 0x60
 8001e04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e12:	463b      	mov	r3, r7
 8001e14:	220c      	movs	r2, #12
 8001e16:	4619      	mov	r1, r3
 8001e18:	4807      	ldr	r0, [pc, #28]	; (8001e38 <MX_TIM3_Init+0xe8>)
 8001e1a:	f004 fc01 	bl	8006620 <HAL_TIM_PWM_ConfigChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001e24:	f000 f8e6 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e28:	4803      	ldr	r0, [pc, #12]	; (8001e38 <MX_TIM3_Init+0xe8>)
 8001e2a:	f000 f9b3 	bl	8002194 <HAL_TIM_MspPostInit>

}
 8001e2e:	bf00      	nop
 8001e30:	3738      	adds	r7, #56	; 0x38
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	240002a0 	.word	0x240002a0
 8001e3c:	40000400 	.word	0x40000400

08001e40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e44:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e46:	4a23      	ldr	r2, [pc, #140]	; (8001ed4 <MX_USART3_UART_Init+0x94>)
 8001e48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001e4a:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e52:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e58:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e64:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e66:	220c      	movs	r2, #12
 8001e68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6a:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e70:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e88:	4811      	ldr	r0, [pc, #68]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e8a:	f005 fa97 	bl	80073bc <HAL_UART_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e94:	f000 f8ae 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e98:	2100      	movs	r1, #0
 8001e9a:	480d      	ldr	r0, [pc, #52]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e9c:	f006 faca 	bl	8008434 <HAL_UARTEx_SetTxFifoThreshold>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001ea6:	f000 f8a5 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4808      	ldr	r0, [pc, #32]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001eae:	f006 faff 	bl	80084b0 <HAL_UARTEx_SetRxFifoThreshold>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001eb8:	f000 f89c 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001ebc:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001ebe:	f006 fa80 	bl	80083c2 <HAL_UARTEx_DisableFifoMode>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ec8:	f000 f894 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	240002ec 	.word	0x240002ec
 8001ed4:	40004800 	.word	0x40004800

08001ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	; 0x30
 8001edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ede:	f107 031c 	add.w	r3, r7, #28
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eee:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <MX_GPIO_Init+0x114>)
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef4:	4a3d      	ldr	r2, [pc, #244]	; (8001fec <MX_GPIO_Init+0x114>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001efe:	4b3b      	ldr	r3, [pc, #236]	; (8001fec <MX_GPIO_Init+0x114>)
 8001f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f0c:	4b37      	ldr	r3, [pc, #220]	; (8001fec <MX_GPIO_Init+0x114>)
 8001f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f12:	4a36      	ldr	r2, [pc, #216]	; (8001fec <MX_GPIO_Init+0x114>)
 8001f14:	f043 0320 	orr.w	r3, r3, #32
 8001f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f1c:	4b33      	ldr	r3, [pc, #204]	; (8001fec <MX_GPIO_Init+0x114>)
 8001f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f2a:	4b30      	ldr	r3, [pc, #192]	; (8001fec <MX_GPIO_Init+0x114>)
 8001f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f30:	4a2e      	ldr	r2, [pc, #184]	; (8001fec <MX_GPIO_Init+0x114>)
 8001f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f3a:	4b2c      	ldr	r3, [pc, #176]	; (8001fec <MX_GPIO_Init+0x114>)
 8001f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f48:	4b28      	ldr	r3, [pc, #160]	; (8001fec <MX_GPIO_Init+0x114>)
 8001f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f4e:	4a27      	ldr	r2, [pc, #156]	; (8001fec <MX_GPIO_Init+0x114>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f58:	4b24      	ldr	r3, [pc, #144]	; (8001fec <MX_GPIO_Init+0x114>)
 8001f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	4b21      	ldr	r3, [pc, #132]	; (8001fec <MX_GPIO_Init+0x114>)
 8001f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6c:	4a1f      	ldr	r2, [pc, #124]	; (8001fec <MX_GPIO_Init+0x114>)
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f76:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <MX_GPIO_Init+0x114>)
 8001f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <MX_GPIO_Init+0x114>)
 8001f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8a:	4a18      	ldr	r2, [pc, #96]	; (8001fec <MX_GPIO_Init+0x114>)
 8001f8c:	f043 0308 	orr.w	r3, r3, #8
 8001f90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f94:	4b15      	ldr	r3, [pc, #84]	; (8001fec <MX_GPIO_Init+0x114>)
 8001f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Nrf_CE_Pin|Nrf_CSn_Pin, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	21c0      	movs	r1, #192	; 0xc0
 8001fa6:	4812      	ldr	r0, [pc, #72]	; (8001ff0 <MX_GPIO_Init+0x118>)
 8001fa8:	f000 fe0a 	bl	8002bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fba:	f107 031c 	add.w	r3, r7, #28
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	480b      	ldr	r0, [pc, #44]	; (8001ff0 <MX_GPIO_Init+0x118>)
 8001fc2:	f000 fc4d 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pins : Nrf_CE_Pin Nrf_CSn_Pin */
  GPIO_InitStruct.Pin = Nrf_CE_Pin|Nrf_CSn_Pin;
 8001fc6:	23c0      	movs	r3, #192	; 0xc0
 8001fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd6:	f107 031c 	add.w	r3, r7, #28
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4804      	ldr	r0, [pc, #16]	; (8001ff0 <MX_GPIO_Init+0x118>)
 8001fde:	f000 fc3f 	bl	8002860 <HAL_GPIO_Init>

}
 8001fe2:	bf00      	nop
 8001fe4:	3730      	adds	r7, #48	; 0x30
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	58024400 	.word	0x58024400
 8001ff0:	58020800 	.word	0x58020800

08001ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff8:	b672      	cpsid	i
}
 8001ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ffc:	e7fe      	b.n	8001ffc <Error_Handler+0x8>
	...

08002000 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002008:	1d39      	adds	r1, r7, #4
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
 800200e:	2201      	movs	r2, #1
 8002010:	4803      	ldr	r0, [pc, #12]	; (8002020 <__io_putchar+0x20>)
 8002012:	f005 fa23 	bl	800745c <HAL_UART_Transmit>
  return ch;
 8002016:	687b      	ldr	r3, [r7, #4]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	240002ec 	.word	0x240002ec

08002024 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_MspInit+0x30>)
 800202c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002030:	4a08      	ldr	r2, [pc, #32]	; (8002054 <HAL_MspInit+0x30>)
 8002032:	f043 0302 	orr.w	r3, r3, #2
 8002036:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_MspInit+0x30>)
 800203c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	58024400 	.word	0x58024400

08002058 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b0b8      	sub	sp, #224	; 0xe0
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002070:	f107 0310 	add.w	r3, r7, #16
 8002074:	22bc      	movs	r2, #188	; 0xbc
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f006 fadd 	bl	8008638 <memset>
  if(hspi->Instance==SPI5)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a25      	ldr	r2, [pc, #148]	; (8002118 <HAL_SPI_MspInit+0xc0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d142      	bne.n	800210e <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8002088:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800208c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800208e:	2300      	movs	r3, #0
 8002090:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002092:	f107 0310 	add.w	r3, r7, #16
 8002096:	4618      	mov	r0, r3
 8002098:	f001 fdee 	bl	8003c78 <HAL_RCCEx_PeriphCLKConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80020a2:	f7ff ffa7 	bl	8001ff4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <HAL_SPI_MspInit+0xc4>)
 80020a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020ac:	4a1b      	ldr	r2, [pc, #108]	; (800211c <HAL_SPI_MspInit+0xc4>)
 80020ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_SPI_MspInit+0xc4>)
 80020b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_SPI_MspInit+0xc4>)
 80020c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ca:	4a14      	ldr	r2, [pc, #80]	; (800211c <HAL_SPI_MspInit+0xc4>)
 80020cc:	f043 0320 	orr.w	r3, r3, #32
 80020d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_SPI_MspInit+0xc4>)
 80020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80020e2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80020e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80020fc:	2305      	movs	r3, #5
 80020fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002102:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002106:	4619      	mov	r1, r3
 8002108:	4805      	ldr	r0, [pc, #20]	; (8002120 <HAL_SPI_MspInit+0xc8>)
 800210a:	f000 fba9 	bl	8002860 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800210e:	bf00      	nop
 8002110:	37e0      	adds	r7, #224	; 0xe0
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40015000 	.word	0x40015000
 800211c:	58024400 	.word	0x58024400
 8002120:	58021400 	.word	0x58021400

08002124 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002134:	d10f      	bne.n	8002156 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_TIM_Base_MspInit+0x68>)
 8002138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800213c:	4a13      	ldr	r2, [pc, #76]	; (800218c <HAL_TIM_Base_MspInit+0x68>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_TIM_Base_MspInit+0x68>)
 8002148:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002154:	e013      	b.n	800217e <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a0d      	ldr	r2, [pc, #52]	; (8002190 <HAL_TIM_Base_MspInit+0x6c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d10e      	bne.n	800217e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002160:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_TIM_Base_MspInit+0x68>)
 8002162:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002166:	4a09      	ldr	r2, [pc, #36]	; (800218c <HAL_TIM_Base_MspInit+0x68>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_TIM_Base_MspInit+0x68>)
 8002172:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
}
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	58024400 	.word	0x58024400
 8002190:	40000400 	.word	0x40000400

08002194 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b4:	d11f      	bne.n	80021f6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b6:	4b24      	ldr	r3, [pc, #144]	; (8002248 <HAL_TIM_MspPostInit+0xb4>)
 80021b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021bc:	4a22      	ldr	r2, [pc, #136]	; (8002248 <HAL_TIM_MspPostInit+0xb4>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <HAL_TIM_MspPostInit+0xb4>)
 80021c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021d4:	2301      	movs	r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021e4:	2301      	movs	r3, #1
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	4619      	mov	r1, r3
 80021ee:	4817      	ldr	r0, [pc, #92]	; (800224c <HAL_TIM_MspPostInit+0xb8>)
 80021f0:	f000 fb36 	bl	8002860 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021f4:	e023      	b.n	800223e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a15      	ldr	r2, [pc, #84]	; (8002250 <HAL_TIM_MspPostInit+0xbc>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d11e      	bne.n	800223e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_TIM_MspPostInit+0xb4>)
 8002202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002206:	4a10      	ldr	r2, [pc, #64]	; (8002248 <HAL_TIM_MspPostInit+0xb4>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002210:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <HAL_TIM_MspPostInit+0xb4>)
 8002212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800221e:	2302      	movs	r3, #2
 8002220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800222e:	2302      	movs	r3, #2
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	4619      	mov	r1, r3
 8002238:	4806      	ldr	r0, [pc, #24]	; (8002254 <HAL_TIM_MspPostInit+0xc0>)
 800223a:	f000 fb11 	bl	8002860 <HAL_GPIO_Init>
}
 800223e:	bf00      	nop
 8002240:	3728      	adds	r7, #40	; 0x28
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	58024400 	.word	0x58024400
 800224c:	58020000 	.word	0x58020000
 8002250:	40000400 	.word	0x40000400
 8002254:	58020400 	.word	0x58020400

08002258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b0b8      	sub	sp, #224	; 0xe0
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	22bc      	movs	r2, #188	; 0xbc
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f006 f9dd 	bl	8008638 <memset>
  if(huart->Instance==USART3)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a25      	ldr	r2, [pc, #148]	; (8002318 <HAL_UART_MspInit+0xc0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d142      	bne.n	800230e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002288:	2302      	movs	r3, #2
 800228a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002292:	f107 0310 	add.w	r3, r7, #16
 8002296:	4618      	mov	r0, r3
 8002298:	f001 fcee 	bl	8003c78 <HAL_RCCEx_PeriphCLKConfig>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022a2:	f7ff fea7 	bl	8001ff4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <HAL_UART_MspInit+0xc4>)
 80022a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ac:	4a1b      	ldr	r2, [pc, #108]	; (800231c <HAL_UART_MspInit+0xc4>)
 80022ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022b6:	4b19      	ldr	r3, [pc, #100]	; (800231c <HAL_UART_MspInit+0xc4>)
 80022b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <HAL_UART_MspInit+0xc4>)
 80022c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ca:	4a14      	ldr	r2, [pc, #80]	; (800231c <HAL_UART_MspInit+0xc4>)
 80022cc:	f043 0308 	orr.w	r3, r3, #8
 80022d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_UART_MspInit+0xc4>)
 80022d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80022e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022fc:	2307      	movs	r3, #7
 80022fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002302:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002306:	4619      	mov	r1, r3
 8002308:	4805      	ldr	r0, [pc, #20]	; (8002320 <HAL_UART_MspInit+0xc8>)
 800230a:	f000 faa9 	bl	8002860 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800230e:	bf00      	nop
 8002310:	37e0      	adds	r7, #224	; 0xe0
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40004800 	.word	0x40004800
 800231c:	58024400 	.word	0x58024400
 8002320:	58020c00 	.word	0x58020c00

08002324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <NMI_Handler+0x4>

0800232a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800232e:	e7fe      	b.n	800232e <HardFault_Handler+0x4>

08002330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <MemManage_Handler+0x4>

08002336 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800233a:	e7fe      	b.n	800233a <BusFault_Handler+0x4>

0800233c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <UsageFault_Handler+0x4>

08002342 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002370:	f000 f942 	bl	80025f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}

08002378 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	e00a      	b.n	80023a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800238a:	f3af 8000 	nop.w
 800238e:	4601      	mov	r1, r0
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	60ba      	str	r2, [r7, #8]
 8002396:	b2ca      	uxtb	r2, r1
 8002398:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	3301      	adds	r3, #1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	dbf0      	blt.n	800238a <_read+0x12>
	}

return len;
 80023a8:	687b      	ldr	r3, [r7, #4]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e009      	b.n	80023d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	60ba      	str	r2, [r7, #8]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fe17 	bl	8002000 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	3301      	adds	r3, #1
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	dbf1      	blt.n	80023c4 <_write+0x12>
	}
	return len;
 80023e0:	687b      	ldr	r3, [r7, #4]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_close>:

int _close(int file)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
	return -1;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002412:	605a      	str	r2, [r3, #4]
	return 0;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <_isatty>:

int _isatty(int file)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
	return 1;
 800242a:	2301      	movs	r3, #1
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
	return 0;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <_sbrk+0x5c>)
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <_sbrk+0x60>)
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d102      	bne.n	8002476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002470:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <_sbrk+0x64>)
 8002472:	4a12      	ldr	r2, [pc, #72]	; (80024bc <_sbrk+0x68>)
 8002474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <_sbrk+0x64>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	429a      	cmp	r2, r3
 8002482:	d207      	bcs.n	8002494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002484:	f006 f8a0 	bl	80085c8 <__errno>
 8002488:	4603      	mov	r3, r0
 800248a:	220c      	movs	r2, #12
 800248c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	e009      	b.n	80024a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <_sbrk+0x64>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <_sbrk+0x64>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <_sbrk+0x64>)
 80024a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024a6:	68fb      	ldr	r3, [r7, #12]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	24080000 	.word	0x24080000
 80024b4:	00000400 	.word	0x00000400
 80024b8:	240003b0 	.word	0x240003b0
 80024bc:	240003c8 	.word	0x240003c8

080024c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80024c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024c4:	f7fe f8e6 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024c8:	480c      	ldr	r0, [pc, #48]	; (80024fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024ca:	490d      	ldr	r1, [pc, #52]	; (8002500 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024cc:	4a0d      	ldr	r2, [pc, #52]	; (8002504 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d0:	e002      	b.n	80024d8 <LoopCopyDataInit>

080024d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d6:	3304      	adds	r3, #4

080024d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024dc:	d3f9      	bcc.n	80024d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024de:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024e0:	4c0a      	ldr	r4, [pc, #40]	; (800250c <LoopFillZerobss+0x22>)
  movs r3, #0
 80024e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e4:	e001      	b.n	80024ea <LoopFillZerobss>

080024e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e8:	3204      	adds	r2, #4

080024ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024ec:	d3fb      	bcc.n	80024e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ee:	f006 f871 	bl	80085d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024f2:	f7ff fa2f 	bl	8001954 <main>
  bx  lr
 80024f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024f8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80024fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002500:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8002504:	08009d68 	.word	0x08009d68
  ldr r2, =_sbss
 8002508:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 800250c:	240003c8 	.word	0x240003c8

08002510 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002510:	e7fe      	b.n	8002510 <ADC3_IRQHandler>
	...

08002514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800251a:	2003      	movs	r0, #3
 800251c:	f000 f96e 	bl	80027fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002520:	f001 f9d4 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <HAL_Init+0x68>)
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	4913      	ldr	r1, [pc, #76]	; (8002580 <HAL_Init+0x6c>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_Init+0x68>)
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <HAL_Init+0x6c>)
 8002548:	5cd3      	ldrb	r3, [r2, r3]
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
 8002554:	4a0b      	ldr	r2, [pc, #44]	; (8002584 <HAL_Init+0x70>)
 8002556:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002558:	4a0b      	ldr	r2, [pc, #44]	; (8002588 <HAL_Init+0x74>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800255e:	200f      	movs	r0, #15
 8002560:	f000 f814 	bl	800258c <HAL_InitTick>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e002      	b.n	8002574 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800256e:	f7ff fd59 	bl	8002024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	58024400 	.word	0x58024400
 8002580:	08009c78 	.word	0x08009c78
 8002584:	24000004 	.word	0x24000004
 8002588:	24000000 	.word	0x24000000

0800258c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002594:	4b15      	ldr	r3, [pc, #84]	; (80025ec <HAL_InitTick+0x60>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e021      	b.n	80025e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <HAL_InitTick+0x64>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_InitTick+0x60>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
 80025aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80025b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f945 	bl	8002846 <HAL_SYSTICK_Config>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e00e      	b.n	80025e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b0f      	cmp	r3, #15
 80025ca:	d80a      	bhi.n	80025e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025cc:	2200      	movs	r2, #0
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	f000 f91d 	bl	8002812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d8:	4a06      	ldr	r2, [pc, #24]	; (80025f4 <HAL_InitTick+0x68>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	e000      	b.n	80025e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	24000014 	.word	0x24000014
 80025f0:	24000000 	.word	0x24000000
 80025f4:	24000010 	.word	0x24000010

080025f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_IncTick+0x20>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_IncTick+0x24>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4413      	add	r3, r2
 8002608:	4a04      	ldr	r2, [pc, #16]	; (800261c <HAL_IncTick+0x24>)
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	24000014 	.word	0x24000014
 800261c:	240003b4 	.word	0x240003b4

08002620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return uwTick;
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_GetTick+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	240003b4 	.word	0x240003b4

08002638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002640:	f7ff ffee 	bl	8002620 <HAL_GetTick>
 8002644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002650:	d005      	beq.n	800265e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_Delay+0x44>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4413      	add	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800265e:	bf00      	nop
 8002660:	f7ff ffde 	bl	8002620 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	429a      	cmp	r2, r3
 800266e:	d8f7      	bhi.n	8002660 <HAL_Delay+0x28>
  {
  }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	24000014 	.word	0x24000014

08002680 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_GetREVID+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	0c1b      	lsrs	r3, r3, #16
}
 800268a:	4618      	mov	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	5c001000 	.word	0x5c001000

08002698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <__NVIC_SetPriorityGrouping+0x40>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026b4:	4013      	ands	r3, r2
 80026b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <__NVIC_SetPriorityGrouping+0x44>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026c6:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <__NVIC_SetPriorityGrouping+0x40>)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	60d3      	str	r3, [r2, #12]
}
 80026cc:	bf00      	nop
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000ed00 	.word	0xe000ed00
 80026dc:	05fa0000 	.word	0x05fa0000

080026e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <__NVIC_GetPriorityGrouping+0x18>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	f003 0307 	and.w	r3, r3, #7
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	6039      	str	r1, [r7, #0]
 8002706:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800270c:	2b00      	cmp	r3, #0
 800270e:	db0a      	blt.n	8002726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	b2da      	uxtb	r2, r3
 8002714:	490c      	ldr	r1, [pc, #48]	; (8002748 <__NVIC_SetPriority+0x4c>)
 8002716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800271a:	0112      	lsls	r2, r2, #4
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	440b      	add	r3, r1
 8002720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002724:	e00a      	b.n	800273c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4908      	ldr	r1, [pc, #32]	; (800274c <__NVIC_SetPriority+0x50>)
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	3b04      	subs	r3, #4
 8002734:	0112      	lsls	r2, r2, #4
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	440b      	add	r3, r1
 800273a:	761a      	strb	r2, [r3, #24]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000e100 	.word	0xe000e100
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f1c3 0307 	rsb	r3, r3, #7
 800276a:	2b04      	cmp	r3, #4
 800276c:	bf28      	it	cs
 800276e:	2304      	movcs	r3, #4
 8002770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3304      	adds	r3, #4
 8002776:	2b06      	cmp	r3, #6
 8002778:	d902      	bls.n	8002780 <NVIC_EncodePriority+0x30>
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3b03      	subs	r3, #3
 800277e:	e000      	b.n	8002782 <NVIC_EncodePriority+0x32>
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	f04f 32ff 	mov.w	r2, #4294967295
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43da      	mvns	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	401a      	ands	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002798:	f04f 31ff 	mov.w	r1, #4294967295
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	43d9      	mvns	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	4313      	orrs	r3, r2
         );
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3724      	adds	r7, #36	; 0x24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c8:	d301      	bcc.n	80027ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00f      	b.n	80027ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ce:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <SysTick_Config+0x40>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027d6:	210f      	movs	r1, #15
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295
 80027dc:	f7ff ff8e 	bl	80026fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <SysTick_Config+0x40>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027e6:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <SysTick_Config+0x40>)
 80027e8:	2207      	movs	r2, #7
 80027ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	e000e010 	.word	0xe000e010

080027fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ff47 	bl	8002698 <__NVIC_SetPriorityGrouping>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b086      	sub	sp, #24
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002820:	f7ff ff5e 	bl	80026e0 <__NVIC_GetPriorityGrouping>
 8002824:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	6978      	ldr	r0, [r7, #20]
 800282c:	f7ff ff90 	bl	8002750 <NVIC_EncodePriority>
 8002830:	4602      	mov	r2, r0
 8002832:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff5f 	bl	80026fc <__NVIC_SetPriority>
}
 800283e:	bf00      	nop
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff ffb2 	bl	80027b8 <SysTick_Config>
 8002854:	4603      	mov	r3, r0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800286e:	4b89      	ldr	r3, [pc, #548]	; (8002a94 <HAL_GPIO_Init+0x234>)
 8002870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002872:	e194      	b.n	8002b9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	2101      	movs	r1, #1
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	4013      	ands	r3, r2
 8002882:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 8186 	beq.w	8002b98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b01      	cmp	r3, #1
 8002896:	d005      	beq.n	80028a4 <HAL_GPIO_Init+0x44>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d130      	bne.n	8002906 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	2203      	movs	r2, #3
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028da:	2201      	movs	r2, #1
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	f003 0201 	and.w	r2, r3, #1
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	2b03      	cmp	r3, #3
 8002910:	d017      	beq.n	8002942 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	2203      	movs	r2, #3
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4013      	ands	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d123      	bne.n	8002996 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	08da      	lsrs	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3208      	adds	r2, #8
 8002956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	220f      	movs	r2, #15
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	08da      	lsrs	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3208      	adds	r2, #8
 8002990:	69b9      	ldr	r1, [r7, #24]
 8002992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2203      	movs	r2, #3
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0203 	and.w	r2, r3, #3
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80e0 	beq.w	8002b98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d8:	4b2f      	ldr	r3, [pc, #188]	; (8002a98 <HAL_GPIO_Init+0x238>)
 80029da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029de:	4a2e      	ldr	r2, [pc, #184]	; (8002a98 <HAL_GPIO_Init+0x238>)
 80029e0:	f043 0302 	orr.w	r3, r3, #2
 80029e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80029e8:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_GPIO_Init+0x238>)
 80029ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029f6:	4a29      	ldr	r2, [pc, #164]	; (8002a9c <HAL_GPIO_Init+0x23c>)
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	089b      	lsrs	r3, r3, #2
 80029fc:	3302      	adds	r3, #2
 80029fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	220f      	movs	r2, #15
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a20      	ldr	r2, [pc, #128]	; (8002aa0 <HAL_GPIO_Init+0x240>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d052      	beq.n	8002ac8 <HAL_GPIO_Init+0x268>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a1f      	ldr	r2, [pc, #124]	; (8002aa4 <HAL_GPIO_Init+0x244>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d031      	beq.n	8002a8e <HAL_GPIO_Init+0x22e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a1e      	ldr	r2, [pc, #120]	; (8002aa8 <HAL_GPIO_Init+0x248>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d02b      	beq.n	8002a8a <HAL_GPIO_Init+0x22a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <HAL_GPIO_Init+0x24c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d025      	beq.n	8002a86 <HAL_GPIO_Init+0x226>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a1c      	ldr	r2, [pc, #112]	; (8002ab0 <HAL_GPIO_Init+0x250>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d01f      	beq.n	8002a82 <HAL_GPIO_Init+0x222>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a1b      	ldr	r2, [pc, #108]	; (8002ab4 <HAL_GPIO_Init+0x254>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d019      	beq.n	8002a7e <HAL_GPIO_Init+0x21e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a1a      	ldr	r2, [pc, #104]	; (8002ab8 <HAL_GPIO_Init+0x258>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d013      	beq.n	8002a7a <HAL_GPIO_Init+0x21a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a19      	ldr	r2, [pc, #100]	; (8002abc <HAL_GPIO_Init+0x25c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00d      	beq.n	8002a76 <HAL_GPIO_Init+0x216>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a18      	ldr	r2, [pc, #96]	; (8002ac0 <HAL_GPIO_Init+0x260>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d007      	beq.n	8002a72 <HAL_GPIO_Init+0x212>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a17      	ldr	r2, [pc, #92]	; (8002ac4 <HAL_GPIO_Init+0x264>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d101      	bne.n	8002a6e <HAL_GPIO_Init+0x20e>
 8002a6a:	2309      	movs	r3, #9
 8002a6c:	e02d      	b.n	8002aca <HAL_GPIO_Init+0x26a>
 8002a6e:	230a      	movs	r3, #10
 8002a70:	e02b      	b.n	8002aca <HAL_GPIO_Init+0x26a>
 8002a72:	2308      	movs	r3, #8
 8002a74:	e029      	b.n	8002aca <HAL_GPIO_Init+0x26a>
 8002a76:	2307      	movs	r3, #7
 8002a78:	e027      	b.n	8002aca <HAL_GPIO_Init+0x26a>
 8002a7a:	2306      	movs	r3, #6
 8002a7c:	e025      	b.n	8002aca <HAL_GPIO_Init+0x26a>
 8002a7e:	2305      	movs	r3, #5
 8002a80:	e023      	b.n	8002aca <HAL_GPIO_Init+0x26a>
 8002a82:	2304      	movs	r3, #4
 8002a84:	e021      	b.n	8002aca <HAL_GPIO_Init+0x26a>
 8002a86:	2303      	movs	r3, #3
 8002a88:	e01f      	b.n	8002aca <HAL_GPIO_Init+0x26a>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e01d      	b.n	8002aca <HAL_GPIO_Init+0x26a>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e01b      	b.n	8002aca <HAL_GPIO_Init+0x26a>
 8002a92:	bf00      	nop
 8002a94:	58000080 	.word	0x58000080
 8002a98:	58024400 	.word	0x58024400
 8002a9c:	58000400 	.word	0x58000400
 8002aa0:	58020000 	.word	0x58020000
 8002aa4:	58020400 	.word	0x58020400
 8002aa8:	58020800 	.word	0x58020800
 8002aac:	58020c00 	.word	0x58020c00
 8002ab0:	58021000 	.word	0x58021000
 8002ab4:	58021400 	.word	0x58021400
 8002ab8:	58021800 	.word	0x58021800
 8002abc:	58021c00 	.word	0x58021c00
 8002ac0:	58022000 	.word	0x58022000
 8002ac4:	58022400 	.word	0x58022400
 8002ac8:	2300      	movs	r3, #0
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	f002 0203 	and.w	r2, r2, #3
 8002ad0:	0092      	lsls	r2, r2, #2
 8002ad2:	4093      	lsls	r3, r2
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ada:	4938      	ldr	r1, [pc, #224]	; (8002bbc <HAL_GPIO_Init+0x35c>)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	089b      	lsrs	r3, r3, #2
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f47f ae63 	bne.w	8002874 <HAL_GPIO_Init+0x14>
  }
}
 8002bae:	bf00      	nop
 8002bb0:	bf00      	nop
 8002bb2:	3724      	adds	r7, #36	; 0x24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	58000400 	.word	0x58000400

08002bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bd0:	787b      	ldrb	r3, [r7, #1]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bd6:	887a      	ldrh	r2, [r7, #2]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002bdc:	e003      	b.n	8002be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002bde:	887b      	ldrh	r3, [r7, #2]
 8002be0:	041a      	lsls	r2, r3, #16
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	619a      	str	r2, [r3, #24]
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002bfc:	4a08      	ldr	r2, [pc, #32]	; (8002c20 <HAL_HSEM_FastTake+0x2c>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3320      	adds	r3, #32
 8002c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c06:	4a07      	ldr	r2, [pc, #28]	; (8002c24 <HAL_HSEM_FastTake+0x30>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d101      	bne.n	8002c10 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e000      	b.n	8002c12 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	58026400 	.word	0x58026400
 8002c24:	80000300 	.word	0x80000300

08002c28 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002c32:	4906      	ldr	r1, [pc, #24]	; (8002c4c <HAL_HSEM_Release+0x24>)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	58026400 	.word	0x58026400

08002c50 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002c58:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	2b06      	cmp	r3, #6
 8002c62:	d00a      	beq.n	8002c7a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c64:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d001      	beq.n	8002c76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e040      	b.n	8002cf8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e03e      	b.n	8002cf8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c7a:	4b21      	ldr	r3, [pc, #132]	; (8002d00 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002c82:	491f      	ldr	r1, [pc, #124]	; (8002d00 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c8a:	f7ff fcc9 	bl	8002620 <HAL_GetTick>
 8002c8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c90:	e009      	b.n	8002ca6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c92:	f7ff fcc5 	bl	8002620 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ca0:	d901      	bls.n	8002ca6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e028      	b.n	8002cf8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ca6:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb2:	d1ee      	bne.n	8002c92 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b1e      	cmp	r3, #30
 8002cb8:	d008      	beq.n	8002ccc <HAL_PWREx_ConfigSupply+0x7c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b2e      	cmp	r3, #46	; 0x2e
 8002cbe:	d005      	beq.n	8002ccc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b1d      	cmp	r3, #29
 8002cc4:	d002      	beq.n	8002ccc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b2d      	cmp	r3, #45	; 0x2d
 8002cca:	d114      	bne.n	8002cf6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002ccc:	f7ff fca8 	bl	8002620 <HAL_GetTick>
 8002cd0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002cd2:	e009      	b.n	8002ce8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002cd4:	f7ff fca4 	bl	8002620 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ce2:	d901      	bls.n	8002ce8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e007      	b.n	8002cf8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_PWREx_ConfigSupply+0xb0>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf4:	d1ee      	bne.n	8002cd4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	58024800 	.word	0x58024800

08002d04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08c      	sub	sp, #48	; 0x30
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d102      	bne.n	8002d18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f000 bc1d 	b.w	8003552 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 8087 	beq.w	8002e34 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d26:	4b99      	ldr	r3, [pc, #612]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d30:	4b96      	ldr	r3, [pc, #600]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	2b10      	cmp	r3, #16
 8002d3a:	d007      	beq.n	8002d4c <HAL_RCC_OscConfig+0x48>
 8002d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3e:	2b18      	cmp	r3, #24
 8002d40:	d110      	bne.n	8002d64 <HAL_RCC_OscConfig+0x60>
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d10b      	bne.n	8002d64 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4c:	4b8f      	ldr	r3, [pc, #572]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d06c      	beq.n	8002e32 <HAL_RCC_OscConfig+0x12e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d168      	bne.n	8002e32 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e3f6      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6c:	d106      	bne.n	8002d7c <HAL_RCC_OscConfig+0x78>
 8002d6e:	4b87      	ldr	r3, [pc, #540]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a86      	ldr	r2, [pc, #536]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e02e      	b.n	8002dda <HAL_RCC_OscConfig+0xd6>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10c      	bne.n	8002d9e <HAL_RCC_OscConfig+0x9a>
 8002d84:	4b81      	ldr	r3, [pc, #516]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a80      	ldr	r2, [pc, #512]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	4b7e      	ldr	r3, [pc, #504]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a7d      	ldr	r2, [pc, #500]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	e01d      	b.n	8002dda <HAL_RCC_OscConfig+0xd6>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da6:	d10c      	bne.n	8002dc2 <HAL_RCC_OscConfig+0xbe>
 8002da8:	4b78      	ldr	r3, [pc, #480]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a77      	ldr	r2, [pc, #476]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002dae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b75      	ldr	r3, [pc, #468]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a74      	ldr	r2, [pc, #464]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	e00b      	b.n	8002dda <HAL_RCC_OscConfig+0xd6>
 8002dc2:	4b72      	ldr	r3, [pc, #456]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a71      	ldr	r2, [pc, #452]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b6f      	ldr	r3, [pc, #444]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a6e      	ldr	r2, [pc, #440]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d013      	beq.n	8002e0a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de2:	f7ff fc1d 	bl	8002620 <HAL_GetTick>
 8002de6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dea:	f7ff fc19 	bl	8002620 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b64      	cmp	r3, #100	; 0x64
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e3aa      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dfc:	4b63      	ldr	r3, [pc, #396]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0xe6>
 8002e08:	e014      	b.n	8002e34 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0a:	f7ff fc09 	bl	8002620 <HAL_GetTick>
 8002e0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e12:	f7ff fc05 	bl	8002620 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b64      	cmp	r3, #100	; 0x64
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e396      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e24:	4b59      	ldr	r3, [pc, #356]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f0      	bne.n	8002e12 <HAL_RCC_OscConfig+0x10e>
 8002e30:	e000      	b.n	8002e34 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e32:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80cb 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e42:	4b52      	ldr	r3, [pc, #328]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e4a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e4c:	4b4f      	ldr	r3, [pc, #316]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d007      	beq.n	8002e68 <HAL_RCC_OscConfig+0x164>
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	2b18      	cmp	r3, #24
 8002e5c:	d156      	bne.n	8002f0c <HAL_RCC_OscConfig+0x208>
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d151      	bne.n	8002f0c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e68:	4b48      	ldr	r3, [pc, #288]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <HAL_RCC_OscConfig+0x17c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e368      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e80:	4b42      	ldr	r3, [pc, #264]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 0219 	bic.w	r2, r3, #25
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	493f      	ldr	r1, [pc, #252]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e92:	f7ff fbc5 	bl	8002620 <HAL_GetTick>
 8002e96:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e9a:	f7ff fbc1 	bl	8002620 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e352      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eac:	4b37      	ldr	r3, [pc, #220]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb8:	f7ff fbe2 	bl	8002680 <HAL_GetREVID>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d817      	bhi.n	8002ef6 <HAL_RCC_OscConfig+0x1f2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	2b40      	cmp	r3, #64	; 0x40
 8002ecc:	d108      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x1dc>
 8002ece:	4b2f      	ldr	r3, [pc, #188]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ed6:	4a2d      	ldr	r2, [pc, #180]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002edc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ede:	e07b      	b.n	8002fd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee0:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	031b      	lsls	r3, r3, #12
 8002eee:	4927      	ldr	r1, [pc, #156]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef4:	e070      	b.n	8002fd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef6:	4b25      	ldr	r3, [pc, #148]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	061b      	lsls	r3, r3, #24
 8002f04:	4921      	ldr	r1, [pc, #132]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f0a:	e065      	b.n	8002fd8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d048      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f14:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f023 0219 	bic.w	r2, r3, #25
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	491a      	ldr	r1, [pc, #104]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f26:	f7ff fb7b 	bl	8002620 <HAL_GetTick>
 8002f2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2e:	f7ff fb77 	bl	8002620 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e308      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4c:	f7ff fb98 	bl	8002680 <HAL_GetREVID>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d81a      	bhi.n	8002f90 <HAL_RCC_OscConfig+0x28c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b40      	cmp	r3, #64	; 0x40
 8002f60:	d108      	bne.n	8002f74 <HAL_RCC_OscConfig+0x270>
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f6a:	4a08      	ldr	r2, [pc, #32]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f70:	6053      	str	r3, [r2, #4]
 8002f72:	e031      	b.n	8002fd8 <HAL_RCC_OscConfig+0x2d4>
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	031b      	lsls	r3, r3, #12
 8002f82:	4902      	ldr	r1, [pc, #8]	; (8002f8c <HAL_RCC_OscConfig+0x288>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]
 8002f88:	e026      	b.n	8002fd8 <HAL_RCC_OscConfig+0x2d4>
 8002f8a:	bf00      	nop
 8002f8c:	58024400 	.word	0x58024400
 8002f90:	4b9a      	ldr	r3, [pc, #616]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	061b      	lsls	r3, r3, #24
 8002f9e:	4997      	ldr	r1, [pc, #604]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	604b      	str	r3, [r1, #4]
 8002fa4:	e018      	b.n	8002fd8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa6:	4b95      	ldr	r3, [pc, #596]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a94      	ldr	r2, [pc, #592]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb2:	f7ff fb35 	bl	8002620 <HAL_GetTick>
 8002fb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fba:	f7ff fb31 	bl	8002620 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e2c2      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fcc:	4b8b      	ldr	r3, [pc, #556]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f0      	bne.n	8002fba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80a9 	beq.w	8003138 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe6:	4b85      	ldr	r3, [pc, #532]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ff0:	4b82      	ldr	r3, [pc, #520]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d007      	beq.n	800300c <HAL_RCC_OscConfig+0x308>
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	2b18      	cmp	r3, #24
 8003000:	d13a      	bne.n	8003078 <HAL_RCC_OscConfig+0x374>
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d135      	bne.n	8003078 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800300c:	4b7b      	ldr	r3, [pc, #492]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_OscConfig+0x320>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	2b80      	cmp	r3, #128	; 0x80
 800301e:	d001      	beq.n	8003024 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e296      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003024:	f7ff fb2c 	bl	8002680 <HAL_GetREVID>
 8003028:	4603      	mov	r3, r0
 800302a:	f241 0203 	movw	r2, #4099	; 0x1003
 800302e:	4293      	cmp	r3, r2
 8003030:	d817      	bhi.n	8003062 <HAL_RCC_OscConfig+0x35e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	2b20      	cmp	r3, #32
 8003038:	d108      	bne.n	800304c <HAL_RCC_OscConfig+0x348>
 800303a:	4b70      	ldr	r3, [pc, #448]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003042:	4a6e      	ldr	r2, [pc, #440]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 8003044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003048:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800304a:	e075      	b.n	8003138 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800304c:	4b6b      	ldr	r3, [pc, #428]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	069b      	lsls	r3, r3, #26
 800305a:	4968      	ldr	r1, [pc, #416]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 800305c:	4313      	orrs	r3, r2
 800305e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003060:	e06a      	b.n	8003138 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003062:	4b66      	ldr	r3, [pc, #408]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	061b      	lsls	r3, r3, #24
 8003070:	4962      	ldr	r1, [pc, #392]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 8003072:	4313      	orrs	r3, r2
 8003074:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003076:	e05f      	b.n	8003138 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d042      	beq.n	8003106 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003080:	4b5e      	ldr	r3, [pc, #376]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a5d      	ldr	r2, [pc, #372]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 8003086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800308a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7ff fac8 	bl	8002620 <HAL_GetTick>
 8003090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003094:	f7ff fac4 	bl	8002620 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e255      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030a6:	4b55      	ldr	r3, [pc, #340]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030b2:	f7ff fae5 	bl	8002680 <HAL_GetREVID>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80030bc:	4293      	cmp	r3, r2
 80030be:	d817      	bhi.n	80030f0 <HAL_RCC_OscConfig+0x3ec>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d108      	bne.n	80030da <HAL_RCC_OscConfig+0x3d6>
 80030c8:	4b4c      	ldr	r3, [pc, #304]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80030d0:	4a4a      	ldr	r2, [pc, #296]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 80030d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030d6:	6053      	str	r3, [r2, #4]
 80030d8:	e02e      	b.n	8003138 <HAL_RCC_OscConfig+0x434>
 80030da:	4b48      	ldr	r3, [pc, #288]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	069b      	lsls	r3, r3, #26
 80030e8:	4944      	ldr	r1, [pc, #272]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	604b      	str	r3, [r1, #4]
 80030ee:	e023      	b.n	8003138 <HAL_RCC_OscConfig+0x434>
 80030f0:	4b42      	ldr	r3, [pc, #264]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	061b      	lsls	r3, r3, #24
 80030fe:	493f      	ldr	r1, [pc, #252]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 8003100:	4313      	orrs	r3, r2
 8003102:	60cb      	str	r3, [r1, #12]
 8003104:	e018      	b.n	8003138 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003106:	4b3d      	ldr	r3, [pc, #244]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a3c      	ldr	r2, [pc, #240]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 800310c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003112:	f7ff fa85 	bl	8002620 <HAL_GetTick>
 8003116:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800311a:	f7ff fa81 	bl	8002620 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e212      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800312c:	4b33      	ldr	r3, [pc, #204]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f0      	bne.n	800311a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d036      	beq.n	80031b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d019      	beq.n	8003180 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800314c:	4b2b      	ldr	r3, [pc, #172]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 800314e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003150:	4a2a      	ldr	r2, [pc, #168]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7ff fa62 	bl	8002620 <HAL_GetTick>
 800315c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003160:	f7ff fa5e 	bl	8002620 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e1ef      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003172:	4b22      	ldr	r3, [pc, #136]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 8003174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x45c>
 800317e:	e018      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003180:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 8003182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003184:	4a1d      	ldr	r2, [pc, #116]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 8003186:	f023 0301 	bic.w	r3, r3, #1
 800318a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318c:	f7ff fa48 	bl	8002620 <HAL_GetTick>
 8003190:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003194:	f7ff fa44 	bl	8002620 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e1d5      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031a6:	4b15      	ldr	r3, [pc, #84]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 80031a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d039      	beq.n	8003232 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d01c      	beq.n	8003200 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031c6:	4b0d      	ldr	r3, [pc, #52]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a0c      	ldr	r2, [pc, #48]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 80031cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031d2:	f7ff fa25 	bl	8002620 <HAL_GetTick>
 80031d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80031da:	f7ff fa21 	bl	8002620 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e1b2      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <HAL_RCC_OscConfig+0x4f8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x4d6>
 80031f8:	e01b      	b.n	8003232 <HAL_RCC_OscConfig+0x52e>
 80031fa:	bf00      	nop
 80031fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003200:	4b9b      	ldr	r3, [pc, #620]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a9a      	ldr	r2, [pc, #616]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800320a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800320c:	f7ff fa08 	bl	8002620 <HAL_GetTick>
 8003210:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003214:	f7ff fa04 	bl	8002620 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e195      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003226:	4b92      	ldr	r3, [pc, #584]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 8081 	beq.w	8003342 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003240:	4b8c      	ldr	r3, [pc, #560]	; (8003474 <HAL_RCC_OscConfig+0x770>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a8b      	ldr	r2, [pc, #556]	; (8003474 <HAL_RCC_OscConfig+0x770>)
 8003246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800324c:	f7ff f9e8 	bl	8002620 <HAL_GetTick>
 8003250:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003254:	f7ff f9e4 	bl	8002620 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	; 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e175      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003266:	4b83      	ldr	r3, [pc, #524]	; (8003474 <HAL_RCC_OscConfig+0x770>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d106      	bne.n	8003288 <HAL_RCC_OscConfig+0x584>
 800327a:	4b7d      	ldr	r3, [pc, #500]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 800327c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327e:	4a7c      	ldr	r2, [pc, #496]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6713      	str	r3, [r2, #112]	; 0x70
 8003286:	e02d      	b.n	80032e4 <HAL_RCC_OscConfig+0x5e0>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10c      	bne.n	80032aa <HAL_RCC_OscConfig+0x5a6>
 8003290:	4b77      	ldr	r3, [pc, #476]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	4a76      	ldr	r2, [pc, #472]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003296:	f023 0301 	bic.w	r3, r3, #1
 800329a:	6713      	str	r3, [r2, #112]	; 0x70
 800329c:	4b74      	ldr	r3, [pc, #464]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a73      	ldr	r2, [pc, #460]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 80032a2:	f023 0304 	bic.w	r3, r3, #4
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
 80032a8:	e01c      	b.n	80032e4 <HAL_RCC_OscConfig+0x5e0>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b05      	cmp	r3, #5
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x5c8>
 80032b2:	4b6f      	ldr	r3, [pc, #444]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	4a6e      	ldr	r2, [pc, #440]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 80032b8:	f043 0304 	orr.w	r3, r3, #4
 80032bc:	6713      	str	r3, [r2, #112]	; 0x70
 80032be:	4b6c      	ldr	r3, [pc, #432]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	4a6b      	ldr	r2, [pc, #428]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0x5e0>
 80032cc:	4b68      	ldr	r3, [pc, #416]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	4a67      	ldr	r2, [pc, #412]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 80032d2:	f023 0301 	bic.w	r3, r3, #1
 80032d6:	6713      	str	r3, [r2, #112]	; 0x70
 80032d8:	4b65      	ldr	r3, [pc, #404]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	4a64      	ldr	r2, [pc, #400]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 80032de:	f023 0304 	bic.w	r3, r3, #4
 80032e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d015      	beq.n	8003318 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ec:	f7ff f998 	bl	8002620 <HAL_GetTick>
 80032f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032f2:	e00a      	b.n	800330a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f4:	f7ff f994 	bl	8002620 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e123      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800330a:	4b59      	ldr	r3, [pc, #356]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0ee      	beq.n	80032f4 <HAL_RCC_OscConfig+0x5f0>
 8003316:	e014      	b.n	8003342 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7ff f982 	bl	8002620 <HAL_GetTick>
 800331c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800331e:	e00a      	b.n	8003336 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003320:	f7ff f97e 	bl	8002620 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f241 3288 	movw	r2, #5000	; 0x1388
 800332e:	4293      	cmp	r3, r2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e10d      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003336:	4b4e      	ldr	r3, [pc, #312]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1ee      	bne.n	8003320 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 8102 	beq.w	8003550 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800334c:	4b48      	ldr	r3, [pc, #288]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003354:	2b18      	cmp	r3, #24
 8003356:	f000 80bd 	beq.w	80034d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	2b02      	cmp	r3, #2
 8003360:	f040 809e 	bne.w	80034a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003364:	4b42      	ldr	r3, [pc, #264]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a41      	ldr	r2, [pc, #260]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 800336a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7ff f956 	bl	8002620 <HAL_GetTick>
 8003374:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003378:	f7ff f952 	bl	8002620 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e0e3      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800338a:	4b39      	ldr	r3, [pc, #228]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003396:	4b36      	ldr	r3, [pc, #216]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800339a:	4b37      	ldr	r3, [pc, #220]	; (8003478 <HAL_RCC_OscConfig+0x774>)
 800339c:	4013      	ands	r3, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80033a6:	0112      	lsls	r2, r2, #4
 80033a8:	430a      	orrs	r2, r1
 80033aa:	4931      	ldr	r1, [pc, #196]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	628b      	str	r3, [r1, #40]	; 0x28
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	3b01      	subs	r3, #1
 80033b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033be:	3b01      	subs	r3, #1
 80033c0:	025b      	lsls	r3, r3, #9
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	431a      	orrs	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	3b01      	subs	r3, #1
 80033cc:	041b      	lsls	r3, r3, #16
 80033ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	3b01      	subs	r3, #1
 80033da:	061b      	lsls	r3, r3, #24
 80033dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80033e0:	4923      	ldr	r1, [pc, #140]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80033e6:	4b22      	ldr	r3, [pc, #136]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	4a21      	ldr	r2, [pc, #132]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033f2:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 80033f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033f6:	4b21      	ldr	r3, [pc, #132]	; (800347c <HAL_RCC_OscConfig+0x778>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033fe:	00d2      	lsls	r2, r2, #3
 8003400:	491b      	ldr	r1, [pc, #108]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003402:	4313      	orrs	r3, r2
 8003404:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003406:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	f023 020c 	bic.w	r2, r3, #12
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	4917      	ldr	r1, [pc, #92]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003414:	4313      	orrs	r3, r2
 8003416:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003418:	4b15      	ldr	r3, [pc, #84]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	f023 0202 	bic.w	r2, r3, #2
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003424:	4912      	ldr	r1, [pc, #72]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003426:	4313      	orrs	r3, r2
 8003428:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800342a:	4b11      	ldr	r3, [pc, #68]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	4a10      	ldr	r2, [pc, #64]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003434:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003436:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	4a0d      	ldr	r2, [pc, #52]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 800343c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003440:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003442:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800344c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800344e:	4b08      	ldr	r3, [pc, #32]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	4a07      	ldr	r2, [pc, #28]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800345a:	4b05      	ldr	r3, [pc, #20]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a04      	ldr	r2, [pc, #16]	; (8003470 <HAL_RCC_OscConfig+0x76c>)
 8003460:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003466:	f7ff f8db 	bl	8002620 <HAL_GetTick>
 800346a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800346c:	e011      	b.n	8003492 <HAL_RCC_OscConfig+0x78e>
 800346e:	bf00      	nop
 8003470:	58024400 	.word	0x58024400
 8003474:	58024800 	.word	0x58024800
 8003478:	fffffc0c 	.word	0xfffffc0c
 800347c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003480:	f7ff f8ce 	bl	8002620 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e05f      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003492:	4b32      	ldr	r3, [pc, #200]	; (800355c <HAL_RCC_OscConfig+0x858>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x77c>
 800349e:	e057      	b.n	8003550 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a0:	4b2e      	ldr	r3, [pc, #184]	; (800355c <HAL_RCC_OscConfig+0x858>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a2d      	ldr	r2, [pc, #180]	; (800355c <HAL_RCC_OscConfig+0x858>)
 80034a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7ff f8b8 	bl	8002620 <HAL_GetTick>
 80034b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b4:	f7ff f8b4 	bl	8002620 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e045      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034c6:	4b25      	ldr	r3, [pc, #148]	; (800355c <HAL_RCC_OscConfig+0x858>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x7b0>
 80034d2:	e03d      	b.n	8003550 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80034d4:	4b21      	ldr	r3, [pc, #132]	; (800355c <HAL_RCC_OscConfig+0x858>)
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034da:	4b20      	ldr	r3, [pc, #128]	; (800355c <HAL_RCC_OscConfig+0x858>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d031      	beq.n	800354c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f003 0203 	and.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d12a      	bne.n	800354c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003502:	429a      	cmp	r2, r3
 8003504:	d122      	bne.n	800354c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d11a      	bne.n	800354c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	0a5b      	lsrs	r3, r3, #9
 800351a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003522:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d111      	bne.n	800354c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	0c1b      	lsrs	r3, r3, #16
 800352c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003536:	429a      	cmp	r2, r3
 8003538:	d108      	bne.n	800354c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	0e1b      	lsrs	r3, r3, #24
 800353e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003546:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3730      	adds	r7, #48	; 0x30
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	58024400 	.word	0x58024400

08003560 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e19c      	b.n	80038ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003574:	4b8a      	ldr	r3, [pc, #552]	; (80037a0 <HAL_RCC_ClockConfig+0x240>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d910      	bls.n	80035a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003582:	4b87      	ldr	r3, [pc, #540]	; (80037a0 <HAL_RCC_ClockConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 020f 	bic.w	r2, r3, #15
 800358a:	4985      	ldr	r1, [pc, #532]	; (80037a0 <HAL_RCC_ClockConfig+0x240>)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003592:	4b83      	ldr	r3, [pc, #524]	; (80037a0 <HAL_RCC_ClockConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e184      	b.n	80038ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d010      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	4b7b      	ldr	r3, [pc, #492]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035bc:	429a      	cmp	r2, r3
 80035be:	d908      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035c0:	4b78      	ldr	r3, [pc, #480]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	4975      	ldr	r1, [pc, #468]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d010      	beq.n	8003600 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	4b70      	ldr	r3, [pc, #448]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d908      	bls.n	8003600 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035ee:	4b6d      	ldr	r3, [pc, #436]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	496a      	ldr	r1, [pc, #424]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b00      	cmp	r3, #0
 800360a:	d010      	beq.n	800362e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699a      	ldr	r2, [r3, #24]
 8003610:	4b64      	ldr	r3, [pc, #400]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003618:	429a      	cmp	r2, r3
 800361a:	d908      	bls.n	800362e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800361c:	4b61      	ldr	r3, [pc, #388]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	495e      	ldr	r1, [pc, #376]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 800362a:	4313      	orrs	r3, r2
 800362c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	d010      	beq.n	800365c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69da      	ldr	r2, [r3, #28]
 800363e:	4b59      	ldr	r3, [pc, #356]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003646:	429a      	cmp	r2, r3
 8003648:	d908      	bls.n	800365c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800364a:	4b56      	ldr	r3, [pc, #344]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	4953      	ldr	r1, [pc, #332]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 8003658:	4313      	orrs	r3, r2
 800365a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d010      	beq.n	800368a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	4b4d      	ldr	r3, [pc, #308]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	f003 030f 	and.w	r3, r3, #15
 8003674:	429a      	cmp	r2, r3
 8003676:	d908      	bls.n	800368a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003678:	4b4a      	ldr	r3, [pc, #296]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	f023 020f 	bic.w	r2, r3, #15
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	4947      	ldr	r1, [pc, #284]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 8003686:	4313      	orrs	r3, r2
 8003688:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d055      	beq.n	8003742 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003696:	4b43      	ldr	r3, [pc, #268]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	4940      	ldr	r1, [pc, #256]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d107      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036b0:	4b3c      	ldr	r3, [pc, #240]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d121      	bne.n	8003700 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0f6      	b.n	80038ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d107      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036c8:	4b36      	ldr	r3, [pc, #216]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d115      	bne.n	8003700 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0ea      	b.n	80038ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d107      	bne.n	80036f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036e0:	4b30      	ldr	r3, [pc, #192]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d109      	bne.n	8003700 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0de      	b.n	80038ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036f0:	4b2c      	ldr	r3, [pc, #176]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0d6      	b.n	80038ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003700:	4b28      	ldr	r3, [pc, #160]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f023 0207 	bic.w	r2, r3, #7
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4925      	ldr	r1, [pc, #148]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 800370e:	4313      	orrs	r3, r2
 8003710:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003712:	f7fe ff85 	bl	8002620 <HAL_GetTick>
 8003716:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003718:	e00a      	b.n	8003730 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371a:	f7fe ff81 	bl	8002620 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	f241 3288 	movw	r2, #5000	; 0x1388
 8003728:	4293      	cmp	r3, r2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e0be      	b.n	80038ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003730:	4b1c      	ldr	r3, [pc, #112]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	429a      	cmp	r2, r3
 8003740:	d1eb      	bne.n	800371a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d010      	beq.n	8003770 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	429a      	cmp	r2, r3
 800375c:	d208      	bcs.n	8003770 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800375e:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f023 020f 	bic.w	r2, r3, #15
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	490e      	ldr	r1, [pc, #56]	; (80037a4 <HAL_RCC_ClockConfig+0x244>)
 800376c:	4313      	orrs	r3, r2
 800376e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_RCC_ClockConfig+0x240>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d214      	bcs.n	80037a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <HAL_RCC_ClockConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 020f 	bic.w	r2, r3, #15
 8003786:	4906      	ldr	r1, [pc, #24]	; (80037a0 <HAL_RCC_ClockConfig+0x240>)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378e:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <HAL_RCC_ClockConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e086      	b.n	80038ae <HAL_RCC_ClockConfig+0x34e>
 80037a0:	52002000 	.word	0x52002000
 80037a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d010      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	4b3f      	ldr	r3, [pc, #252]	; (80038b8 <HAL_RCC_ClockConfig+0x358>)
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d208      	bcs.n	80037d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80037c4:	4b3c      	ldr	r3, [pc, #240]	; (80038b8 <HAL_RCC_ClockConfig+0x358>)
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	4939      	ldr	r1, [pc, #228]	; (80038b8 <HAL_RCC_ClockConfig+0x358>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d010      	beq.n	8003804 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695a      	ldr	r2, [r3, #20]
 80037e6:	4b34      	ldr	r3, [pc, #208]	; (80038b8 <HAL_RCC_ClockConfig+0x358>)
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d208      	bcs.n	8003804 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037f2:	4b31      	ldr	r3, [pc, #196]	; (80038b8 <HAL_RCC_ClockConfig+0x358>)
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	492e      	ldr	r1, [pc, #184]	; (80038b8 <HAL_RCC_ClockConfig+0x358>)
 8003800:	4313      	orrs	r3, r2
 8003802:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b00      	cmp	r3, #0
 800380e:	d010      	beq.n	8003832 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699a      	ldr	r2, [r3, #24]
 8003814:	4b28      	ldr	r3, [pc, #160]	; (80038b8 <HAL_RCC_ClockConfig+0x358>)
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800381c:	429a      	cmp	r2, r3
 800381e:	d208      	bcs.n	8003832 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003820:	4b25      	ldr	r3, [pc, #148]	; (80038b8 <HAL_RCC_ClockConfig+0x358>)
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	4922      	ldr	r1, [pc, #136]	; (80038b8 <HAL_RCC_ClockConfig+0x358>)
 800382e:	4313      	orrs	r3, r2
 8003830:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b00      	cmp	r3, #0
 800383c:	d010      	beq.n	8003860 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69da      	ldr	r2, [r3, #28]
 8003842:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <HAL_RCC_ClockConfig+0x358>)
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800384a:	429a      	cmp	r2, r3
 800384c:	d208      	bcs.n	8003860 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800384e:	4b1a      	ldr	r3, [pc, #104]	; (80038b8 <HAL_RCC_ClockConfig+0x358>)
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	4917      	ldr	r1, [pc, #92]	; (80038b8 <HAL_RCC_ClockConfig+0x358>)
 800385c:	4313      	orrs	r3, r2
 800385e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003860:	f000 f834 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8003864:	4602      	mov	r2, r0
 8003866:	4b14      	ldr	r3, [pc, #80]	; (80038b8 <HAL_RCC_ClockConfig+0x358>)
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	0a1b      	lsrs	r3, r3, #8
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	4912      	ldr	r1, [pc, #72]	; (80038bc <HAL_RCC_ClockConfig+0x35c>)
 8003872:	5ccb      	ldrb	r3, [r1, r3]
 8003874:	f003 031f 	and.w	r3, r3, #31
 8003878:	fa22 f303 	lsr.w	r3, r2, r3
 800387c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800387e:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <HAL_RCC_ClockConfig+0x358>)
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	4a0d      	ldr	r2, [pc, #52]	; (80038bc <HAL_RCC_ClockConfig+0x35c>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
 8003894:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <HAL_RCC_ClockConfig+0x360>)
 8003896:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003898:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <HAL_RCC_ClockConfig+0x364>)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800389e:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <HAL_RCC_ClockConfig+0x368>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fe72 	bl	800258c <HAL_InitTick>
 80038a8:	4603      	mov	r3, r0
 80038aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	58024400 	.word	0x58024400
 80038bc:	08009c78 	.word	0x08009c78
 80038c0:	24000004 	.word	0x24000004
 80038c4:	24000000 	.word	0x24000000
 80038c8:	24000010 	.word	0x24000010

080038cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b089      	sub	sp, #36	; 0x24
 80038d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038d2:	4bb3      	ldr	r3, [pc, #716]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038da:	2b18      	cmp	r3, #24
 80038dc:	f200 8155 	bhi.w	8003b8a <HAL_RCC_GetSysClockFreq+0x2be>
 80038e0:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	0800394d 	.word	0x0800394d
 80038ec:	08003b8b 	.word	0x08003b8b
 80038f0:	08003b8b 	.word	0x08003b8b
 80038f4:	08003b8b 	.word	0x08003b8b
 80038f8:	08003b8b 	.word	0x08003b8b
 80038fc:	08003b8b 	.word	0x08003b8b
 8003900:	08003b8b 	.word	0x08003b8b
 8003904:	08003b8b 	.word	0x08003b8b
 8003908:	08003973 	.word	0x08003973
 800390c:	08003b8b 	.word	0x08003b8b
 8003910:	08003b8b 	.word	0x08003b8b
 8003914:	08003b8b 	.word	0x08003b8b
 8003918:	08003b8b 	.word	0x08003b8b
 800391c:	08003b8b 	.word	0x08003b8b
 8003920:	08003b8b 	.word	0x08003b8b
 8003924:	08003b8b 	.word	0x08003b8b
 8003928:	08003979 	.word	0x08003979
 800392c:	08003b8b 	.word	0x08003b8b
 8003930:	08003b8b 	.word	0x08003b8b
 8003934:	08003b8b 	.word	0x08003b8b
 8003938:	08003b8b 	.word	0x08003b8b
 800393c:	08003b8b 	.word	0x08003b8b
 8003940:	08003b8b 	.word	0x08003b8b
 8003944:	08003b8b 	.word	0x08003b8b
 8003948:	0800397f 	.word	0x0800397f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800394c:	4b94      	ldr	r3, [pc, #592]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	2b00      	cmp	r3, #0
 8003956:	d009      	beq.n	800396c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003958:	4b91      	ldr	r3, [pc, #580]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	08db      	lsrs	r3, r3, #3
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	4a90      	ldr	r2, [pc, #576]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
 8003968:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800396a:	e111      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800396c:	4b8d      	ldr	r3, [pc, #564]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800396e:	61bb      	str	r3, [r7, #24]
    break;
 8003970:	e10e      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003972:	4b8d      	ldr	r3, [pc, #564]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003974:	61bb      	str	r3, [r7, #24]
    break;
 8003976:	e10b      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003978:	4b8c      	ldr	r3, [pc, #560]	; (8003bac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800397a:	61bb      	str	r3, [r7, #24]
    break;
 800397c:	e108      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800397e:	4b88      	ldr	r3, [pc, #544]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003988:	4b85      	ldr	r3, [pc, #532]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003992:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003994:	4b82      	ldr	r3, [pc, #520]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800399e:	4b80      	ldr	r3, [pc, #512]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a2:	08db      	lsrs	r3, r3, #3
 80039a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	fb02 f303 	mul.w	r3, r2, r3
 80039ae:	ee07 3a90 	vmov	s15, r3
 80039b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 80e1 	beq.w	8003b84 <HAL_RCC_GetSysClockFreq+0x2b8>
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	f000 8083 	beq.w	8003ad0 <HAL_RCC_GetSysClockFreq+0x204>
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	f200 80a1 	bhi.w	8003b14 <HAL_RCC_GetSysClockFreq+0x248>
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x114>
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d056      	beq.n	8003a8c <HAL_RCC_GetSysClockFreq+0x1c0>
 80039de:	e099      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039e0:	4b6f      	ldr	r3, [pc, #444]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d02d      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039ec:	4b6c      	ldr	r3, [pc, #432]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	08db      	lsrs	r3, r3, #3
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	4a6b      	ldr	r2, [pc, #428]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
 80039fc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	ee07 3a90 	vmov	s15, r3
 8003a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a16:	4b62      	ldr	r3, [pc, #392]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a26:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a2a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003a46:	e087      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a52:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003bb4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a5a:	4b51      	ldr	r3, [pc, #324]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a62:	ee07 3a90 	vmov	s15, r3
 8003a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a6e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a8a:	e065      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a96:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003bb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a9e:	4b40      	ldr	r3, [pc, #256]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aae:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ab2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ace:	e043      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	ee07 3a90 	vmov	s15, r3
 8003ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ada:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003bbc <HAL_RCC_GetSysClockFreq+0x2f0>
 8003ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ae2:	4b2f      	ldr	r3, [pc, #188]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003af2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003af6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b12:	e021      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003bb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b26:	4b1e      	ldr	r3, [pc, #120]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b3a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003bb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b56:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003b58:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	0a5b      	lsrs	r3, r3, #9
 8003b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b62:	3301      	adds	r3, #1
 8003b64:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	ee07 3a90 	vmov	s15, r3
 8003b6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b70:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b7c:	ee17 3a90 	vmov	r3, s15
 8003b80:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003b82:	e005      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61bb      	str	r3, [r7, #24]
    break;
 8003b88:	e002      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003b8a:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b8c:	61bb      	str	r3, [r7, #24]
    break;
 8003b8e:	bf00      	nop
  }

  return sysclockfreq;
 8003b90:	69bb      	ldr	r3, [r7, #24]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3724      	adds	r7, #36	; 0x24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	58024400 	.word	0x58024400
 8003ba4:	03d09000 	.word	0x03d09000
 8003ba8:	003d0900 	.word	0x003d0900
 8003bac:	007a1200 	.word	0x007a1200
 8003bb0:	46000000 	.word	0x46000000
 8003bb4:	4c742400 	.word	0x4c742400
 8003bb8:	4a742400 	.word	0x4a742400
 8003bbc:	4af42400 	.word	0x4af42400

08003bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003bc6:	f7ff fe81 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	4b10      	ldr	r3, [pc, #64]	; (8003c10 <HAL_RCC_GetHCLKFreq+0x50>)
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	0a1b      	lsrs	r3, r3, #8
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	490f      	ldr	r1, [pc, #60]	; (8003c14 <HAL_RCC_GetHCLKFreq+0x54>)
 8003bd8:	5ccb      	ldrb	r3, [r1, r3]
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	fa22 f303 	lsr.w	r3, r2, r3
 8003be2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003be4:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <HAL_RCC_GetHCLKFreq+0x50>)
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f003 030f 	and.w	r3, r3, #15
 8003bec:	4a09      	ldr	r2, [pc, #36]	; (8003c14 <HAL_RCC_GetHCLKFreq+0x54>)
 8003bee:	5cd3      	ldrb	r3, [r2, r3]
 8003bf0:	f003 031f 	and.w	r3, r3, #31
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfa:	4a07      	ldr	r2, [pc, #28]	; (8003c18 <HAL_RCC_GetHCLKFreq+0x58>)
 8003bfc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bfe:	4a07      	ldr	r2, [pc, #28]	; (8003c1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003c04:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <HAL_RCC_GetHCLKFreq+0x58>)
 8003c06:	681b      	ldr	r3, [r3, #0]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	58024400 	.word	0x58024400
 8003c14:	08009c78 	.word	0x08009c78
 8003c18:	24000004 	.word	0x24000004
 8003c1c:	24000000 	.word	0x24000000

08003c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003c24:	f7ff ffcc 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	091b      	lsrs	r3, r3, #4
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4904      	ldr	r1, [pc, #16]	; (8003c48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	58024400 	.word	0x58024400
 8003c48:	08009c78 	.word	0x08009c78

08003c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003c50:	f7ff ffb6 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	4904      	ldr	r1, [pc, #16]	; (8003c74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c62:	5ccb      	ldrb	r3, [r1, r3]
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	58024400 	.word	0x58024400
 8003c74:	08009c78 	.word	0x08009c78

08003c78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c80:	2300      	movs	r3, #0
 8003c82:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c84:	2300      	movs	r3, #0
 8003c86:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d03f      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c9c:	d02a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ca2:	d824      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ca4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ca8:	d018      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003caa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cae:	d81e      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cb8:	d007      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003cba:	e018      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cbc:	4ba3      	ldr	r3, [pc, #652]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	4aa2      	ldr	r2, [pc, #648]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003cc8:	e015      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	2102      	movs	r1, #2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f001 f9d5 	bl	8005080 <RCCEx_PLL2_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003cda:	e00c      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3324      	adds	r3, #36	; 0x24
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f001 fa7e 	bl	80051e4 <RCCEx_PLL3_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003cec:	e003      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d109      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003cfc:	4b93      	ldr	r3, [pc, #588]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d08:	4990      	ldr	r1, [pc, #576]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	650b      	str	r3, [r1, #80]	; 0x50
 8003d0e:	e001      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
 8003d12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d03d      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d826      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d28:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2e:	bf00      	nop
 8003d30:	08003d45 	.word	0x08003d45
 8003d34:	08003d53 	.word	0x08003d53
 8003d38:	08003d65 	.word	0x08003d65
 8003d3c:	08003d7d 	.word	0x08003d7d
 8003d40:	08003d7d 	.word	0x08003d7d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d44:	4b81      	ldr	r3, [pc, #516]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	4a80      	ldr	r2, [pc, #512]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d50:	e015      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3304      	adds	r3, #4
 8003d56:	2100      	movs	r1, #0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f001 f991 	bl	8005080 <RCCEx_PLL2_Config>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d62:	e00c      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3324      	adds	r3, #36	; 0x24
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f001 fa3a 	bl	80051e4 <RCCEx_PLL3_Config>
 8003d70:	4603      	mov	r3, r0
 8003d72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d74:	e003      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	75fb      	strb	r3, [r7, #23]
      break;
 8003d7a:	e000      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003d7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d109      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d84:	4b71      	ldr	r3, [pc, #452]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d88:	f023 0207 	bic.w	r2, r3, #7
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d90:	496e      	ldr	r1, [pc, #440]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	650b      	str	r3, [r1, #80]	; 0x50
 8003d96:	e001      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d98:	7dfb      	ldrb	r3, [r7, #23]
 8003d9a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d042      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db0:	d02b      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db6:	d825      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003db8:	2bc0      	cmp	r3, #192	; 0xc0
 8003dba:	d028      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003dbc:	2bc0      	cmp	r3, #192	; 0xc0
 8003dbe:	d821      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003dc0:	2b80      	cmp	r3, #128	; 0x80
 8003dc2:	d016      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003dc4:	2b80      	cmp	r3, #128	; 0x80
 8003dc6:	d81d      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003dcc:	2b40      	cmp	r3, #64	; 0x40
 8003dce:	d007      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003dd0:	e018      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd2:	4b5e      	ldr	r3, [pc, #376]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	4a5d      	ldr	r2, [pc, #372]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003dde:	e017      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3304      	adds	r3, #4
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f001 f94a 	bl	8005080 <RCCEx_PLL2_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003df0:	e00e      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3324      	adds	r3, #36	; 0x24
 8003df6:	2100      	movs	r1, #0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f001 f9f3 	bl	80051e4 <RCCEx_PLL3_Config>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003e02:	e005      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	75fb      	strb	r3, [r7, #23]
      break;
 8003e08:	e002      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003e0a:	bf00      	nop
 8003e0c:	e000      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003e16:	4b4d      	ldr	r3, [pc, #308]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e1a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e22:	494a      	ldr	r1, [pc, #296]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	650b      	str	r3, [r1, #80]	; 0x50
 8003e28:	e001      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
 8003e2c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d049      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e44:	d030      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003e46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e4a:	d82a      	bhi.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003e4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e50:	d02c      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003e52:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e56:	d824      	bhi.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e5c:	d018      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003e5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e62:	d81e      	bhi.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003e68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e6c:	d007      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003e6e:	e018      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e70:	4b36      	ldr	r3, [pc, #216]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	4a35      	ldr	r2, [pc, #212]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e7c:	e017      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3304      	adds	r3, #4
 8003e82:	2100      	movs	r1, #0
 8003e84:	4618      	mov	r0, r3
 8003e86:	f001 f8fb 	bl	8005080 <RCCEx_PLL2_Config>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003e8e:	e00e      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3324      	adds	r3, #36	; 0x24
 8003e94:	2100      	movs	r1, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f001 f9a4 	bl	80051e4 <RCCEx_PLL3_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ea0:	e005      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea6:	e002      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003ea8:	bf00      	nop
 8003eaa:	e000      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003eb4:	4b25      	ldr	r3, [pc, #148]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ec2:	4922      	ldr	r1, [pc, #136]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	658b      	str	r3, [r1, #88]	; 0x58
 8003ec8:	e001      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eca:	7dfb      	ldrb	r3, [r7, #23]
 8003ecc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d04b      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ee0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ee4:	d030      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003ee6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eea:	d82a      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003eec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ef0:	d02e      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003ef2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ef6:	d824      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003efc:	d018      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003efe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f02:	d81e      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f0c:	d007      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003f0e:	e018      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f10:	4b0e      	ldr	r3, [pc, #56]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	4a0d      	ldr	r2, [pc, #52]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f1c:	e019      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3304      	adds	r3, #4
 8003f22:	2100      	movs	r1, #0
 8003f24:	4618      	mov	r0, r3
 8003f26:	f001 f8ab 	bl	8005080 <RCCEx_PLL2_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003f2e:	e010      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3324      	adds	r3, #36	; 0x24
 8003f34:	2100      	movs	r1, #0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f001 f954 	bl	80051e4 <RCCEx_PLL3_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f40:	e007      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	75fb      	strb	r3, [r7, #23]
      break;
 8003f46:	e004      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003f48:	bf00      	nop
 8003f4a:	e002      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003f4c:	58024400 	.word	0x58024400
      break;
 8003f50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10a      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f58:	4b99      	ldr	r3, [pc, #612]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f66:	4996      	ldr	r1, [pc, #600]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	658b      	str	r3, [r1, #88]	; 0x58
 8003f6c:	e001      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6e:	7dfb      	ldrb	r3, [r7, #23]
 8003f70:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d032      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f82:	2b30      	cmp	r3, #48	; 0x30
 8003f84:	d01c      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003f86:	2b30      	cmp	r3, #48	; 0x30
 8003f88:	d817      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003f8a:	2b20      	cmp	r3, #32
 8003f8c:	d00c      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d813      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d016      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003f96:	2b10      	cmp	r3, #16
 8003f98:	d10f      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f9a:	4b89      	ldr	r3, [pc, #548]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	4a88      	ldr	r2, [pc, #544]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003fa6:	e00e      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	2102      	movs	r1, #2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f001 f866 	bl	8005080 <RCCEx_PLL2_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003fb8:	e005      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8003fbe:	e002      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003fc0:	bf00      	nop
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d109      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003fcc:	4b7c      	ldr	r3, [pc, #496]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd8:	4979      	ldr	r1, [pc, #484]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003fde:	e001      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
 8003fe2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d047      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ff8:	d030      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003ffa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ffe:	d82a      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004000:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004004:	d02c      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004006:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800400a:	d824      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800400c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004010:	d018      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004016:	d81e      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800401c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004020:	d007      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004022:	e018      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004024:	4b66      	ldr	r3, [pc, #408]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	4a65      	ldr	r2, [pc, #404]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800402a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004030:	e017      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3304      	adds	r3, #4
 8004036:	2100      	movs	r1, #0
 8004038:	4618      	mov	r0, r3
 800403a:	f001 f821 	bl	8005080 <RCCEx_PLL2_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004042:	e00e      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3324      	adds	r3, #36	; 0x24
 8004048:	2100      	movs	r1, #0
 800404a:	4618      	mov	r0, r3
 800404c:	f001 f8ca 	bl	80051e4 <RCCEx_PLL3_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004054:	e005      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	75fb      	strb	r3, [r7, #23]
      break;
 800405a:	e002      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800405c:	bf00      	nop
 800405e:	e000      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004062:	7dfb      	ldrb	r3, [r7, #23]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004068:	4b55      	ldr	r3, [pc, #340]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800406a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	4952      	ldr	r1, [pc, #328]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004076:	4313      	orrs	r3, r2
 8004078:	650b      	str	r3, [r1, #80]	; 0x50
 800407a:	e001      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407c:	7dfb      	ldrb	r3, [r7, #23]
 800407e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d049      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004094:	d02e      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004096:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800409a:	d828      	bhi.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 800409c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040a0:	d02a      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80040a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040a6:	d822      	bhi.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 80040a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040ac:	d026      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x484>
 80040ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040b2:	d81c      	bhi.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 80040b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040b8:	d010      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x464>
 80040ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040be:	d816      	bhi.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01d      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80040c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c8:	d111      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3304      	adds	r3, #4
 80040ce:	2101      	movs	r1, #1
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 ffd5 	bl	8005080 <RCCEx_PLL2_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80040da:	e012      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3324      	adds	r3, #36	; 0x24
 80040e0:	2101      	movs	r1, #1
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 f87e 	bl	80051e4 <RCCEx_PLL3_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80040ec:	e009      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	75fb      	strb	r3, [r7, #23]
      break;
 80040f2:	e006      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80040f4:	bf00      	nop
 80040f6:	e004      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80040f8:	bf00      	nop
 80040fa:	e002      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80040fc:	bf00      	nop
 80040fe:	e000      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004102:	7dfb      	ldrb	r3, [r7, #23]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d109      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004108:	4b2d      	ldr	r3, [pc, #180]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800410a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004114:	492a      	ldr	r1, [pc, #168]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004116:	4313      	orrs	r3, r2
 8004118:	650b      	str	r3, [r1, #80]	; 0x50
 800411a:	e001      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411c:	7dfb      	ldrb	r3, [r7, #23]
 800411e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d04d      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004132:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004136:	d02e      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800413c:	d828      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800413e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004142:	d02a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004148:	d822      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800414a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800414e:	d026      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004150:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004154:	d81c      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800415a:	d010      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800415c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004160:	d816      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01d      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004166:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800416a:	d111      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3304      	adds	r3, #4
 8004170:	2101      	movs	r1, #1
 8004172:	4618      	mov	r0, r3
 8004174:	f000 ff84 	bl	8005080 <RCCEx_PLL2_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800417c:	e012      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3324      	adds	r3, #36	; 0x24
 8004182:	2101      	movs	r1, #1
 8004184:	4618      	mov	r0, r3
 8004186:	f001 f82d 	bl	80051e4 <RCCEx_PLL3_Config>
 800418a:	4603      	mov	r3, r0
 800418c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800418e:	e009      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	75fb      	strb	r3, [r7, #23]
      break;
 8004194:	e006      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004196:	bf00      	nop
 8004198:	e004      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800419a:	bf00      	nop
 800419c:	e002      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800419e:	bf00      	nop
 80041a0:	e000      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80041a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10c      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041aa:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041b8:	4901      	ldr	r1, [pc, #4]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	658b      	str	r3, [r1, #88]	; 0x58
 80041be:	e003      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80041c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
 80041c6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d02f      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041dc:	d00e      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x584>
 80041de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041e2:	d814      	bhi.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x596>
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d015      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80041e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ec:	d10f      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ee:	4baf      	ldr	r3, [pc, #700]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	4aae      	ldr	r2, [pc, #696]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80041fa:	e00c      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3304      	adds	r3, #4
 8004200:	2101      	movs	r1, #1
 8004202:	4618      	mov	r0, r3
 8004204:	f000 ff3c 	bl	8005080 <RCCEx_PLL2_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800420c:	e003      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	75fb      	strb	r3, [r7, #23]
      break;
 8004212:	e000      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004216:	7dfb      	ldrb	r3, [r7, #23]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d109      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800421c:	4ba3      	ldr	r3, [pc, #652]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800421e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004220:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004228:	49a0      	ldr	r1, [pc, #640]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800422a:	4313      	orrs	r3, r2
 800422c:	650b      	str	r3, [r1, #80]	; 0x50
 800422e:	e001      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004230:	7dfb      	ldrb	r3, [r7, #23]
 8004232:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d032      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004244:	2b03      	cmp	r3, #3
 8004246:	d81b      	bhi.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004248:	a201      	add	r2, pc, #4	; (adr r2, 8004250 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800424a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424e:	bf00      	nop
 8004250:	08004287 	.word	0x08004287
 8004254:	08004261 	.word	0x08004261
 8004258:	0800426f 	.word	0x0800426f
 800425c:	08004287 	.word	0x08004287
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004260:	4b92      	ldr	r3, [pc, #584]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	4a91      	ldr	r2, [pc, #580]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800426a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800426c:	e00c      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3304      	adds	r3, #4
 8004272:	2102      	movs	r1, #2
 8004274:	4618      	mov	r0, r3
 8004276:	f000 ff03 	bl	8005080 <RCCEx_PLL2_Config>
 800427a:	4603      	mov	r3, r0
 800427c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800427e:	e003      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	75fb      	strb	r3, [r7, #23]
      break;
 8004284:	e000      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004286:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004288:	7dfb      	ldrb	r3, [r7, #23]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800428e:	4b87      	ldr	r3, [pc, #540]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004292:	f023 0203 	bic.w	r2, r3, #3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	4984      	ldr	r1, [pc, #528]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800429c:	4313      	orrs	r3, r2
 800429e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042a0:	e001      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a2:	7dfb      	ldrb	r3, [r7, #23]
 80042a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 8086 	beq.w	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042b4:	4b7e      	ldr	r3, [pc, #504]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a7d      	ldr	r2, [pc, #500]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80042ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042c0:	f7fe f9ae 	bl	8002620 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042c6:	e009      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c8:	f7fe f9aa 	bl	8002620 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	; 0x64
 80042d4:	d902      	bls.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	75fb      	strb	r3, [r7, #23]
        break;
 80042da:	e005      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042dc:	4b74      	ldr	r3, [pc, #464]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0ef      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d166      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042ee:	4b6f      	ldr	r3, [pc, #444]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042f8:	4053      	eors	r3, r2
 80042fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d013      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004302:	4b6a      	ldr	r3, [pc, #424]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800430c:	4b67      	ldr	r3, [pc, #412]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800430e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004310:	4a66      	ldr	r2, [pc, #408]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004316:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004318:	4b64      	ldr	r3, [pc, #400]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800431a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431c:	4a63      	ldr	r2, [pc, #396]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800431e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004322:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004324:	4a61      	ldr	r2, [pc, #388]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004334:	d115      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004336:	f7fe f973 	bl	8002620 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800433c:	e00b      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433e:	f7fe f96f 	bl	8002620 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	f241 3288 	movw	r2, #5000	; 0x1388
 800434c:	4293      	cmp	r3, r2
 800434e:	d902      	bls.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	75fb      	strb	r3, [r7, #23]
            break;
 8004354:	e005      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004356:	4b55      	ldr	r3, [pc, #340]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0ed      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004362:	7dfb      	ldrb	r3, [r7, #23]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d126      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800436e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004376:	d10d      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004378:	4b4c      	ldr	r3, [pc, #304]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004386:	0919      	lsrs	r1, r3, #4
 8004388:	4b4a      	ldr	r3, [pc, #296]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800438a:	400b      	ands	r3, r1
 800438c:	4947      	ldr	r1, [pc, #284]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800438e:	4313      	orrs	r3, r2
 8004390:	610b      	str	r3, [r1, #16]
 8004392:	e005      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004394:	4b45      	ldr	r3, [pc, #276]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	4a44      	ldr	r2, [pc, #272]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800439a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800439e:	6113      	str	r3, [r2, #16]
 80043a0:	4b42      	ldr	r3, [pc, #264]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ae:	493f      	ldr	r1, [pc, #252]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	670b      	str	r3, [r1, #112]	; 0x70
 80043b4:	e004      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
 80043b8:	75bb      	strb	r3, [r7, #22]
 80043ba:	e001      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043bc:	7dfb      	ldrb	r3, [r7, #23]
 80043be:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8085 	beq.w	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043d2:	2b28      	cmp	r3, #40	; 0x28
 80043d4:	d866      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80043d6:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80043d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043dc:	080044b9 	.word	0x080044b9
 80043e0:	080044a5 	.word	0x080044a5
 80043e4:	080044a5 	.word	0x080044a5
 80043e8:	080044a5 	.word	0x080044a5
 80043ec:	080044a5 	.word	0x080044a5
 80043f0:	080044a5 	.word	0x080044a5
 80043f4:	080044a5 	.word	0x080044a5
 80043f8:	080044a5 	.word	0x080044a5
 80043fc:	08004481 	.word	0x08004481
 8004400:	080044a5 	.word	0x080044a5
 8004404:	080044a5 	.word	0x080044a5
 8004408:	080044a5 	.word	0x080044a5
 800440c:	080044a5 	.word	0x080044a5
 8004410:	080044a5 	.word	0x080044a5
 8004414:	080044a5 	.word	0x080044a5
 8004418:	080044a5 	.word	0x080044a5
 800441c:	08004493 	.word	0x08004493
 8004420:	080044a5 	.word	0x080044a5
 8004424:	080044a5 	.word	0x080044a5
 8004428:	080044a5 	.word	0x080044a5
 800442c:	080044a5 	.word	0x080044a5
 8004430:	080044a5 	.word	0x080044a5
 8004434:	080044a5 	.word	0x080044a5
 8004438:	080044a5 	.word	0x080044a5
 800443c:	080044b9 	.word	0x080044b9
 8004440:	080044a5 	.word	0x080044a5
 8004444:	080044a5 	.word	0x080044a5
 8004448:	080044a5 	.word	0x080044a5
 800444c:	080044a5 	.word	0x080044a5
 8004450:	080044a5 	.word	0x080044a5
 8004454:	080044a5 	.word	0x080044a5
 8004458:	080044a5 	.word	0x080044a5
 800445c:	080044b9 	.word	0x080044b9
 8004460:	080044a5 	.word	0x080044a5
 8004464:	080044a5 	.word	0x080044a5
 8004468:	080044a5 	.word	0x080044a5
 800446c:	080044a5 	.word	0x080044a5
 8004470:	080044a5 	.word	0x080044a5
 8004474:	080044a5 	.word	0x080044a5
 8004478:	080044a5 	.word	0x080044a5
 800447c:	080044b9 	.word	0x080044b9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3304      	adds	r3, #4
 8004484:	2101      	movs	r1, #1
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fdfa 	bl	8005080 <RCCEx_PLL2_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004490:	e013      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3324      	adds	r3, #36	; 0x24
 8004496:	2101      	movs	r1, #1
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fea3 	bl	80051e4 <RCCEx_PLL3_Config>
 800449e:	4603      	mov	r3, r0
 80044a0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80044a2:	e00a      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	75fb      	strb	r3, [r7, #23]
      break;
 80044a8:	e007      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 80044aa:	bf00      	nop
 80044ac:	58024400 	.word	0x58024400
 80044b0:	58024800 	.word	0x58024800
 80044b4:	00ffffcf 	.word	0x00ffffcf
      break;
 80044b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d109      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044c0:	4b96      	ldr	r3, [pc, #600]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80044c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044cc:	4993      	ldr	r1, [pc, #588]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	654b      	str	r3, [r1, #84]	; 0x54
 80044d2:	e001      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d038      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e8:	2b05      	cmp	r3, #5
 80044ea:	d821      	bhi.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80044ec:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80044ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f2:	bf00      	nop
 80044f4:	08004537 	.word	0x08004537
 80044f8:	0800450d 	.word	0x0800450d
 80044fc:	0800451f 	.word	0x0800451f
 8004500:	08004537 	.word	0x08004537
 8004504:	08004537 	.word	0x08004537
 8004508:	08004537 	.word	0x08004537
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3304      	adds	r3, #4
 8004510:	2101      	movs	r1, #1
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fdb4 	bl	8005080 <RCCEx_PLL2_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800451c:	e00c      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3324      	adds	r3, #36	; 0x24
 8004522:	2101      	movs	r1, #1
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fe5d 	bl	80051e4 <RCCEx_PLL3_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800452e:	e003      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	75fb      	strb	r3, [r7, #23]
      break;
 8004534:	e000      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004538:	7dfb      	ldrb	r3, [r7, #23]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800453e:	4b77      	ldr	r3, [pc, #476]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004542:	f023 0207 	bic.w	r2, r3, #7
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800454a:	4974      	ldr	r1, [pc, #464]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800454c:	4313      	orrs	r3, r2
 800454e:	654b      	str	r3, [r1, #84]	; 0x54
 8004550:	e001      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004552:	7dfb      	ldrb	r3, [r7, #23]
 8004554:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d03a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004568:	2b05      	cmp	r3, #5
 800456a:	d821      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800456c:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004572:	bf00      	nop
 8004574:	080045b7 	.word	0x080045b7
 8004578:	0800458d 	.word	0x0800458d
 800457c:	0800459f 	.word	0x0800459f
 8004580:	080045b7 	.word	0x080045b7
 8004584:	080045b7 	.word	0x080045b7
 8004588:	080045b7 	.word	0x080045b7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	2101      	movs	r1, #1
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fd74 	bl	8005080 <RCCEx_PLL2_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800459c:	e00c      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3324      	adds	r3, #36	; 0x24
 80045a2:	2101      	movs	r1, #1
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fe1d 	bl	80051e4 <RCCEx_PLL3_Config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80045ae:	e003      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	75fb      	strb	r3, [r7, #23]
      break;
 80045b4:	e000      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80045b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045b8:	7dfb      	ldrb	r3, [r7, #23]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10a      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045be:	4b57      	ldr	r3, [pc, #348]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80045c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c2:	f023 0207 	bic.w	r2, r3, #7
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045cc:	4953      	ldr	r1, [pc, #332]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	658b      	str	r3, [r1, #88]	; 0x58
 80045d2:	e001      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
 80045d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d04b      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045ee:	d02e      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80045f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045f4:	d828      	bhi.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80045f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fa:	d02a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80045fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004600:	d822      	bhi.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004602:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004606:	d026      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004608:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800460c:	d81c      	bhi.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800460e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004612:	d010      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004618:	d816      	bhi.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d01d      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800461e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004622:	d111      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3304      	adds	r3, #4
 8004628:	2100      	movs	r1, #0
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fd28 	bl	8005080 <RCCEx_PLL2_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004634:	e012      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3324      	adds	r3, #36	; 0x24
 800463a:	2102      	movs	r1, #2
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fdd1 	bl	80051e4 <RCCEx_PLL3_Config>
 8004642:	4603      	mov	r3, r0
 8004644:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004646:	e009      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	75fb      	strb	r3, [r7, #23]
      break;
 800464c:	e006      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800464e:	bf00      	nop
 8004650:	e004      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004652:	bf00      	nop
 8004654:	e002      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004656:	bf00      	nop
 8004658:	e000      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800465a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800465c:	7dfb      	ldrb	r3, [r7, #23]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10a      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004662:	4b2e      	ldr	r3, [pc, #184]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004666:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004670:	492a      	ldr	r1, [pc, #168]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004672:	4313      	orrs	r3, r2
 8004674:	654b      	str	r3, [r1, #84]	; 0x54
 8004676:	e001      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004678:	7dfb      	ldrb	r3, [r7, #23]
 800467a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d04d      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800468e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004692:	d02e      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004694:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004698:	d828      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800469a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469e:	d02a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80046a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a4:	d822      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80046a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046aa:	d026      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80046ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046b0:	d81c      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80046b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b6:	d010      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80046b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046bc:	d816      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d01d      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80046c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c6:	d111      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3304      	adds	r3, #4
 80046cc:	2100      	movs	r1, #0
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fcd6 	bl	8005080 <RCCEx_PLL2_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80046d8:	e012      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3324      	adds	r3, #36	; 0x24
 80046de:	2102      	movs	r1, #2
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fd7f 	bl	80051e4 <RCCEx_PLL3_Config>
 80046e6:	4603      	mov	r3, r0
 80046e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80046ea:	e009      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	75fb      	strb	r3, [r7, #23]
      break;
 80046f0:	e006      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80046f2:	bf00      	nop
 80046f4:	e004      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80046f6:	bf00      	nop
 80046f8:	e002      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80046fa:	bf00      	nop
 80046fc:	e000      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80046fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004700:	7dfb      	ldrb	r3, [r7, #23]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10c      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004706:	4b05      	ldr	r3, [pc, #20]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004714:	4901      	ldr	r1, [pc, #4]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004716:	4313      	orrs	r3, r2
 8004718:	658b      	str	r3, [r1, #88]	; 0x58
 800471a:	e003      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800471c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004720:	7dfb      	ldrb	r3, [r7, #23]
 8004722:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472c:	2b00      	cmp	r3, #0
 800472e:	d04b      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004736:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800473a:	d02e      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800473c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004740:	d828      	bhi.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004746:	d02a      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800474c:	d822      	bhi.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800474e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004752:	d026      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004754:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004758:	d81c      	bhi.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800475a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800475e:	d010      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004764:	d816      	bhi.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01d      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800476a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800476e:	d111      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3304      	adds	r3, #4
 8004774:	2100      	movs	r1, #0
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fc82 	bl	8005080 <RCCEx_PLL2_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004780:	e012      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3324      	adds	r3, #36	; 0x24
 8004786:	2102      	movs	r1, #2
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fd2b 	bl	80051e4 <RCCEx_PLL3_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004792:	e009      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	75fb      	strb	r3, [r7, #23]
      break;
 8004798:	e006      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800479a:	bf00      	nop
 800479c:	e004      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800479e:	bf00      	nop
 80047a0:	e002      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80047a2:	bf00      	nop
 80047a4:	e000      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80047a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10a      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80047ae:	4b9d      	ldr	r3, [pc, #628]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047bc:	4999      	ldr	r1, [pc, #612]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	658b      	str	r3, [r1, #88]	; 0x58
 80047c2:	e001      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
 80047c6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0308 	and.w	r3, r3, #8
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047de:	d10a      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3324      	adds	r3, #36	; 0x24
 80047e4:	2102      	movs	r1, #2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fcfc 	bl	80051e4 <RCCEx_PLL3_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047f6:	4b8b      	ldr	r3, [pc, #556]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004804:	4987      	ldr	r1, [pc, #540]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004806:	4313      	orrs	r3, r2
 8004808:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0310 	and.w	r3, r3, #16
 8004812:	2b00      	cmp	r3, #0
 8004814:	d01a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800481c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004820:	d10a      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3324      	adds	r3, #36	; 0x24
 8004826:	2102      	movs	r1, #2
 8004828:	4618      	mov	r0, r3
 800482a:	f000 fcdb 	bl	80051e4 <RCCEx_PLL3_Config>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004838:	4b7a      	ldr	r3, [pc, #488]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800483a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004846:	4977      	ldr	r1, [pc, #476]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004848:	4313      	orrs	r3, r2
 800484a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d034      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800485e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004862:	d01d      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004864:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004868:	d817      	bhi.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800486e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004872:	d009      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004874:	e011      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3304      	adds	r3, #4
 800487a:	2100      	movs	r1, #0
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fbff 	bl	8005080 <RCCEx_PLL2_Config>
 8004882:	4603      	mov	r3, r0
 8004884:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004886:	e00c      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3324      	adds	r3, #36	; 0x24
 800488c:	2102      	movs	r1, #2
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fca8 	bl	80051e4 <RCCEx_PLL3_Config>
 8004894:	4603      	mov	r3, r0
 8004896:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004898:	e003      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	75fb      	strb	r3, [r7, #23]
      break;
 800489e:	e000      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80048a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048a2:	7dfb      	ldrb	r3, [r7, #23]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048a8:	4b5e      	ldr	r3, [pc, #376]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048b6:	495b      	ldr	r1, [pc, #364]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	658b      	str	r3, [r1, #88]	; 0x58
 80048bc:	e001      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048be:	7dfb      	ldrb	r3, [r7, #23]
 80048c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d033      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048d8:	d01c      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80048da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048de:	d816      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80048e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048e4:	d003      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80048e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048ea:	d007      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80048ec:	e00f      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ee:	4b4d      	ldr	r3, [pc, #308]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	4a4c      	ldr	r2, [pc, #304]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80048fa:	e00c      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3324      	adds	r3, #36	; 0x24
 8004900:	2101      	movs	r1, #1
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fc6e 	bl	80051e4 <RCCEx_PLL3_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800490c:	e003      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	75fb      	strb	r3, [r7, #23]
      break;
 8004912:	e000      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004916:	7dfb      	ldrb	r3, [r7, #23]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800491c:	4b41      	ldr	r3, [pc, #260]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800491e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004920:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800492a:	493e      	ldr	r1, [pc, #248]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800492c:	4313      	orrs	r3, r2
 800492e:	654b      	str	r3, [r1, #84]	; 0x54
 8004930:	e001      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d029      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800494a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494e:	d007      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004950:	e00f      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004952:	4b34      	ldr	r3, [pc, #208]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	4a33      	ldr	r2, [pc, #204]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800495c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800495e:	e00b      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3304      	adds	r3, #4
 8004964:	2102      	movs	r1, #2
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fb8a 	bl	8005080 <RCCEx_PLL2_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004970:	e002      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	75fb      	strb	r3, [r7, #23]
      break;
 8004976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800497e:	4b29      	ldr	r3, [pc, #164]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004982:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498a:	4926      	ldr	r1, [pc, #152]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800498c:	4313      	orrs	r3, r2
 800498e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004990:	e001      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004992:	7dfb      	ldrb	r3, [r7, #23]
 8004994:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3324      	adds	r3, #36	; 0x24
 80049a6:	2102      	movs	r1, #2
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fc1b 	bl	80051e4 <RCCEx_PLL3_Config>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d033      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049cc:	d017      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80049ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049d2:	d811      	bhi.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80049d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d8:	d013      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80049da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049de:	d80b      	bhi.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d010      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80049e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049e8:	d106      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ea:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	4a0d      	ldr	r2, [pc, #52]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80049f6:	e007      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	75fb      	strb	r3, [r7, #23]
      break;
 80049fc:	e004      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80049fe:	bf00      	nop
 8004a00:	e002      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004a02:	bf00      	nop
 8004a04:	e000      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10c      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a0e:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a1a:	4902      	ldr	r1, [pc, #8]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	654b      	str	r3, [r1, #84]	; 0x54
 8004a20:	e004      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004a22:	bf00      	nop
 8004a24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a28:	7dfb      	ldrb	r3, [r7, #23]
 8004a2a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a38:	4b31      	ldr	r3, [pc, #196]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a44:	492e      	ldr	r1, [pc, #184]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a56:	4b2a      	ldr	r3, [pc, #168]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a64:	4926      	ldr	r1, [pc, #152]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d008      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a76:	4b22      	ldr	r3, [pc, #136]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a82:	491f      	ldr	r1, [pc, #124]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00d      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a94:	4b1a      	ldr	r3, [pc, #104]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	4a19      	ldr	r2, [pc, #100]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a9e:	6113      	str	r3, [r2, #16]
 8004aa0:	4b17      	ldr	r3, [pc, #92]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004aaa:	4915      	ldr	r1, [pc, #84]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	da08      	bge.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ab8:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac4:	490e      	ldr	r1, [pc, #56]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ad6:	4b0a      	ldr	r3, [pc, #40]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ada:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae4:	4906      	ldr	r1, [pc, #24]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004aea:	7dbb      	ldrb	r3, [r7, #22]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	e000      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	58024400 	.word	0x58024400

08004b04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b08:	f7ff f85a 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	091b      	lsrs	r3, r3, #4
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	4904      	ldr	r1, [pc, #16]	; (8004b2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b1a:	5ccb      	ldrb	r3, [r1, r3]
 8004b1c:	f003 031f 	and.w	r3, r3, #31
 8004b20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	58024400 	.word	0x58024400
 8004b2c:	08009c78 	.word	0x08009c78

08004b30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b089      	sub	sp, #36	; 0x24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b38:	4ba1      	ldr	r3, [pc, #644]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	f003 0303 	and.w	r3, r3, #3
 8004b40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004b42:	4b9f      	ldr	r3, [pc, #636]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b46:	0b1b      	lsrs	r3, r3, #12
 8004b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b4e:	4b9c      	ldr	r3, [pc, #624]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	091b      	lsrs	r3, r3, #4
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004b5a:	4b99      	ldr	r3, [pc, #612]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5e:	08db      	lsrs	r3, r3, #3
 8004b60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	fb02 f303 	mul.w	r3, r2, r3
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 8111 	beq.w	8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	f000 8083 	beq.w	8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	f200 80a1 	bhi.w	8004cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d056      	beq.n	8004c48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b9a:	e099      	b.n	8004cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b9c:	4b88      	ldr	r3, [pc, #544]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d02d      	beq.n	8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ba8:	4b85      	ldr	r3, [pc, #532]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	08db      	lsrs	r3, r3, #3
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	4a84      	ldr	r2, [pc, #528]	; (8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	ee07 3a90 	vmov	s15, r3
 8004bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bd2:	4b7b      	ldr	r3, [pc, #492]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004be6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004c02:	e087      	b.n	8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004dcc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c16:	4b6a      	ldr	r3, [pc, #424]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c2a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c46:	e065      	b.n	8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	ee07 3a90 	vmov	s15, r3
 8004c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c52:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c5a:	4b59      	ldr	r3, [pc, #356]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c6e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c8a:	e043      	b.n	8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c96:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9e:	4b48      	ldr	r3, [pc, #288]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cb2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cce:	e021      	b.n	8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cda:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce2:	4b37      	ldr	r3, [pc, #220]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cf6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004d14:	4b2a      	ldr	r3, [pc, #168]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	0a5b      	lsrs	r3, r3, #9
 8004d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d3a:	ee17 2a90 	vmov	r2, s15
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004d42:	4b1f      	ldr	r3, [pc, #124]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	0c1b      	lsrs	r3, r3, #16
 8004d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d4c:	ee07 3a90 	vmov	s15, r3
 8004d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d68:	ee17 2a90 	vmov	r2, s15
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004d70:	4b13      	ldr	r3, [pc, #76]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	0e1b      	lsrs	r3, r3, #24
 8004d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d96:	ee17 2a90 	vmov	r2, s15
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d9e:	e008      	b.n	8004db2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	609a      	str	r2, [r3, #8]
}
 8004db2:	bf00      	nop
 8004db4:	3724      	adds	r7, #36	; 0x24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	58024400 	.word	0x58024400
 8004dc4:	03d09000 	.word	0x03d09000
 8004dc8:	46000000 	.word	0x46000000
 8004dcc:	4c742400 	.word	0x4c742400
 8004dd0:	4a742400 	.word	0x4a742400
 8004dd4:	4af42400 	.word	0x4af42400

08004dd8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b089      	sub	sp, #36	; 0x24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004de0:	4ba1      	ldr	r3, [pc, #644]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de4:	f003 0303 	and.w	r3, r3, #3
 8004de8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004dea:	4b9f      	ldr	r3, [pc, #636]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	0d1b      	lsrs	r3, r3, #20
 8004df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004df6:	4b9c      	ldr	r3, [pc, #624]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfa:	0a1b      	lsrs	r3, r3, #8
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004e02:	4b99      	ldr	r3, [pc, #612]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	08db      	lsrs	r3, r3, #3
 8004e08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	fb02 f303 	mul.w	r3, r2, r3
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 8111 	beq.w	8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	f000 8083 	beq.w	8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	f200 80a1 	bhi.w	8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d056      	beq.n	8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e42:	e099      	b.n	8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e44:	4b88      	ldr	r3, [pc, #544]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0320 	and.w	r3, r3, #32
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d02d      	beq.n	8004eac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e50:	4b85      	ldr	r3, [pc, #532]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	08db      	lsrs	r3, r3, #3
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	4a84      	ldr	r2, [pc, #528]	; (800506c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e60:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	ee07 3a90 	vmov	s15, r3
 8004e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e7a:	4b7b      	ldr	r3, [pc, #492]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004eaa:	e087      	b.n	8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005074 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ebe:	4b6a      	ldr	r3, [pc, #424]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ed2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004eee:	e065      	b.n	8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005078 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f02:	4b59      	ldr	r3, [pc, #356]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f16:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f32:	e043      	b.n	8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800507c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f46:	4b48      	ldr	r3, [pc, #288]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4e:	ee07 3a90 	vmov	s15, r3
 8004f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f5a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f76:	e021      	b.n	8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f82:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005078 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f8a:	4b37      	ldr	r3, [pc, #220]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f92:	ee07 3a90 	vmov	s15, r3
 8004f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f9e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004fbc:	4b2a      	ldr	r3, [pc, #168]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	0a5b      	lsrs	r3, r3, #9
 8004fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fe2:	ee17 2a90 	vmov	r2, s15
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004fea:	4b1f      	ldr	r3, [pc, #124]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	0c1b      	lsrs	r3, r3, #16
 8004ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ff4:	ee07 3a90 	vmov	s15, r3
 8004ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005000:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005004:	edd7 6a07 	vldr	s13, [r7, #28]
 8005008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800500c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005010:	ee17 2a90 	vmov	r2, s15
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005018:	4b13      	ldr	r3, [pc, #76]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	0e1b      	lsrs	r3, r3, #24
 800501e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800502e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005032:	edd7 6a07 	vldr	s13, [r7, #28]
 8005036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800503a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800503e:	ee17 2a90 	vmov	r2, s15
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005046:	e008      	b.n	800505a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	609a      	str	r2, [r3, #8]
}
 800505a:	bf00      	nop
 800505c:	3724      	adds	r7, #36	; 0x24
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	58024400 	.word	0x58024400
 800506c:	03d09000 	.word	0x03d09000
 8005070:	46000000 	.word	0x46000000
 8005074:	4c742400 	.word	0x4c742400
 8005078:	4a742400 	.word	0x4a742400
 800507c:	4af42400 	.word	0x4af42400

08005080 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800508e:	4b53      	ldr	r3, [pc, #332]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	2b03      	cmp	r3, #3
 8005098:	d101      	bne.n	800509e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e099      	b.n	80051d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800509e:	4b4f      	ldr	r3, [pc, #316]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a4e      	ldr	r2, [pc, #312]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 80050a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050aa:	f7fd fab9 	bl	8002620 <HAL_GetTick>
 80050ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050b0:	e008      	b.n	80050c4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80050b2:	f7fd fab5 	bl	8002620 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e086      	b.n	80051d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050c4:	4b45      	ldr	r3, [pc, #276]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1f0      	bne.n	80050b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050d0:	4b42      	ldr	r3, [pc, #264]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	031b      	lsls	r3, r3, #12
 80050de:	493f      	ldr	r1, [pc, #252]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	628b      	str	r3, [r1, #40]	; 0x28
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	025b      	lsls	r3, r3, #9
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	3b01      	subs	r3, #1
 8005100:	041b      	lsls	r3, r3, #16
 8005102:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	3b01      	subs	r3, #1
 800510e:	061b      	lsls	r3, r3, #24
 8005110:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005114:	4931      	ldr	r1, [pc, #196]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005116:	4313      	orrs	r3, r2
 8005118:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800511a:	4b30      	ldr	r3, [pc, #192]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 800511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	492d      	ldr	r1, [pc, #180]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005128:	4313      	orrs	r3, r2
 800512a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800512c:	4b2b      	ldr	r3, [pc, #172]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	f023 0220 	bic.w	r2, r3, #32
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	4928      	ldr	r1, [pc, #160]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 800513a:	4313      	orrs	r3, r2
 800513c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800513e:	4b27      	ldr	r3, [pc, #156]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	4a26      	ldr	r2, [pc, #152]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005144:	f023 0310 	bic.w	r3, r3, #16
 8005148:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800514a:	4b24      	ldr	r3, [pc, #144]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 800514c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800514e:	4b24      	ldr	r3, [pc, #144]	; (80051e0 <RCCEx_PLL2_Config+0x160>)
 8005150:	4013      	ands	r3, r2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	69d2      	ldr	r2, [r2, #28]
 8005156:	00d2      	lsls	r2, r2, #3
 8005158:	4920      	ldr	r1, [pc, #128]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 800515a:	4313      	orrs	r3, r2
 800515c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800515e:	4b1f      	ldr	r3, [pc, #124]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	4a1e      	ldr	r2, [pc, #120]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005164:	f043 0310 	orr.w	r3, r3, #16
 8005168:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d106      	bne.n	800517e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005170:	4b1a      	ldr	r3, [pc, #104]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	4a19      	ldr	r2, [pc, #100]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005176:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800517a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800517c:	e00f      	b.n	800519e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d106      	bne.n	8005192 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005184:	4b15      	ldr	r3, [pc, #84]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	4a14      	ldr	r2, [pc, #80]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 800518a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800518e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005190:	e005      	b.n	800519e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005192:	4b12      	ldr	r3, [pc, #72]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	4a11      	ldr	r2, [pc, #68]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005198:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800519c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800519e:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a0e      	ldr	r2, [pc, #56]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 80051a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051aa:	f7fd fa39 	bl	8002620 <HAL_GetTick>
 80051ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051b0:	e008      	b.n	80051c4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80051b2:	f7fd fa35 	bl	8002620 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e006      	b.n	80051d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0f0      	beq.n	80051b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	58024400 	.word	0x58024400
 80051e0:	ffff0007 	.word	0xffff0007

080051e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051f2:	4b53      	ldr	r3, [pc, #332]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80051f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d101      	bne.n	8005202 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e099      	b.n	8005336 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005202:	4b4f      	ldr	r3, [pc, #316]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a4e      	ldr	r2, [pc, #312]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 8005208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800520c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800520e:	f7fd fa07 	bl	8002620 <HAL_GetTick>
 8005212:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005214:	e008      	b.n	8005228 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005216:	f7fd fa03 	bl	8002620 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e086      	b.n	8005336 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005228:	4b45      	ldr	r3, [pc, #276]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1f0      	bne.n	8005216 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005234:	4b42      	ldr	r3, [pc, #264]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 8005236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005238:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	051b      	lsls	r3, r3, #20
 8005242:	493f      	ldr	r1, [pc, #252]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 8005244:	4313      	orrs	r3, r2
 8005246:	628b      	str	r3, [r1, #40]	; 0x28
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	3b01      	subs	r3, #1
 800524e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	3b01      	subs	r3, #1
 8005258:	025b      	lsls	r3, r3, #9
 800525a:	b29b      	uxth	r3, r3
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	3b01      	subs	r3, #1
 8005264:	041b      	lsls	r3, r3, #16
 8005266:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	3b01      	subs	r3, #1
 8005272:	061b      	lsls	r3, r3, #24
 8005274:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005278:	4931      	ldr	r1, [pc, #196]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 800527a:	4313      	orrs	r3, r2
 800527c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800527e:	4b30      	ldr	r3, [pc, #192]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 8005280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005282:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	492d      	ldr	r1, [pc, #180]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 800528c:	4313      	orrs	r3, r2
 800528e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005290:	4b2b      	ldr	r3, [pc, #172]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	4928      	ldr	r1, [pc, #160]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80052a2:	4b27      	ldr	r3, [pc, #156]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a6:	4a26      	ldr	r2, [pc, #152]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052ae:	4b24      	ldr	r3, [pc, #144]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052b2:	4b24      	ldr	r3, [pc, #144]	; (8005344 <RCCEx_PLL3_Config+0x160>)
 80052b4:	4013      	ands	r3, r2
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	69d2      	ldr	r2, [r2, #28]
 80052ba:	00d2      	lsls	r2, r2, #3
 80052bc:	4920      	ldr	r1, [pc, #128]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80052c2:	4b1f      	ldr	r3, [pc, #124]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	4a1e      	ldr	r2, [pc, #120]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d106      	bne.n	80052e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052d4:	4b1a      	ldr	r3, [pc, #104]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d8:	4a19      	ldr	r2, [pc, #100]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052e0:	e00f      	b.n	8005302 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d106      	bne.n	80052f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80052e8:	4b15      	ldr	r3, [pc, #84]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	4a14      	ldr	r2, [pc, #80]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052f4:	e005      	b.n	8005302 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80052f6:	4b12      	ldr	r3, [pc, #72]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	4a11      	ldr	r2, [pc, #68]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005300:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005302:	4b0f      	ldr	r3, [pc, #60]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a0e      	ldr	r2, [pc, #56]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 8005308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800530c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530e:	f7fd f987 	bl	8002620 <HAL_GetTick>
 8005312:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005314:	e008      	b.n	8005328 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005316:	f7fd f983 	bl	8002620 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d901      	bls.n	8005328 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e006      	b.n	8005336 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005328:	4b05      	ldr	r3, [pc, #20]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0f0      	beq.n	8005316 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005334:	7bfb      	ldrb	r3, [r7, #15]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	58024400 	.word	0x58024400
 8005344:	ffff0007 	.word	0xffff0007

08005348 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e0f1      	b.n	800553e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a78      	ldr	r2, [pc, #480]	; (8005548 <HAL_SPI_Init+0x200>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00f      	beq.n	800538a <HAL_SPI_Init+0x42>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a77      	ldr	r2, [pc, #476]	; (800554c <HAL_SPI_Init+0x204>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d00a      	beq.n	800538a <HAL_SPI_Init+0x42>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a75      	ldr	r2, [pc, #468]	; (8005550 <HAL_SPI_Init+0x208>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d005      	beq.n	800538a <HAL_SPI_Init+0x42>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	2b0f      	cmp	r3, #15
 8005384:	d901      	bls.n	800538a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e0d9      	b.n	800553e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 ff66 	bl	800625c <SPI_GetPacketSize>
 8005390:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a6c      	ldr	r2, [pc, #432]	; (8005548 <HAL_SPI_Init+0x200>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00c      	beq.n	80053b6 <HAL_SPI_Init+0x6e>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a6a      	ldr	r2, [pc, #424]	; (800554c <HAL_SPI_Init+0x204>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d007      	beq.n	80053b6 <HAL_SPI_Init+0x6e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a69      	ldr	r2, [pc, #420]	; (8005550 <HAL_SPI_Init+0x208>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d002      	beq.n	80053b6 <HAL_SPI_Init+0x6e>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d811      	bhi.n	80053da <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80053ba:	4a63      	ldr	r2, [pc, #396]	; (8005548 <HAL_SPI_Init+0x200>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d009      	beq.n	80053d4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a61      	ldr	r2, [pc, #388]	; (800554c <HAL_SPI_Init+0x204>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d004      	beq.n	80053d4 <HAL_SPI_Init+0x8c>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a60      	ldr	r2, [pc, #384]	; (8005550 <HAL_SPI_Init+0x208>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d104      	bne.n	80053de <HAL_SPI_Init+0x96>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b10      	cmp	r3, #16
 80053d8:	d901      	bls.n	80053de <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e0af      	b.n	800553e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d106      	bne.n	80053f8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fc fe30 	bl	8002058 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0201 	bic.w	r2, r2, #1
 800540e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800541a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005424:	d119      	bne.n	800545a <HAL_SPI_Init+0x112>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800542e:	d103      	bne.n	8005438 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005434:	2b00      	cmp	r3, #0
 8005436:	d008      	beq.n	800544a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10c      	bne.n	800545a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005444:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005448:	d107      	bne.n	800545a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005458:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69da      	ldr	r2, [r3, #28]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005462:	431a      	orrs	r2, r3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546c:	ea42 0103 	orr.w	r1, r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	431a      	orrs	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ba:	ea42 0103 	orr.w	r1, r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d113      	bne.n	80054fa <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054e4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054f8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0201 	bic.w	r2, r2, #1
 8005508:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	40013000 	.word	0x40013000
 800554c:	40003800 	.word	0x40003800
 8005550:	40003c00 	.word	0x40003c00

08005554 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08a      	sub	sp, #40	; 0x28
 8005558:	af02      	add	r7, sp, #8
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	4613      	mov	r3, r2
 8005562:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3320      	adds	r3, #32
 800556a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_SPI_Transmit+0x2a>
 800557a:	2302      	movs	r3, #2
 800557c:	e1d7      	b.n	800592e <HAL_SPI_Transmit+0x3da>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005586:	f7fd f84b 	bl	8002620 <HAL_GetTick>
 800558a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b01      	cmp	r3, #1
 8005596:	d007      	beq.n	80055a8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005598:	2302      	movs	r3, #2
 800559a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80055a4:	7efb      	ldrb	r3, [r7, #27]
 80055a6:	e1c2      	b.n	800592e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <HAL_SPI_Transmit+0x60>
 80055ae:	88fb      	ldrh	r3, [r7, #6]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d107      	bne.n	80055c4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80055c0:	7efb      	ldrb	r3, [r7, #27]
 80055c2:	e1b4      	b.n	800592e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2203      	movs	r2, #3
 80055c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	88fa      	ldrh	r2, [r7, #6]
 80055de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	88fa      	ldrh	r2, [r7, #6]
 80055e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005614:	d107      	bne.n	8005626 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005624:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	4b96      	ldr	r3, [pc, #600]	; (8005888 <HAL_SPI_Transmit+0x334>)
 800562e:	4013      	ands	r3, r2
 8005630:	88f9      	ldrh	r1, [r7, #6]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	6812      	ldr	r2, [r2, #0]
 8005636:	430b      	orrs	r3, r1
 8005638:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f042 0201 	orr.w	r2, r2, #1
 8005648:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005652:	d107      	bne.n	8005664 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005662:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	2b0f      	cmp	r3, #15
 800566a:	d947      	bls.n	80056fc <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800566c:	e03f      	b.n	80056ee <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b02      	cmp	r3, #2
 800567a:	d114      	bne.n	80056a6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6812      	ldr	r2, [r2, #0]
 8005686:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568c:	1d1a      	adds	r2, r3, #4
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80056a4:	e023      	b.n	80056ee <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056a6:	f7fc ffbb 	bl	8002620 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d803      	bhi.n	80056be <HAL_SPI_Transmit+0x16a>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056bc:	d102      	bne.n	80056c4 <HAL_SPI_Transmit+0x170>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d114      	bne.n	80056ee <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 fcfb 	bl	80060c0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e11f      	b.n	800592e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1b9      	bne.n	800566e <HAL_SPI_Transmit+0x11a>
 80056fa:	e0f2      	b.n	80058e2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	2b07      	cmp	r3, #7
 8005702:	f240 80e7 	bls.w	80058d4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005706:	e05d      	b.n	80057c4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b02      	cmp	r3, #2
 8005714:	d132      	bne.n	800577c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800571c:	b29b      	uxth	r3, r3
 800571e:	2b01      	cmp	r3, #1
 8005720:	d918      	bls.n	8005754 <HAL_SPI_Transmit+0x200>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005726:	2b00      	cmp	r3, #0
 8005728:	d014      	beq.n	8005754 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6812      	ldr	r2, [r2, #0]
 8005734:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573a:	1d1a      	adds	r2, r3, #4
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b02      	subs	r3, #2
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005752:	e037      	b.n	80057c4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005758:	881a      	ldrh	r2, [r3, #0]
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005762:	1c9a      	adds	r2, r3, #2
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800577a:	e023      	b.n	80057c4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800577c:	f7fc ff50 	bl	8002620 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d803      	bhi.n	8005794 <HAL_SPI_Transmit+0x240>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d102      	bne.n	800579a <HAL_SPI_Transmit+0x246>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d114      	bne.n	80057c4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 fc90 	bl	80060c0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e0b4      	b.n	800592e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d19b      	bne.n	8005708 <HAL_SPI_Transmit+0x1b4>
 80057d0:	e087      	b.n	80058e2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d155      	bne.n	800588c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d918      	bls.n	800581e <HAL_SPI_Transmit+0x2ca>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f0:	2b40      	cmp	r3, #64	; 0x40
 80057f2:	d914      	bls.n	800581e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6812      	ldr	r2, [r2, #0]
 80057fe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005804:	1d1a      	adds	r2, r3, #4
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b04      	subs	r3, #4
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800581c:	e05a      	b.n	80058d4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b01      	cmp	r3, #1
 8005828:	d917      	bls.n	800585a <HAL_SPI_Transmit+0x306>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d013      	beq.n	800585a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005836:	881a      	ldrh	r2, [r3, #0]
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005840:	1c9a      	adds	r2, r3, #2
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b02      	subs	r3, #2
 8005850:	b29a      	uxth	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005858:	e03c      	b.n	80058d4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3320      	adds	r3, #32
 8005864:	7812      	ldrb	r2, [r2, #0]
 8005866:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800586c:	1c5a      	adds	r2, r3, #1
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005878:	b29b      	uxth	r3, r3
 800587a:	3b01      	subs	r3, #1
 800587c:	b29a      	uxth	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005884:	e026      	b.n	80058d4 <HAL_SPI_Transmit+0x380>
 8005886:	bf00      	nop
 8005888:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800588c:	f7fc fec8 	bl	8002620 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d803      	bhi.n	80058a4 <HAL_SPI_Transmit+0x350>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a2:	d102      	bne.n	80058aa <HAL_SPI_Transmit+0x356>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d114      	bne.n	80058d4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 fc08 	bl	80060c0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e02c      	b.n	800592e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058da:	b29b      	uxth	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f47f af78 	bne.w	80057d2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2200      	movs	r2, #0
 80058ea:	2108      	movs	r1, #8
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 fc87 	bl	8006200 <SPI_WaitOnFlagUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d007      	beq.n	8005908 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058fe:	f043 0220 	orr.w	r2, r3, #32
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 fbd9 	bl	80060c0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800592c:	7efb      	ldrb	r3, [r7, #27]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3720      	adds	r7, #32
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop

08005938 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b08a      	sub	sp, #40	; 0x28
 800593c:	af02      	add	r7, sp, #8
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	603b      	str	r3, [r7, #0]
 8005944:	4613      	mov	r3, r2
 8005946:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	3330      	adds	r3, #48	; 0x30
 8005952:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800595c:	d112      	bne.n	8005984 <HAL_SPI_Receive+0x4c>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10e      	bne.n	8005984 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2204      	movs	r2, #4
 800596a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800596e:	88fa      	ldrh	r2, [r7, #6]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	4613      	mov	r3, r2
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f978 	bl	8005c70 <HAL_SPI_TransmitReceive>
 8005980:	4603      	mov	r3, r0
 8005982:	e16f      	b.n	8005c64 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800598a:	2b01      	cmp	r3, #1
 800598c:	d101      	bne.n	8005992 <HAL_SPI_Receive+0x5a>
 800598e:	2302      	movs	r3, #2
 8005990:	e168      	b.n	8005c64 <HAL_SPI_Receive+0x32c>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800599a:	f7fc fe41 	bl	8002620 <HAL_GetTick>
 800599e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d007      	beq.n	80059bc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80059ac:	2302      	movs	r3, #2
 80059ae:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80059b8:	7ffb      	ldrb	r3, [r7, #31]
 80059ba:	e153      	b.n	8005c64 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_SPI_Receive+0x90>
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d107      	bne.n	80059d8 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80059d4:	7ffb      	ldrb	r3, [r7, #31]
 80059d6:	e145      	b.n	8005c64 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2204      	movs	r2, #4
 80059dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	88fa      	ldrh	r2, [r7, #6]
 80059f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	88fa      	ldrh	r2, [r7, #6]
 80059fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005a28:	d107      	bne.n	8005a3a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a38:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	4b8a      	ldr	r3, [pc, #552]	; (8005c6c <HAL_SPI_Receive+0x334>)
 8005a42:	4013      	ands	r3, r2
 8005a44:	88f9      	ldrh	r1, [r7, #6]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f042 0201 	orr.w	r2, r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a66:	d107      	bne.n	8005a78 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a76:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	2b0f      	cmp	r3, #15
 8005a7e:	d948      	bls.n	8005b12 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005a80:	e040      	b.n	8005b04 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695a      	ldr	r2, [r3, #20]
 8005a88:	f248 0308 	movw	r3, #32776	; 0x8008
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d014      	beq.n	8005abc <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a9c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa2:	1d1a      	adds	r2, r3, #4
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005aba:	e023      	b.n	8005b04 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005abc:	f7fc fdb0 	bl	8002620 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d803      	bhi.n	8005ad4 <HAL_SPI_Receive+0x19c>
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad2:	d102      	bne.n	8005ada <HAL_SPI_Receive+0x1a2>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d114      	bne.n	8005b04 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 faf0 	bl	80060c0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e0af      	b.n	8005c64 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1b8      	bne.n	8005a82 <HAL_SPI_Receive+0x14a>
 8005b10:	e095      	b.n	8005c3e <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	2b07      	cmp	r3, #7
 8005b18:	f240 808b 	bls.w	8005c32 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005b1c:	e03f      	b.n	8005b9e <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d114      	bne.n	8005b56 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	8812      	ldrh	r2, [r2, #0]
 8005b34:	b292      	uxth	r2, r2
 8005b36:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b3c:	1c9a      	adds	r2, r3, #2
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005b54:	e023      	b.n	8005b9e <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b56:	f7fc fd63 	bl	8002620 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d803      	bhi.n	8005b6e <HAL_SPI_Receive+0x236>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6c:	d102      	bne.n	8005b74 <HAL_SPI_Receive+0x23c>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d114      	bne.n	8005b9e <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 faa3 	bl	80060c0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e062      	b.n	8005c64 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1b9      	bne.n	8005b1e <HAL_SPI_Receive+0x1e6>
 8005baa:	e048      	b.n	8005c3e <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d117      	bne.n	8005bea <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bc6:	7812      	ldrb	r2, [r2, #0]
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005be8:	e023      	b.n	8005c32 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bea:	f7fc fd19 	bl	8002620 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d803      	bhi.n	8005c02 <HAL_SPI_Receive+0x2ca>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c00:	d102      	bne.n	8005c08 <HAL_SPI_Receive+0x2d0>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d114      	bne.n	8005c32 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 fa59 	bl	80060c0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e018      	b.n	8005c64 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1b6      	bne.n	8005bac <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 fa3e 	bl	80060c0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8005c62:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3720      	adds	r7, #32
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	ffff0000 	.word	0xffff0000

08005c70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08e      	sub	sp, #56	; 0x38
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3320      	adds	r3, #32
 8005c8a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3330      	adds	r3, #48	; 0x30
 8005c92:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d101      	bne.n	8005ca2 <HAL_SPI_TransmitReceive+0x32>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e209      	b.n	80060b6 <HAL_SPI_TransmitReceive+0x446>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005caa:	f7fc fcb9 	bl	8002620 <HAL_GetTick>
 8005cae:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8005cb0:	887b      	ldrh	r3, [r7, #2]
 8005cb2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8005cb4:	887b      	ldrh	r3, [r7, #2]
 8005cb6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005cbe:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005cc6:	7efb      	ldrb	r3, [r7, #27]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d014      	beq.n	8005cf6 <HAL_SPI_TransmitReceive+0x86>
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cd2:	d106      	bne.n	8005ce2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d102      	bne.n	8005ce2 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005cdc:	7efb      	ldrb	r3, [r7, #27]
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d009      	beq.n	8005cf6 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005cf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cf4:	e1df      	b.n	80060b6 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d005      	beq.n	8005d08 <HAL_SPI_TransmitReceive+0x98>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <HAL_SPI_TransmitReceive+0x98>
 8005d02:	887b      	ldrh	r3, [r7, #2]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d109      	bne.n	8005d1c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005d16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d1a:	e1cc      	b.n	80060b6 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b04      	cmp	r3, #4
 8005d26:	d003      	beq.n	8005d30 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2205      	movs	r2, #5
 8005d2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	887a      	ldrh	r2, [r7, #2]
 8005d42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	887a      	ldrh	r2, [r7, #2]
 8005d4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	887a      	ldrh	r2, [r7, #2]
 8005d58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	887a      	ldrh	r2, [r7, #2]
 8005d60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	4b82      	ldr	r3, [pc, #520]	; (8005f80 <HAL_SPI_TransmitReceive+0x310>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	8879      	ldrh	r1, [r7, #2]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	6812      	ldr	r2, [r2, #0]
 8005d80:	430b      	orrs	r3, r1
 8005d82:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d9c:	d107      	bne.n	8005dae <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	2b0f      	cmp	r3, #15
 8005db4:	d970      	bls.n	8005e98 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005db6:	e068      	b.n	8005e8a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d11a      	bne.n	8005dfc <HAL_SPI_TransmitReceive+0x18c>
 8005dc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d017      	beq.n	8005dfc <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6812      	ldr	r2, [r2, #0]
 8005dd6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ddc:	1d1a      	adds	r2, r3, #4
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	3b01      	subs	r3, #1
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005dfa:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695a      	ldr	r2, [r3, #20]
 8005e02:	f248 0308 	movw	r3, #32776	; 0x8008
 8005e06:	4013      	ands	r3, r2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01a      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x1d2>
 8005e0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d017      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e1c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e22:	1d1a      	adds	r2, r3, #4
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e40:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e42:	f7fc fbed 	bl	8002620 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d803      	bhi.n	8005e5a <HAL_SPI_TransmitReceive+0x1ea>
 8005e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e58:	d102      	bne.n	8005e60 <HAL_SPI_TransmitReceive+0x1f0>
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d114      	bne.n	8005e8a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f92d 	bl	80060c0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e115      	b.n	80060b6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005e8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d193      	bne.n	8005db8 <HAL_SPI_TransmitReceive+0x148>
 8005e90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d190      	bne.n	8005db8 <HAL_SPI_TransmitReceive+0x148>
 8005e96:	e0e7      	b.n	8006068 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	2b07      	cmp	r3, #7
 8005e9e:	f240 80dd 	bls.w	800605c <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005ea2:	e066      	b.n	8005f72 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d119      	bne.n	8005ee6 <HAL_SPI_TransmitReceive+0x276>
 8005eb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d016      	beq.n	8005ee6 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ebc:	881a      	ldrh	r2, [r3, #0]
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec6:	1c9a      	adds	r2, r3, #2
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ee4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d11a      	bne.n	8005f2a <HAL_SPI_TransmitReceive+0x2ba>
 8005ef4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d017      	beq.n	8005f2a <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005efe:	6a3a      	ldr	r2, [r7, #32]
 8005f00:	8812      	ldrh	r2, [r2, #0]
 8005f02:	b292      	uxth	r2, r2
 8005f04:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f0a:	1c9a      	adds	r2, r3, #2
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f28:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f2a:	f7fc fb79 	bl	8002620 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d803      	bhi.n	8005f42 <HAL_SPI_TransmitReceive+0x2d2>
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f40:	d102      	bne.n	8005f48 <HAL_SPI_TransmitReceive+0x2d8>
 8005f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d114      	bne.n	8005f72 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 f8b9 	bl	80060c0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e0a1      	b.n	80060b6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005f72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d195      	bne.n	8005ea4 <HAL_SPI_TransmitReceive+0x234>
 8005f78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d192      	bne.n	8005ea4 <HAL_SPI_TransmitReceive+0x234>
 8005f7e:	e073      	b.n	8006068 <HAL_SPI_TransmitReceive+0x3f8>
 8005f80:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d11b      	bne.n	8005fca <HAL_SPI_TransmitReceive+0x35a>
 8005f92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d018      	beq.n	8005fca <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3320      	adds	r3, #32
 8005fa2:	7812      	ldrb	r2, [r2, #0]
 8005fa4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005fc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d11d      	bne.n	8006014 <HAL_SPI_TransmitReceive+0x3a4>
 8005fd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d01a      	beq.n	8006014 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fea:	7812      	ldrb	r2, [r2, #0]
 8005fec:	b2d2      	uxtb	r2, r2
 8005fee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ff4:	1c5a      	adds	r2, r3, #1
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006000:	b29b      	uxth	r3, r3
 8006002:	3b01      	subs	r3, #1
 8006004:	b29a      	uxth	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006012:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006014:	f7fc fb04 	bl	8002620 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006020:	429a      	cmp	r2, r3
 8006022:	d803      	bhi.n	800602c <HAL_SPI_TransmitReceive+0x3bc>
 8006024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602a:	d102      	bne.n	8006032 <HAL_SPI_TransmitReceive+0x3c2>
 800602c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602e:	2b00      	cmp	r3, #0
 8006030:	d114      	bne.n	800605c <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 f844 	bl	80060c0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006046:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e02c      	b.n	80060b6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800605c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800605e:	2b00      	cmp	r3, #0
 8006060:	d190      	bne.n	8005f84 <HAL_SPI_TransmitReceive+0x314>
 8006062:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006064:	2b00      	cmp	r3, #0
 8006066:	d18d      	bne.n	8005f84 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	2200      	movs	r2, #0
 8006070:	2108      	movs	r1, #8
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 f8c4 	bl	8006200 <SPI_WaitOnFlagUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d007      	beq.n	800608e <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006084:	f043 0220 	orr.w	r2, r3, #32
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f816 	bl	80060c0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e001      	b.n	80060b6 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 80060b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3730      	adds	r7, #48	; 0x30
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop

080060c0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 0208 	orr.w	r2, r2, #8
 80060de:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0210 	orr.w	r2, r2, #16
 80060ee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0201 	bic.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6919      	ldr	r1, [r3, #16]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4b3c      	ldr	r3, [pc, #240]	; (80061fc <SPI_CloseTransfer+0x13c>)
 800610c:	400b      	ands	r3, r1
 800610e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689a      	ldr	r2, [r3, #8]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800611e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b04      	cmp	r3, #4
 800612a:	d014      	beq.n	8006156 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00f      	beq.n	8006156 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800613c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	699a      	ldr	r2, [r3, #24]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f042 0220 	orr.w	r2, r2, #32
 8006154:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b03      	cmp	r3, #3
 8006160:	d014      	beq.n	800618c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00f      	beq.n	800618c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006172:	f043 0204 	orr.w	r2, r3, #4
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800618a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00f      	beq.n	80061b6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800619c:	f043 0201 	orr.w	r2, r3, #1
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	699a      	ldr	r2, [r3, #24]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00f      	beq.n	80061e0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061c6:	f043 0208 	orr.w	r2, r3, #8
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061de:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80061f0:	bf00      	nop
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	fffffc90 	.word	0xfffffc90

08006200 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	603b      	str	r3, [r7, #0]
 800620c:	4613      	mov	r3, r2
 800620e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006210:	e010      	b.n	8006234 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006212:	f7fc fa05 	bl	8002620 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	429a      	cmp	r2, r3
 8006220:	d803      	bhi.n	800622a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006228:	d102      	bne.n	8006230 <SPI_WaitOnFlagUntilTimeout+0x30>
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e00f      	b.n	8006254 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695a      	ldr	r2, [r3, #20]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	4013      	ands	r3, r2
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	429a      	cmp	r2, r3
 8006242:	bf0c      	ite	eq
 8006244:	2301      	moveq	r3, #1
 8006246:	2300      	movne	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	461a      	mov	r2, r3
 800624c:	79fb      	ldrb	r3, [r7, #7]
 800624e:	429a      	cmp	r2, r3
 8006250:	d0df      	beq.n	8006212 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	3301      	adds	r3, #1
 800626c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	3301      	adds	r3, #1
 8006274:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	3307      	adds	r3, #7
 800627a:	08db      	lsrs	r3, r3, #3
 800627c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	fb02 f303 	mul.w	r3, r2, r3
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e049      	b.n	8006338 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d106      	bne.n	80062be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7fb ff33 	bl	8002124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2202      	movs	r2, #2
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	3304      	adds	r3, #4
 80062ce:	4619      	mov	r1, r3
 80062d0:	4610      	mov	r0, r2
 80062d2:	f000 fbb1 	bl	8006a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e049      	b.n	80063e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d106      	bne.n	800636c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f841 	bl	80063ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3304      	adds	r3, #4
 800637c:	4619      	mov	r1, r3
 800637e:	4610      	mov	r0, r2
 8006380:	f000 fb5a 	bl	8006a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
	...

08006404 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d109      	bne.n	8006428 <HAL_TIM_PWM_Start+0x24>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b01      	cmp	r3, #1
 800641e:	bf14      	ite	ne
 8006420:	2301      	movne	r3, #1
 8006422:	2300      	moveq	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	e03c      	b.n	80064a2 <HAL_TIM_PWM_Start+0x9e>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b04      	cmp	r3, #4
 800642c:	d109      	bne.n	8006442 <HAL_TIM_PWM_Start+0x3e>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b01      	cmp	r3, #1
 8006438:	bf14      	ite	ne
 800643a:	2301      	movne	r3, #1
 800643c:	2300      	moveq	r3, #0
 800643e:	b2db      	uxtb	r3, r3
 8006440:	e02f      	b.n	80064a2 <HAL_TIM_PWM_Start+0x9e>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b08      	cmp	r3, #8
 8006446:	d109      	bne.n	800645c <HAL_TIM_PWM_Start+0x58>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b01      	cmp	r3, #1
 8006452:	bf14      	ite	ne
 8006454:	2301      	movne	r3, #1
 8006456:	2300      	moveq	r3, #0
 8006458:	b2db      	uxtb	r3, r3
 800645a:	e022      	b.n	80064a2 <HAL_TIM_PWM_Start+0x9e>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	2b0c      	cmp	r3, #12
 8006460:	d109      	bne.n	8006476 <HAL_TIM_PWM_Start+0x72>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b01      	cmp	r3, #1
 800646c:	bf14      	ite	ne
 800646e:	2301      	movne	r3, #1
 8006470:	2300      	moveq	r3, #0
 8006472:	b2db      	uxtb	r3, r3
 8006474:	e015      	b.n	80064a2 <HAL_TIM_PWM_Start+0x9e>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b10      	cmp	r3, #16
 800647a:	d109      	bne.n	8006490 <HAL_TIM_PWM_Start+0x8c>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b01      	cmp	r3, #1
 8006486:	bf14      	ite	ne
 8006488:	2301      	movne	r3, #1
 800648a:	2300      	moveq	r3, #0
 800648c:	b2db      	uxtb	r3, r3
 800648e:	e008      	b.n	80064a2 <HAL_TIM_PWM_Start+0x9e>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b01      	cmp	r3, #1
 800649a:	bf14      	ite	ne
 800649c:	2301      	movne	r3, #1
 800649e:	2300      	moveq	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e0a1      	b.n	80065ee <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d104      	bne.n	80064ba <HAL_TIM_PWM_Start+0xb6>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064b8:	e023      	b.n	8006502 <HAL_TIM_PWM_Start+0xfe>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b04      	cmp	r3, #4
 80064be:	d104      	bne.n	80064ca <HAL_TIM_PWM_Start+0xc6>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064c8:	e01b      	b.n	8006502 <HAL_TIM_PWM_Start+0xfe>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d104      	bne.n	80064da <HAL_TIM_PWM_Start+0xd6>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064d8:	e013      	b.n	8006502 <HAL_TIM_PWM_Start+0xfe>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b0c      	cmp	r3, #12
 80064de:	d104      	bne.n	80064ea <HAL_TIM_PWM_Start+0xe6>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064e8:	e00b      	b.n	8006502 <HAL_TIM_PWM_Start+0xfe>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b10      	cmp	r3, #16
 80064ee:	d104      	bne.n	80064fa <HAL_TIM_PWM_Start+0xf6>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064f8:	e003      	b.n	8006502 <HAL_TIM_PWM_Start+0xfe>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2202      	movs	r2, #2
 80064fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2201      	movs	r2, #1
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fea2 	bl	8007254 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a38      	ldr	r2, [pc, #224]	; (80065f8 <HAL_TIM_PWM_Start+0x1f4>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d013      	beq.n	8006542 <HAL_TIM_PWM_Start+0x13e>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a37      	ldr	r2, [pc, #220]	; (80065fc <HAL_TIM_PWM_Start+0x1f8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d00e      	beq.n	8006542 <HAL_TIM_PWM_Start+0x13e>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a35      	ldr	r2, [pc, #212]	; (8006600 <HAL_TIM_PWM_Start+0x1fc>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d009      	beq.n	8006542 <HAL_TIM_PWM_Start+0x13e>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a34      	ldr	r2, [pc, #208]	; (8006604 <HAL_TIM_PWM_Start+0x200>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d004      	beq.n	8006542 <HAL_TIM_PWM_Start+0x13e>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a32      	ldr	r2, [pc, #200]	; (8006608 <HAL_TIM_PWM_Start+0x204>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d101      	bne.n	8006546 <HAL_TIM_PWM_Start+0x142>
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <HAL_TIM_PWM_Start+0x144>
 8006546:	2300      	movs	r3, #0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d007      	beq.n	800655c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800655a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a25      	ldr	r2, [pc, #148]	; (80065f8 <HAL_TIM_PWM_Start+0x1f4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d022      	beq.n	80065ac <HAL_TIM_PWM_Start+0x1a8>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656e:	d01d      	beq.n	80065ac <HAL_TIM_PWM_Start+0x1a8>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a25      	ldr	r2, [pc, #148]	; (800660c <HAL_TIM_PWM_Start+0x208>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d018      	beq.n	80065ac <HAL_TIM_PWM_Start+0x1a8>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a24      	ldr	r2, [pc, #144]	; (8006610 <HAL_TIM_PWM_Start+0x20c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d013      	beq.n	80065ac <HAL_TIM_PWM_Start+0x1a8>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a22      	ldr	r2, [pc, #136]	; (8006614 <HAL_TIM_PWM_Start+0x210>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00e      	beq.n	80065ac <HAL_TIM_PWM_Start+0x1a8>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a1a      	ldr	r2, [pc, #104]	; (80065fc <HAL_TIM_PWM_Start+0x1f8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d009      	beq.n	80065ac <HAL_TIM_PWM_Start+0x1a8>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a1e      	ldr	r2, [pc, #120]	; (8006618 <HAL_TIM_PWM_Start+0x214>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d004      	beq.n	80065ac <HAL_TIM_PWM_Start+0x1a8>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a16      	ldr	r2, [pc, #88]	; (8006600 <HAL_TIM_PWM_Start+0x1fc>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d115      	bne.n	80065d8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	4b1a      	ldr	r3, [pc, #104]	; (800661c <HAL_TIM_PWM_Start+0x218>)
 80065b4:	4013      	ands	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b06      	cmp	r3, #6
 80065bc:	d015      	beq.n	80065ea <HAL_TIM_PWM_Start+0x1e6>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c4:	d011      	beq.n	80065ea <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f042 0201 	orr.w	r2, r2, #1
 80065d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d6:	e008      	b.n	80065ea <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0201 	orr.w	r2, r2, #1
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	e000      	b.n	80065ec <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	40010000 	.word	0x40010000
 80065fc:	40010400 	.word	0x40010400
 8006600:	40014000 	.word	0x40014000
 8006604:	40014400 	.word	0x40014400
 8006608:	40014800 	.word	0x40014800
 800660c:	40000400 	.word	0x40000400
 8006610:	40000800 	.word	0x40000800
 8006614:	40000c00 	.word	0x40000c00
 8006618:	40001800 	.word	0x40001800
 800661c:	00010007 	.word	0x00010007

08006620 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800663a:	2302      	movs	r3, #2
 800663c:	e0ff      	b.n	800683e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b14      	cmp	r3, #20
 800664a:	f200 80f0 	bhi.w	800682e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800664e:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006654:	080066a9 	.word	0x080066a9
 8006658:	0800682f 	.word	0x0800682f
 800665c:	0800682f 	.word	0x0800682f
 8006660:	0800682f 	.word	0x0800682f
 8006664:	080066e9 	.word	0x080066e9
 8006668:	0800682f 	.word	0x0800682f
 800666c:	0800682f 	.word	0x0800682f
 8006670:	0800682f 	.word	0x0800682f
 8006674:	0800672b 	.word	0x0800672b
 8006678:	0800682f 	.word	0x0800682f
 800667c:	0800682f 	.word	0x0800682f
 8006680:	0800682f 	.word	0x0800682f
 8006684:	0800676b 	.word	0x0800676b
 8006688:	0800682f 	.word	0x0800682f
 800668c:	0800682f 	.word	0x0800682f
 8006690:	0800682f 	.word	0x0800682f
 8006694:	080067ad 	.word	0x080067ad
 8006698:	0800682f 	.word	0x0800682f
 800669c:	0800682f 	.word	0x0800682f
 80066a0:	0800682f 	.word	0x0800682f
 80066a4:	080067ed 	.word	0x080067ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68b9      	ldr	r1, [r7, #8]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 fa5c 	bl	8006b6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699a      	ldr	r2, [r3, #24]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0208 	orr.w	r2, r2, #8
 80066c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	699a      	ldr	r2, [r3, #24]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0204 	bic.w	r2, r2, #4
 80066d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6999      	ldr	r1, [r3, #24]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	691a      	ldr	r2, [r3, #16]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	619a      	str	r2, [r3, #24]
      break;
 80066e6:	e0a5      	b.n	8006834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68b9      	ldr	r1, [r7, #8]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 facc 	bl	8006c8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699a      	ldr	r2, [r3, #24]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699a      	ldr	r2, [r3, #24]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6999      	ldr	r1, [r3, #24]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	021a      	lsls	r2, r3, #8
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	430a      	orrs	r2, r1
 8006726:	619a      	str	r2, [r3, #24]
      break;
 8006728:	e084      	b.n	8006834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	4618      	mov	r0, r3
 8006732:	f000 fb35 	bl	8006da0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69da      	ldr	r2, [r3, #28]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f042 0208 	orr.w	r2, r2, #8
 8006744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	69da      	ldr	r2, [r3, #28]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f022 0204 	bic.w	r2, r2, #4
 8006754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69d9      	ldr	r1, [r3, #28]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	61da      	str	r2, [r3, #28]
      break;
 8006768:	e064      	b.n	8006834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	4618      	mov	r0, r3
 8006772:	f000 fb9d 	bl	8006eb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69da      	ldr	r2, [r3, #28]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69d9      	ldr	r1, [r3, #28]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	021a      	lsls	r2, r3, #8
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	61da      	str	r2, [r3, #28]
      break;
 80067aa:	e043      	b.n	8006834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fbe6 	bl	8006f84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0208 	orr.w	r2, r2, #8
 80067c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0204 	bic.w	r2, r2, #4
 80067d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	691a      	ldr	r2, [r3, #16]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067ea:	e023      	b.n	8006834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68b9      	ldr	r1, [r7, #8]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fc2a 	bl	800704c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006806:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006816:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	021a      	lsls	r2, r3, #8
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800682c:	e002      	b.n	8006834 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	75fb      	strb	r3, [r7, #23]
      break;
 8006832:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800683c:	7dfb      	ldrb	r3, [r7, #23]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3718      	adds	r7, #24
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop

08006848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800685c:	2b01      	cmp	r3, #1
 800685e:	d101      	bne.n	8006864 <HAL_TIM_ConfigClockSource+0x1c>
 8006860:	2302      	movs	r3, #2
 8006862:	e0dc      	b.n	8006a1e <HAL_TIM_ConfigClockSource+0x1d6>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	4b6a      	ldr	r3, [pc, #424]	; (8006a28 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006880:	4013      	ands	r3, r2
 8006882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800688a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a64      	ldr	r2, [pc, #400]	; (8006a2c <HAL_TIM_ConfigClockSource+0x1e4>)
 800689a:	4293      	cmp	r3, r2
 800689c:	f000 80a9 	beq.w	80069f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80068a0:	4a62      	ldr	r2, [pc, #392]	; (8006a2c <HAL_TIM_ConfigClockSource+0x1e4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	f200 80ae 	bhi.w	8006a04 <HAL_TIM_ConfigClockSource+0x1bc>
 80068a8:	4a61      	ldr	r2, [pc, #388]	; (8006a30 <HAL_TIM_ConfigClockSource+0x1e8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	f000 80a1 	beq.w	80069f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80068b0:	4a5f      	ldr	r2, [pc, #380]	; (8006a30 <HAL_TIM_ConfigClockSource+0x1e8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	f200 80a6 	bhi.w	8006a04 <HAL_TIM_ConfigClockSource+0x1bc>
 80068b8:	4a5e      	ldr	r2, [pc, #376]	; (8006a34 <HAL_TIM_ConfigClockSource+0x1ec>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	f000 8099 	beq.w	80069f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80068c0:	4a5c      	ldr	r2, [pc, #368]	; (8006a34 <HAL_TIM_ConfigClockSource+0x1ec>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	f200 809e 	bhi.w	8006a04 <HAL_TIM_ConfigClockSource+0x1bc>
 80068c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80068cc:	f000 8091 	beq.w	80069f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80068d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80068d4:	f200 8096 	bhi.w	8006a04 <HAL_TIM_ConfigClockSource+0x1bc>
 80068d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068dc:	f000 8089 	beq.w	80069f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80068e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068e4:	f200 808e 	bhi.w	8006a04 <HAL_TIM_ConfigClockSource+0x1bc>
 80068e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ec:	d03e      	beq.n	800696c <HAL_TIM_ConfigClockSource+0x124>
 80068ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f2:	f200 8087 	bhi.w	8006a04 <HAL_TIM_ConfigClockSource+0x1bc>
 80068f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068fa:	f000 8086 	beq.w	8006a0a <HAL_TIM_ConfigClockSource+0x1c2>
 80068fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006902:	d87f      	bhi.n	8006a04 <HAL_TIM_ConfigClockSource+0x1bc>
 8006904:	2b70      	cmp	r3, #112	; 0x70
 8006906:	d01a      	beq.n	800693e <HAL_TIM_ConfigClockSource+0xf6>
 8006908:	2b70      	cmp	r3, #112	; 0x70
 800690a:	d87b      	bhi.n	8006a04 <HAL_TIM_ConfigClockSource+0x1bc>
 800690c:	2b60      	cmp	r3, #96	; 0x60
 800690e:	d050      	beq.n	80069b2 <HAL_TIM_ConfigClockSource+0x16a>
 8006910:	2b60      	cmp	r3, #96	; 0x60
 8006912:	d877      	bhi.n	8006a04 <HAL_TIM_ConfigClockSource+0x1bc>
 8006914:	2b50      	cmp	r3, #80	; 0x50
 8006916:	d03c      	beq.n	8006992 <HAL_TIM_ConfigClockSource+0x14a>
 8006918:	2b50      	cmp	r3, #80	; 0x50
 800691a:	d873      	bhi.n	8006a04 <HAL_TIM_ConfigClockSource+0x1bc>
 800691c:	2b40      	cmp	r3, #64	; 0x40
 800691e:	d058      	beq.n	80069d2 <HAL_TIM_ConfigClockSource+0x18a>
 8006920:	2b40      	cmp	r3, #64	; 0x40
 8006922:	d86f      	bhi.n	8006a04 <HAL_TIM_ConfigClockSource+0x1bc>
 8006924:	2b30      	cmp	r3, #48	; 0x30
 8006926:	d064      	beq.n	80069f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006928:	2b30      	cmp	r3, #48	; 0x30
 800692a:	d86b      	bhi.n	8006a04 <HAL_TIM_ConfigClockSource+0x1bc>
 800692c:	2b20      	cmp	r3, #32
 800692e:	d060      	beq.n	80069f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006930:	2b20      	cmp	r3, #32
 8006932:	d867      	bhi.n	8006a04 <HAL_TIM_ConfigClockSource+0x1bc>
 8006934:	2b00      	cmp	r3, #0
 8006936:	d05c      	beq.n	80069f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006938:	2b10      	cmp	r3, #16
 800693a:	d05a      	beq.n	80069f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800693c:	e062      	b.n	8006a04 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6818      	ldr	r0, [r3, #0]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	6899      	ldr	r1, [r3, #8]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f000 fc61 	bl	8007214 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006960:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	609a      	str	r2, [r3, #8]
      break;
 800696a:	e04f      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6818      	ldr	r0, [r3, #0]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	6899      	ldr	r1, [r3, #8]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f000 fc4a 	bl	8007214 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689a      	ldr	r2, [r3, #8]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800698e:	609a      	str	r2, [r3, #8]
      break;
 8006990:	e03c      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	6859      	ldr	r1, [r3, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	461a      	mov	r2, r3
 80069a0:	f000 fbba 	bl	8007118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2150      	movs	r1, #80	; 0x50
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fc14 	bl	80071d8 <TIM_ITRx_SetConfig>
      break;
 80069b0:	e02c      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6818      	ldr	r0, [r3, #0]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	6859      	ldr	r1, [r3, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	461a      	mov	r2, r3
 80069c0:	f000 fbd9 	bl	8007176 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2160      	movs	r1, #96	; 0x60
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 fc04 	bl	80071d8 <TIM_ITRx_SetConfig>
      break;
 80069d0:	e01c      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	6859      	ldr	r1, [r3, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	461a      	mov	r2, r3
 80069e0:	f000 fb9a 	bl	8007118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2140      	movs	r1, #64	; 0x40
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fbf4 	bl	80071d8 <TIM_ITRx_SetConfig>
      break;
 80069f0:	e00c      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4619      	mov	r1, r3
 80069fc:	4610      	mov	r0, r2
 80069fe:	f000 fbeb 	bl	80071d8 <TIM_ITRx_SetConfig>
      break;
 8006a02:	e003      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	73fb      	strb	r3, [r7, #15]
      break;
 8006a08:	e000      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006a0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	ffceff88 	.word	0xffceff88
 8006a2c:	00100040 	.word	0x00100040
 8006a30:	00100030 	.word	0x00100030
 8006a34:	00100020 	.word	0x00100020

08006a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a40      	ldr	r2, [pc, #256]	; (8006b4c <TIM_Base_SetConfig+0x114>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d013      	beq.n	8006a78 <TIM_Base_SetConfig+0x40>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a56:	d00f      	beq.n	8006a78 <TIM_Base_SetConfig+0x40>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a3d      	ldr	r2, [pc, #244]	; (8006b50 <TIM_Base_SetConfig+0x118>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00b      	beq.n	8006a78 <TIM_Base_SetConfig+0x40>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a3c      	ldr	r2, [pc, #240]	; (8006b54 <TIM_Base_SetConfig+0x11c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d007      	beq.n	8006a78 <TIM_Base_SetConfig+0x40>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a3b      	ldr	r2, [pc, #236]	; (8006b58 <TIM_Base_SetConfig+0x120>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d003      	beq.n	8006a78 <TIM_Base_SetConfig+0x40>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a3a      	ldr	r2, [pc, #232]	; (8006b5c <TIM_Base_SetConfig+0x124>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d108      	bne.n	8006a8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a2f      	ldr	r2, [pc, #188]	; (8006b4c <TIM_Base_SetConfig+0x114>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d01f      	beq.n	8006ad2 <TIM_Base_SetConfig+0x9a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a98:	d01b      	beq.n	8006ad2 <TIM_Base_SetConfig+0x9a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a2c      	ldr	r2, [pc, #176]	; (8006b50 <TIM_Base_SetConfig+0x118>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d017      	beq.n	8006ad2 <TIM_Base_SetConfig+0x9a>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a2b      	ldr	r2, [pc, #172]	; (8006b54 <TIM_Base_SetConfig+0x11c>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d013      	beq.n	8006ad2 <TIM_Base_SetConfig+0x9a>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a2a      	ldr	r2, [pc, #168]	; (8006b58 <TIM_Base_SetConfig+0x120>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d00f      	beq.n	8006ad2 <TIM_Base_SetConfig+0x9a>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a29      	ldr	r2, [pc, #164]	; (8006b5c <TIM_Base_SetConfig+0x124>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d00b      	beq.n	8006ad2 <TIM_Base_SetConfig+0x9a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a28      	ldr	r2, [pc, #160]	; (8006b60 <TIM_Base_SetConfig+0x128>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d007      	beq.n	8006ad2 <TIM_Base_SetConfig+0x9a>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a27      	ldr	r2, [pc, #156]	; (8006b64 <TIM_Base_SetConfig+0x12c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d003      	beq.n	8006ad2 <TIM_Base_SetConfig+0x9a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a26      	ldr	r2, [pc, #152]	; (8006b68 <TIM_Base_SetConfig+0x130>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d108      	bne.n	8006ae4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a10      	ldr	r2, [pc, #64]	; (8006b4c <TIM_Base_SetConfig+0x114>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d00f      	beq.n	8006b30 <TIM_Base_SetConfig+0xf8>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a12      	ldr	r2, [pc, #72]	; (8006b5c <TIM_Base_SetConfig+0x124>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d00b      	beq.n	8006b30 <TIM_Base_SetConfig+0xf8>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a11      	ldr	r2, [pc, #68]	; (8006b60 <TIM_Base_SetConfig+0x128>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d007      	beq.n	8006b30 <TIM_Base_SetConfig+0xf8>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a10      	ldr	r2, [pc, #64]	; (8006b64 <TIM_Base_SetConfig+0x12c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d003      	beq.n	8006b30 <TIM_Base_SetConfig+0xf8>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a0f      	ldr	r2, [pc, #60]	; (8006b68 <TIM_Base_SetConfig+0x130>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d103      	bne.n	8006b38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	691a      	ldr	r2, [r3, #16]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	615a      	str	r2, [r3, #20]
}
 8006b3e:	bf00      	nop
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	40010000 	.word	0x40010000
 8006b50:	40000400 	.word	0x40000400
 8006b54:	40000800 	.word	0x40000800
 8006b58:	40000c00 	.word	0x40000c00
 8006b5c:	40010400 	.word	0x40010400
 8006b60:	40014000 	.word	0x40014000
 8006b64:	40014400 	.word	0x40014400
 8006b68:	40014800 	.word	0x40014800

08006b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	f023 0201 	bic.w	r2, r3, #1
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	4b37      	ldr	r3, [pc, #220]	; (8006c74 <TIM_OC1_SetConfig+0x108>)
 8006b98:	4013      	ands	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0303 	bic.w	r3, r3, #3
 8006ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f023 0302 	bic.w	r3, r3, #2
 8006bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a2d      	ldr	r2, [pc, #180]	; (8006c78 <TIM_OC1_SetConfig+0x10c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00f      	beq.n	8006be8 <TIM_OC1_SetConfig+0x7c>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a2c      	ldr	r2, [pc, #176]	; (8006c7c <TIM_OC1_SetConfig+0x110>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d00b      	beq.n	8006be8 <TIM_OC1_SetConfig+0x7c>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a2b      	ldr	r2, [pc, #172]	; (8006c80 <TIM_OC1_SetConfig+0x114>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d007      	beq.n	8006be8 <TIM_OC1_SetConfig+0x7c>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a2a      	ldr	r2, [pc, #168]	; (8006c84 <TIM_OC1_SetConfig+0x118>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d003      	beq.n	8006be8 <TIM_OC1_SetConfig+0x7c>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a29      	ldr	r2, [pc, #164]	; (8006c88 <TIM_OC1_SetConfig+0x11c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d10c      	bne.n	8006c02 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f023 0308 	bic.w	r3, r3, #8
 8006bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f023 0304 	bic.w	r3, r3, #4
 8006c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a1c      	ldr	r2, [pc, #112]	; (8006c78 <TIM_OC1_SetConfig+0x10c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00f      	beq.n	8006c2a <TIM_OC1_SetConfig+0xbe>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a1b      	ldr	r2, [pc, #108]	; (8006c7c <TIM_OC1_SetConfig+0x110>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00b      	beq.n	8006c2a <TIM_OC1_SetConfig+0xbe>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a1a      	ldr	r2, [pc, #104]	; (8006c80 <TIM_OC1_SetConfig+0x114>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d007      	beq.n	8006c2a <TIM_OC1_SetConfig+0xbe>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a19      	ldr	r2, [pc, #100]	; (8006c84 <TIM_OC1_SetConfig+0x118>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d003      	beq.n	8006c2a <TIM_OC1_SetConfig+0xbe>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a18      	ldr	r2, [pc, #96]	; (8006c88 <TIM_OC1_SetConfig+0x11c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d111      	bne.n	8006c4e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	621a      	str	r2, [r3, #32]
}
 8006c68:	bf00      	nop
 8006c6a:	371c      	adds	r7, #28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	fffeff8f 	.word	0xfffeff8f
 8006c78:	40010000 	.word	0x40010000
 8006c7c:	40010400 	.word	0x40010400
 8006c80:	40014000 	.word	0x40014000
 8006c84:	40014400 	.word	0x40014400
 8006c88:	40014800 	.word	0x40014800

08006c8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	f023 0210 	bic.w	r2, r3, #16
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	4b34      	ldr	r3, [pc, #208]	; (8006d88 <TIM_OC2_SetConfig+0xfc>)
 8006cb8:	4013      	ands	r3, r2
 8006cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	021b      	lsls	r3, r3, #8
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f023 0320 	bic.w	r3, r3, #32
 8006cd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	011b      	lsls	r3, r3, #4
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a29      	ldr	r2, [pc, #164]	; (8006d8c <TIM_OC2_SetConfig+0x100>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d003      	beq.n	8006cf4 <TIM_OC2_SetConfig+0x68>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a28      	ldr	r2, [pc, #160]	; (8006d90 <TIM_OC2_SetConfig+0x104>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d10d      	bne.n	8006d10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	011b      	lsls	r3, r3, #4
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a1e      	ldr	r2, [pc, #120]	; (8006d8c <TIM_OC2_SetConfig+0x100>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d00f      	beq.n	8006d38 <TIM_OC2_SetConfig+0xac>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a1d      	ldr	r2, [pc, #116]	; (8006d90 <TIM_OC2_SetConfig+0x104>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d00b      	beq.n	8006d38 <TIM_OC2_SetConfig+0xac>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a1c      	ldr	r2, [pc, #112]	; (8006d94 <TIM_OC2_SetConfig+0x108>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d007      	beq.n	8006d38 <TIM_OC2_SetConfig+0xac>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a1b      	ldr	r2, [pc, #108]	; (8006d98 <TIM_OC2_SetConfig+0x10c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d003      	beq.n	8006d38 <TIM_OC2_SetConfig+0xac>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a1a      	ldr	r2, [pc, #104]	; (8006d9c <TIM_OC2_SetConfig+0x110>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d113      	bne.n	8006d60 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	621a      	str	r2, [r3, #32]
}
 8006d7a:	bf00      	nop
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	feff8fff 	.word	0xfeff8fff
 8006d8c:	40010000 	.word	0x40010000
 8006d90:	40010400 	.word	0x40010400
 8006d94:	40014000 	.word	0x40014000
 8006d98:	40014400 	.word	0x40014400
 8006d9c:	40014800 	.word	0x40014800

08006da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	4b33      	ldr	r3, [pc, #204]	; (8006e98 <TIM_OC3_SetConfig+0xf8>)
 8006dcc:	4013      	ands	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 0303 	bic.w	r3, r3, #3
 8006dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	021b      	lsls	r3, r3, #8
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a28      	ldr	r2, [pc, #160]	; (8006e9c <TIM_OC3_SetConfig+0xfc>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d003      	beq.n	8006e06 <TIM_OC3_SetConfig+0x66>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a27      	ldr	r2, [pc, #156]	; (8006ea0 <TIM_OC3_SetConfig+0x100>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d10d      	bne.n	8006e22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	021b      	lsls	r3, r3, #8
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a1d      	ldr	r2, [pc, #116]	; (8006e9c <TIM_OC3_SetConfig+0xfc>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d00f      	beq.n	8006e4a <TIM_OC3_SetConfig+0xaa>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a1c      	ldr	r2, [pc, #112]	; (8006ea0 <TIM_OC3_SetConfig+0x100>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d00b      	beq.n	8006e4a <TIM_OC3_SetConfig+0xaa>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a1b      	ldr	r2, [pc, #108]	; (8006ea4 <TIM_OC3_SetConfig+0x104>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d007      	beq.n	8006e4a <TIM_OC3_SetConfig+0xaa>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a1a      	ldr	r2, [pc, #104]	; (8006ea8 <TIM_OC3_SetConfig+0x108>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d003      	beq.n	8006e4a <TIM_OC3_SetConfig+0xaa>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a19      	ldr	r2, [pc, #100]	; (8006eac <TIM_OC3_SetConfig+0x10c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d113      	bne.n	8006e72 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	011b      	lsls	r3, r3, #4
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	621a      	str	r2, [r3, #32]
}
 8006e8c:	bf00      	nop
 8006e8e:	371c      	adds	r7, #28
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	fffeff8f 	.word	0xfffeff8f
 8006e9c:	40010000 	.word	0x40010000
 8006ea0:	40010400 	.word	0x40010400
 8006ea4:	40014000 	.word	0x40014000
 8006ea8:	40014400 	.word	0x40014400
 8006eac:	40014800 	.word	0x40014800

08006eb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4b24      	ldr	r3, [pc, #144]	; (8006f6c <TIM_OC4_SetConfig+0xbc>)
 8006edc:	4013      	ands	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	021b      	lsls	r3, r3, #8
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006efa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	031b      	lsls	r3, r3, #12
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a19      	ldr	r2, [pc, #100]	; (8006f70 <TIM_OC4_SetConfig+0xc0>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00f      	beq.n	8006f30 <TIM_OC4_SetConfig+0x80>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a18      	ldr	r2, [pc, #96]	; (8006f74 <TIM_OC4_SetConfig+0xc4>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d00b      	beq.n	8006f30 <TIM_OC4_SetConfig+0x80>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a17      	ldr	r2, [pc, #92]	; (8006f78 <TIM_OC4_SetConfig+0xc8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d007      	beq.n	8006f30 <TIM_OC4_SetConfig+0x80>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a16      	ldr	r2, [pc, #88]	; (8006f7c <TIM_OC4_SetConfig+0xcc>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d003      	beq.n	8006f30 <TIM_OC4_SetConfig+0x80>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a15      	ldr	r2, [pc, #84]	; (8006f80 <TIM_OC4_SetConfig+0xd0>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d109      	bne.n	8006f44 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	019b      	lsls	r3, r3, #6
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	621a      	str	r2, [r3, #32]
}
 8006f5e:	bf00      	nop
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	feff8fff 	.word	0xfeff8fff
 8006f70:	40010000 	.word	0x40010000
 8006f74:	40010400 	.word	0x40010400
 8006f78:	40014000 	.word	0x40014000
 8006f7c:	40014400 	.word	0x40014400
 8006f80:	40014800 	.word	0x40014800

08006f84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	4b21      	ldr	r3, [pc, #132]	; (8007034 <TIM_OC5_SetConfig+0xb0>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006fc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	041b      	lsls	r3, r3, #16
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a18      	ldr	r2, [pc, #96]	; (8007038 <TIM_OC5_SetConfig+0xb4>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d00f      	beq.n	8006ffa <TIM_OC5_SetConfig+0x76>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a17      	ldr	r2, [pc, #92]	; (800703c <TIM_OC5_SetConfig+0xb8>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d00b      	beq.n	8006ffa <TIM_OC5_SetConfig+0x76>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a16      	ldr	r2, [pc, #88]	; (8007040 <TIM_OC5_SetConfig+0xbc>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d007      	beq.n	8006ffa <TIM_OC5_SetConfig+0x76>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a15      	ldr	r2, [pc, #84]	; (8007044 <TIM_OC5_SetConfig+0xc0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d003      	beq.n	8006ffa <TIM_OC5_SetConfig+0x76>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a14      	ldr	r2, [pc, #80]	; (8007048 <TIM_OC5_SetConfig+0xc4>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d109      	bne.n	800700e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007000:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	021b      	lsls	r3, r3, #8
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	4313      	orrs	r3, r2
 800700c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	621a      	str	r2, [r3, #32]
}
 8007028:	bf00      	nop
 800702a:	371c      	adds	r7, #28
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	fffeff8f 	.word	0xfffeff8f
 8007038:	40010000 	.word	0x40010000
 800703c:	40010400 	.word	0x40010400
 8007040:	40014000 	.word	0x40014000
 8007044:	40014400 	.word	0x40014400
 8007048:	40014800 	.word	0x40014800

0800704c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4b22      	ldr	r3, [pc, #136]	; (8007100 <TIM_OC6_SetConfig+0xb4>)
 8007078:	4013      	ands	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	021b      	lsls	r3, r3, #8
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	4313      	orrs	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800708e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	051b      	lsls	r3, r3, #20
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	4313      	orrs	r3, r2
 800709a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a19      	ldr	r2, [pc, #100]	; (8007104 <TIM_OC6_SetConfig+0xb8>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00f      	beq.n	80070c4 <TIM_OC6_SetConfig+0x78>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a18      	ldr	r2, [pc, #96]	; (8007108 <TIM_OC6_SetConfig+0xbc>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d00b      	beq.n	80070c4 <TIM_OC6_SetConfig+0x78>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a17      	ldr	r2, [pc, #92]	; (800710c <TIM_OC6_SetConfig+0xc0>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d007      	beq.n	80070c4 <TIM_OC6_SetConfig+0x78>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a16      	ldr	r2, [pc, #88]	; (8007110 <TIM_OC6_SetConfig+0xc4>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d003      	beq.n	80070c4 <TIM_OC6_SetConfig+0x78>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a15      	ldr	r2, [pc, #84]	; (8007114 <TIM_OC6_SetConfig+0xc8>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d109      	bne.n	80070d8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	029b      	lsls	r3, r3, #10
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	621a      	str	r2, [r3, #32]
}
 80070f2:	bf00      	nop
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	feff8fff 	.word	0xfeff8fff
 8007104:	40010000 	.word	0x40010000
 8007108:	40010400 	.word	0x40010400
 800710c:	40014000 	.word	0x40014000
 8007110:	40014400 	.word	0x40014400
 8007114:	40014800 	.word	0x40014800

08007118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	f023 0201 	bic.w	r2, r3, #1
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	4313      	orrs	r3, r2
 800714c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f023 030a 	bic.w	r3, r3, #10
 8007154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	4313      	orrs	r3, r2
 800715c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	621a      	str	r2, [r3, #32]
}
 800716a:	bf00      	nop
 800716c:	371c      	adds	r7, #28
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007176:	b480      	push	{r7}
 8007178:	b087      	sub	sp, #28
 800717a:	af00      	add	r7, sp, #0
 800717c:	60f8      	str	r0, [r7, #12]
 800717e:	60b9      	str	r1, [r7, #8]
 8007180:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	f023 0210 	bic.w	r2, r3, #16
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	031b      	lsls	r3, r3, #12
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	621a      	str	r2, [r3, #32]
}
 80071ca:	bf00      	nop
 80071cc:	371c      	adds	r7, #28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
	...

080071d8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	4b09      	ldr	r3, [pc, #36]	; (8007210 <TIM_ITRx_SetConfig+0x38>)
 80071ec:	4013      	ands	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	f043 0307 	orr.w	r3, r3, #7
 80071fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	609a      	str	r2, [r3, #8]
}
 8007202:	bf00      	nop
 8007204:	3714      	adds	r7, #20
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	ffcfff8f 	.word	0xffcfff8f

08007214 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800722e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	021a      	lsls	r2, r3, #8
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	431a      	orrs	r2, r3
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	4313      	orrs	r3, r2
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	4313      	orrs	r3, r2
 8007240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	609a      	str	r2, [r3, #8]
}
 8007248:	bf00      	nop
 800724a:	371c      	adds	r7, #28
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f003 031f 	and.w	r3, r3, #31
 8007266:	2201      	movs	r2, #1
 8007268:	fa02 f303 	lsl.w	r3, r2, r3
 800726c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6a1a      	ldr	r2, [r3, #32]
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	43db      	mvns	r3, r3
 8007276:	401a      	ands	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a1a      	ldr	r2, [r3, #32]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	f003 031f 	and.w	r3, r3, #31
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	fa01 f303 	lsl.w	r3, r1, r3
 800728c:	431a      	orrs	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	621a      	str	r2, [r3, #32]
}
 8007292:	bf00      	nop
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
	...

080072a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d101      	bne.n	80072b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072b4:	2302      	movs	r3, #2
 80072b6:	e06d      	b.n	8007394 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a30      	ldr	r2, [pc, #192]	; (80073a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d004      	beq.n	80072ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a2f      	ldr	r2, [pc, #188]	; (80073a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d108      	bne.n	80072fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007304:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	4313      	orrs	r3, r2
 800730e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a20      	ldr	r2, [pc, #128]	; (80073a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d022      	beq.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800732a:	d01d      	beq.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a1d      	ldr	r2, [pc, #116]	; (80073a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d018      	beq.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a1c      	ldr	r2, [pc, #112]	; (80073ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d013      	beq.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a1a      	ldr	r2, [pc, #104]	; (80073b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d00e      	beq.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a15      	ldr	r2, [pc, #84]	; (80073a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d009      	beq.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a16      	ldr	r2, [pc, #88]	; (80073b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d004      	beq.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a15      	ldr	r2, [pc, #84]	; (80073b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d10c      	bne.n	8007382 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800736e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	4313      	orrs	r3, r2
 8007378:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	40010000 	.word	0x40010000
 80073a4:	40010400 	.word	0x40010400
 80073a8:	40000400 	.word	0x40000400
 80073ac:	40000800 	.word	0x40000800
 80073b0:	40000c00 	.word	0x40000c00
 80073b4:	40001800 	.word	0x40001800
 80073b8:	40014000 	.word	0x40014000

080073bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e042      	b.n	8007454 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d106      	bne.n	80073e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7fa ff39 	bl	8002258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2224      	movs	r2, #36	; 0x24
 80073ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0201 	bic.w	r2, r2, #1
 80073fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f8c2 	bl	8007588 <UART_SetConfig>
 8007404:	4603      	mov	r3, r0
 8007406:	2b01      	cmp	r3, #1
 8007408:	d101      	bne.n	800740e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e022      	b.n	8007454 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fe1e 	bl	8008058 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800742a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689a      	ldr	r2, [r3, #8]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800743a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 0201 	orr.w	r2, r2, #1
 800744a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fea5 	bl	800819c <UART_CheckIdleState>
 8007452:	4603      	mov	r3, r0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b08a      	sub	sp, #40	; 0x28
 8007460:	af02      	add	r7, sp, #8
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	603b      	str	r3, [r7, #0]
 8007468:	4613      	mov	r3, r2
 800746a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007472:	2b20      	cmp	r3, #32
 8007474:	f040 8083 	bne.w	800757e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d002      	beq.n	8007484 <HAL_UART_Transmit+0x28>
 800747e:	88fb      	ldrh	r3, [r7, #6]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e07b      	b.n	8007580 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800748e:	2b01      	cmp	r3, #1
 8007490:	d101      	bne.n	8007496 <HAL_UART_Transmit+0x3a>
 8007492:	2302      	movs	r3, #2
 8007494:	e074      	b.n	8007580 <HAL_UART_Transmit+0x124>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2221      	movs	r2, #33	; 0x21
 80074aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074ae:	f7fb f8b7 	bl	8002620 <HAL_GetTick>
 80074b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	88fa      	ldrh	r2, [r7, #6]
 80074b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	88fa      	ldrh	r2, [r7, #6]
 80074c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074cc:	d108      	bne.n	80074e0 <HAL_UART_Transmit+0x84>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d104      	bne.n	80074e0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80074d6:	2300      	movs	r3, #0
 80074d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	61bb      	str	r3, [r7, #24]
 80074de:	e003      	b.n	80074e8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80074f0:	e02c      	b.n	800754c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2200      	movs	r2, #0
 80074fa:	2180      	movs	r1, #128	; 0x80
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 fe98 	bl	8008232 <UART_WaitOnFlagUntilTimeout>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e039      	b.n	8007580 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10b      	bne.n	800752a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007520:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	3302      	adds	r3, #2
 8007526:	61bb      	str	r3, [r7, #24]
 8007528:	e007      	b.n	800753a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	781a      	ldrb	r2, [r3, #0]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	3301      	adds	r3, #1
 8007538:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007540:	b29b      	uxth	r3, r3
 8007542:	3b01      	subs	r3, #1
 8007544:	b29a      	uxth	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007552:	b29b      	uxth	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1cc      	bne.n	80074f2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	2200      	movs	r2, #0
 8007560:	2140      	movs	r1, #64	; 0x40
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 fe65 	bl	8008232 <UART_WaitOnFlagUntilTimeout>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e006      	b.n	8007580 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2220      	movs	r2, #32
 8007576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800757a:	2300      	movs	r3, #0
 800757c:	e000      	b.n	8007580 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800757e:	2302      	movs	r3, #2
  }
}
 8007580:	4618      	mov	r0, r3
 8007582:	3720      	adds	r7, #32
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800758c:	b092      	sub	sp, #72	; 0x48
 800758e:	af00      	add	r7, sp, #0
 8007590:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	431a      	orrs	r2, r3
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	431a      	orrs	r2, r3
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	69db      	ldr	r3, [r3, #28]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	4bbe      	ldr	r3, [pc, #760]	; (80078b0 <UART_SetConfig+0x328>)
 80075b8:	4013      	ands	r3, r2
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075c0:	430b      	orrs	r3, r1
 80075c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	68da      	ldr	r2, [r3, #12]
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4ab3      	ldr	r2, [pc, #716]	; (80078b4 <UART_SetConfig+0x32c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d004      	beq.n	80075f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075f0:	4313      	orrs	r3, r2
 80075f2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689a      	ldr	r2, [r3, #8]
 80075fa:	4baf      	ldr	r3, [pc, #700]	; (80078b8 <UART_SetConfig+0x330>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	6812      	ldr	r2, [r2, #0]
 8007602:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007604:	430b      	orrs	r3, r1
 8007606:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760e:	f023 010f 	bic.w	r1, r3, #15
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4aa6      	ldr	r2, [pc, #664]	; (80078bc <UART_SetConfig+0x334>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d177      	bne.n	8007718 <UART_SetConfig+0x190>
 8007628:	4ba5      	ldr	r3, [pc, #660]	; (80078c0 <UART_SetConfig+0x338>)
 800762a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007630:	2b28      	cmp	r3, #40	; 0x28
 8007632:	d86d      	bhi.n	8007710 <UART_SetConfig+0x188>
 8007634:	a201      	add	r2, pc, #4	; (adr r2, 800763c <UART_SetConfig+0xb4>)
 8007636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763a:	bf00      	nop
 800763c:	080076e1 	.word	0x080076e1
 8007640:	08007711 	.word	0x08007711
 8007644:	08007711 	.word	0x08007711
 8007648:	08007711 	.word	0x08007711
 800764c:	08007711 	.word	0x08007711
 8007650:	08007711 	.word	0x08007711
 8007654:	08007711 	.word	0x08007711
 8007658:	08007711 	.word	0x08007711
 800765c:	080076e9 	.word	0x080076e9
 8007660:	08007711 	.word	0x08007711
 8007664:	08007711 	.word	0x08007711
 8007668:	08007711 	.word	0x08007711
 800766c:	08007711 	.word	0x08007711
 8007670:	08007711 	.word	0x08007711
 8007674:	08007711 	.word	0x08007711
 8007678:	08007711 	.word	0x08007711
 800767c:	080076f1 	.word	0x080076f1
 8007680:	08007711 	.word	0x08007711
 8007684:	08007711 	.word	0x08007711
 8007688:	08007711 	.word	0x08007711
 800768c:	08007711 	.word	0x08007711
 8007690:	08007711 	.word	0x08007711
 8007694:	08007711 	.word	0x08007711
 8007698:	08007711 	.word	0x08007711
 800769c:	080076f9 	.word	0x080076f9
 80076a0:	08007711 	.word	0x08007711
 80076a4:	08007711 	.word	0x08007711
 80076a8:	08007711 	.word	0x08007711
 80076ac:	08007711 	.word	0x08007711
 80076b0:	08007711 	.word	0x08007711
 80076b4:	08007711 	.word	0x08007711
 80076b8:	08007711 	.word	0x08007711
 80076bc:	08007701 	.word	0x08007701
 80076c0:	08007711 	.word	0x08007711
 80076c4:	08007711 	.word	0x08007711
 80076c8:	08007711 	.word	0x08007711
 80076cc:	08007711 	.word	0x08007711
 80076d0:	08007711 	.word	0x08007711
 80076d4:	08007711 	.word	0x08007711
 80076d8:	08007711 	.word	0x08007711
 80076dc:	08007709 	.word	0x08007709
 80076e0:	2301      	movs	r3, #1
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076e6:	e222      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80076e8:	2304      	movs	r3, #4
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ee:	e21e      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80076f0:	2308      	movs	r3, #8
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076f6:	e21a      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80076f8:	2310      	movs	r3, #16
 80076fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076fe:	e216      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007700:	2320      	movs	r3, #32
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007706:	e212      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007708:	2340      	movs	r3, #64	; 0x40
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800770e:	e20e      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007710:	2380      	movs	r3, #128	; 0x80
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007716:	e20a      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a69      	ldr	r2, [pc, #420]	; (80078c4 <UART_SetConfig+0x33c>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d130      	bne.n	8007784 <UART_SetConfig+0x1fc>
 8007722:	4b67      	ldr	r3, [pc, #412]	; (80078c0 <UART_SetConfig+0x338>)
 8007724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	2b05      	cmp	r3, #5
 800772c:	d826      	bhi.n	800777c <UART_SetConfig+0x1f4>
 800772e:	a201      	add	r2, pc, #4	; (adr r2, 8007734 <UART_SetConfig+0x1ac>)
 8007730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007734:	0800774d 	.word	0x0800774d
 8007738:	08007755 	.word	0x08007755
 800773c:	0800775d 	.word	0x0800775d
 8007740:	08007765 	.word	0x08007765
 8007744:	0800776d 	.word	0x0800776d
 8007748:	08007775 	.word	0x08007775
 800774c:	2300      	movs	r3, #0
 800774e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007752:	e1ec      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007754:	2304      	movs	r3, #4
 8007756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800775a:	e1e8      	b.n	8007b2e <UART_SetConfig+0x5a6>
 800775c:	2308      	movs	r3, #8
 800775e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007762:	e1e4      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007764:	2310      	movs	r3, #16
 8007766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800776a:	e1e0      	b.n	8007b2e <UART_SetConfig+0x5a6>
 800776c:	2320      	movs	r3, #32
 800776e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007772:	e1dc      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007774:	2340      	movs	r3, #64	; 0x40
 8007776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800777a:	e1d8      	b.n	8007b2e <UART_SetConfig+0x5a6>
 800777c:	2380      	movs	r3, #128	; 0x80
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007782:	e1d4      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a4f      	ldr	r2, [pc, #316]	; (80078c8 <UART_SetConfig+0x340>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d130      	bne.n	80077f0 <UART_SetConfig+0x268>
 800778e:	4b4c      	ldr	r3, [pc, #304]	; (80078c0 <UART_SetConfig+0x338>)
 8007790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	2b05      	cmp	r3, #5
 8007798:	d826      	bhi.n	80077e8 <UART_SetConfig+0x260>
 800779a:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <UART_SetConfig+0x218>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	080077b9 	.word	0x080077b9
 80077a4:	080077c1 	.word	0x080077c1
 80077a8:	080077c9 	.word	0x080077c9
 80077ac:	080077d1 	.word	0x080077d1
 80077b0:	080077d9 	.word	0x080077d9
 80077b4:	080077e1 	.word	0x080077e1
 80077b8:	2300      	movs	r3, #0
 80077ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077be:	e1b6      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80077c0:	2304      	movs	r3, #4
 80077c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077c6:	e1b2      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80077c8:	2308      	movs	r3, #8
 80077ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ce:	e1ae      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80077d0:	2310      	movs	r3, #16
 80077d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077d6:	e1aa      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80077d8:	2320      	movs	r3, #32
 80077da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077de:	e1a6      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80077e0:	2340      	movs	r3, #64	; 0x40
 80077e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077e6:	e1a2      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80077e8:	2380      	movs	r3, #128	; 0x80
 80077ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ee:	e19e      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a35      	ldr	r2, [pc, #212]	; (80078cc <UART_SetConfig+0x344>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d130      	bne.n	800785c <UART_SetConfig+0x2d4>
 80077fa:	4b31      	ldr	r3, [pc, #196]	; (80078c0 <UART_SetConfig+0x338>)
 80077fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077fe:	f003 0307 	and.w	r3, r3, #7
 8007802:	2b05      	cmp	r3, #5
 8007804:	d826      	bhi.n	8007854 <UART_SetConfig+0x2cc>
 8007806:	a201      	add	r2, pc, #4	; (adr r2, 800780c <UART_SetConfig+0x284>)
 8007808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780c:	08007825 	.word	0x08007825
 8007810:	0800782d 	.word	0x0800782d
 8007814:	08007835 	.word	0x08007835
 8007818:	0800783d 	.word	0x0800783d
 800781c:	08007845 	.word	0x08007845
 8007820:	0800784d 	.word	0x0800784d
 8007824:	2300      	movs	r3, #0
 8007826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800782a:	e180      	b.n	8007b2e <UART_SetConfig+0x5a6>
 800782c:	2304      	movs	r3, #4
 800782e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007832:	e17c      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007834:	2308      	movs	r3, #8
 8007836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800783a:	e178      	b.n	8007b2e <UART_SetConfig+0x5a6>
 800783c:	2310      	movs	r3, #16
 800783e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007842:	e174      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007844:	2320      	movs	r3, #32
 8007846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800784a:	e170      	b.n	8007b2e <UART_SetConfig+0x5a6>
 800784c:	2340      	movs	r3, #64	; 0x40
 800784e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007852:	e16c      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007854:	2380      	movs	r3, #128	; 0x80
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800785a:	e168      	b.n	8007b2e <UART_SetConfig+0x5a6>
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a1b      	ldr	r2, [pc, #108]	; (80078d0 <UART_SetConfig+0x348>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d142      	bne.n	80078ec <UART_SetConfig+0x364>
 8007866:	4b16      	ldr	r3, [pc, #88]	; (80078c0 <UART_SetConfig+0x338>)
 8007868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786a:	f003 0307 	and.w	r3, r3, #7
 800786e:	2b05      	cmp	r3, #5
 8007870:	d838      	bhi.n	80078e4 <UART_SetConfig+0x35c>
 8007872:	a201      	add	r2, pc, #4	; (adr r2, 8007878 <UART_SetConfig+0x2f0>)
 8007874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007878:	08007891 	.word	0x08007891
 800787c:	08007899 	.word	0x08007899
 8007880:	080078a1 	.word	0x080078a1
 8007884:	080078a9 	.word	0x080078a9
 8007888:	080078d5 	.word	0x080078d5
 800788c:	080078dd 	.word	0x080078dd
 8007890:	2300      	movs	r3, #0
 8007892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007896:	e14a      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007898:	2304      	movs	r3, #4
 800789a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800789e:	e146      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80078a0:	2308      	movs	r3, #8
 80078a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078a6:	e142      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80078a8:	2310      	movs	r3, #16
 80078aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ae:	e13e      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80078b0:	cfff69f3 	.word	0xcfff69f3
 80078b4:	58000c00 	.word	0x58000c00
 80078b8:	11fff4ff 	.word	0x11fff4ff
 80078bc:	40011000 	.word	0x40011000
 80078c0:	58024400 	.word	0x58024400
 80078c4:	40004400 	.word	0x40004400
 80078c8:	40004800 	.word	0x40004800
 80078cc:	40004c00 	.word	0x40004c00
 80078d0:	40005000 	.word	0x40005000
 80078d4:	2320      	movs	r3, #32
 80078d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078da:	e128      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80078dc:	2340      	movs	r3, #64	; 0x40
 80078de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078e2:	e124      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80078e4:	2380      	movs	r3, #128	; 0x80
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ea:	e120      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4acb      	ldr	r2, [pc, #812]	; (8007c20 <UART_SetConfig+0x698>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d176      	bne.n	80079e4 <UART_SetConfig+0x45c>
 80078f6:	4bcb      	ldr	r3, [pc, #812]	; (8007c24 <UART_SetConfig+0x69c>)
 80078f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078fe:	2b28      	cmp	r3, #40	; 0x28
 8007900:	d86c      	bhi.n	80079dc <UART_SetConfig+0x454>
 8007902:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <UART_SetConfig+0x380>)
 8007904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007908:	080079ad 	.word	0x080079ad
 800790c:	080079dd 	.word	0x080079dd
 8007910:	080079dd 	.word	0x080079dd
 8007914:	080079dd 	.word	0x080079dd
 8007918:	080079dd 	.word	0x080079dd
 800791c:	080079dd 	.word	0x080079dd
 8007920:	080079dd 	.word	0x080079dd
 8007924:	080079dd 	.word	0x080079dd
 8007928:	080079b5 	.word	0x080079b5
 800792c:	080079dd 	.word	0x080079dd
 8007930:	080079dd 	.word	0x080079dd
 8007934:	080079dd 	.word	0x080079dd
 8007938:	080079dd 	.word	0x080079dd
 800793c:	080079dd 	.word	0x080079dd
 8007940:	080079dd 	.word	0x080079dd
 8007944:	080079dd 	.word	0x080079dd
 8007948:	080079bd 	.word	0x080079bd
 800794c:	080079dd 	.word	0x080079dd
 8007950:	080079dd 	.word	0x080079dd
 8007954:	080079dd 	.word	0x080079dd
 8007958:	080079dd 	.word	0x080079dd
 800795c:	080079dd 	.word	0x080079dd
 8007960:	080079dd 	.word	0x080079dd
 8007964:	080079dd 	.word	0x080079dd
 8007968:	080079c5 	.word	0x080079c5
 800796c:	080079dd 	.word	0x080079dd
 8007970:	080079dd 	.word	0x080079dd
 8007974:	080079dd 	.word	0x080079dd
 8007978:	080079dd 	.word	0x080079dd
 800797c:	080079dd 	.word	0x080079dd
 8007980:	080079dd 	.word	0x080079dd
 8007984:	080079dd 	.word	0x080079dd
 8007988:	080079cd 	.word	0x080079cd
 800798c:	080079dd 	.word	0x080079dd
 8007990:	080079dd 	.word	0x080079dd
 8007994:	080079dd 	.word	0x080079dd
 8007998:	080079dd 	.word	0x080079dd
 800799c:	080079dd 	.word	0x080079dd
 80079a0:	080079dd 	.word	0x080079dd
 80079a4:	080079dd 	.word	0x080079dd
 80079a8:	080079d5 	.word	0x080079d5
 80079ac:	2301      	movs	r3, #1
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079b2:	e0bc      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80079b4:	2304      	movs	r3, #4
 80079b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ba:	e0b8      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80079bc:	2308      	movs	r3, #8
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079c2:	e0b4      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80079c4:	2310      	movs	r3, #16
 80079c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ca:	e0b0      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80079cc:	2320      	movs	r3, #32
 80079ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079d2:	e0ac      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80079d4:	2340      	movs	r3, #64	; 0x40
 80079d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079da:	e0a8      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80079dc:	2380      	movs	r3, #128	; 0x80
 80079de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079e2:	e0a4      	b.n	8007b2e <UART_SetConfig+0x5a6>
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a8f      	ldr	r2, [pc, #572]	; (8007c28 <UART_SetConfig+0x6a0>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d130      	bne.n	8007a50 <UART_SetConfig+0x4c8>
 80079ee:	4b8d      	ldr	r3, [pc, #564]	; (8007c24 <UART_SetConfig+0x69c>)
 80079f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f2:	f003 0307 	and.w	r3, r3, #7
 80079f6:	2b05      	cmp	r3, #5
 80079f8:	d826      	bhi.n	8007a48 <UART_SetConfig+0x4c0>
 80079fa:	a201      	add	r2, pc, #4	; (adr r2, 8007a00 <UART_SetConfig+0x478>)
 80079fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a00:	08007a19 	.word	0x08007a19
 8007a04:	08007a21 	.word	0x08007a21
 8007a08:	08007a29 	.word	0x08007a29
 8007a0c:	08007a31 	.word	0x08007a31
 8007a10:	08007a39 	.word	0x08007a39
 8007a14:	08007a41 	.word	0x08007a41
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a1e:	e086      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007a20:	2304      	movs	r3, #4
 8007a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a26:	e082      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007a28:	2308      	movs	r3, #8
 8007a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a2e:	e07e      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007a30:	2310      	movs	r3, #16
 8007a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a36:	e07a      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007a38:	2320      	movs	r3, #32
 8007a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a3e:	e076      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007a40:	2340      	movs	r3, #64	; 0x40
 8007a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a46:	e072      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007a48:	2380      	movs	r3, #128	; 0x80
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a4e:	e06e      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a75      	ldr	r2, [pc, #468]	; (8007c2c <UART_SetConfig+0x6a4>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d130      	bne.n	8007abc <UART_SetConfig+0x534>
 8007a5a:	4b72      	ldr	r3, [pc, #456]	; (8007c24 <UART_SetConfig+0x69c>)
 8007a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a5e:	f003 0307 	and.w	r3, r3, #7
 8007a62:	2b05      	cmp	r3, #5
 8007a64:	d826      	bhi.n	8007ab4 <UART_SetConfig+0x52c>
 8007a66:	a201      	add	r2, pc, #4	; (adr r2, 8007a6c <UART_SetConfig+0x4e4>)
 8007a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6c:	08007a85 	.word	0x08007a85
 8007a70:	08007a8d 	.word	0x08007a8d
 8007a74:	08007a95 	.word	0x08007a95
 8007a78:	08007a9d 	.word	0x08007a9d
 8007a7c:	08007aa5 	.word	0x08007aa5
 8007a80:	08007aad 	.word	0x08007aad
 8007a84:	2300      	movs	r3, #0
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a8a:	e050      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007a8c:	2304      	movs	r3, #4
 8007a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a92:	e04c      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007a94:	2308      	movs	r3, #8
 8007a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a9a:	e048      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007a9c:	2310      	movs	r3, #16
 8007a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aa2:	e044      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007aa4:	2320      	movs	r3, #32
 8007aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aaa:	e040      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007aac:	2340      	movs	r3, #64	; 0x40
 8007aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ab2:	e03c      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007ab4:	2380      	movs	r3, #128	; 0x80
 8007ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aba:	e038      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a5b      	ldr	r2, [pc, #364]	; (8007c30 <UART_SetConfig+0x6a8>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d130      	bne.n	8007b28 <UART_SetConfig+0x5a0>
 8007ac6:	4b57      	ldr	r3, [pc, #348]	; (8007c24 <UART_SetConfig+0x69c>)
 8007ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	2b05      	cmp	r3, #5
 8007ad0:	d826      	bhi.n	8007b20 <UART_SetConfig+0x598>
 8007ad2:	a201      	add	r2, pc, #4	; (adr r2, 8007ad8 <UART_SetConfig+0x550>)
 8007ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad8:	08007af1 	.word	0x08007af1
 8007adc:	08007af9 	.word	0x08007af9
 8007ae0:	08007b01 	.word	0x08007b01
 8007ae4:	08007b09 	.word	0x08007b09
 8007ae8:	08007b11 	.word	0x08007b11
 8007aec:	08007b19 	.word	0x08007b19
 8007af0:	2302      	movs	r3, #2
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007af6:	e01a      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007af8:	2304      	movs	r3, #4
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007afe:	e016      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007b00:	2308      	movs	r3, #8
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b06:	e012      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007b08:	2310      	movs	r3, #16
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b0e:	e00e      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007b10:	2320      	movs	r3, #32
 8007b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b16:	e00a      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007b18:	2340      	movs	r3, #64	; 0x40
 8007b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b1e:	e006      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007b20:	2380      	movs	r3, #128	; 0x80
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b26:	e002      	b.n	8007b2e <UART_SetConfig+0x5a6>
 8007b28:	2380      	movs	r3, #128	; 0x80
 8007b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a3f      	ldr	r2, [pc, #252]	; (8007c30 <UART_SetConfig+0x6a8>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	f040 80f8 	bne.w	8007d2a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007b3e:	2b20      	cmp	r3, #32
 8007b40:	dc46      	bgt.n	8007bd0 <UART_SetConfig+0x648>
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	f2c0 8082 	blt.w	8007c4c <UART_SetConfig+0x6c4>
 8007b48:	3b02      	subs	r3, #2
 8007b4a:	2b1e      	cmp	r3, #30
 8007b4c:	d87e      	bhi.n	8007c4c <UART_SetConfig+0x6c4>
 8007b4e:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <UART_SetConfig+0x5cc>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007bd7 	.word	0x08007bd7
 8007b58:	08007c4d 	.word	0x08007c4d
 8007b5c:	08007bdf 	.word	0x08007bdf
 8007b60:	08007c4d 	.word	0x08007c4d
 8007b64:	08007c4d 	.word	0x08007c4d
 8007b68:	08007c4d 	.word	0x08007c4d
 8007b6c:	08007bef 	.word	0x08007bef
 8007b70:	08007c4d 	.word	0x08007c4d
 8007b74:	08007c4d 	.word	0x08007c4d
 8007b78:	08007c4d 	.word	0x08007c4d
 8007b7c:	08007c4d 	.word	0x08007c4d
 8007b80:	08007c4d 	.word	0x08007c4d
 8007b84:	08007c4d 	.word	0x08007c4d
 8007b88:	08007c4d 	.word	0x08007c4d
 8007b8c:	08007bff 	.word	0x08007bff
 8007b90:	08007c4d 	.word	0x08007c4d
 8007b94:	08007c4d 	.word	0x08007c4d
 8007b98:	08007c4d 	.word	0x08007c4d
 8007b9c:	08007c4d 	.word	0x08007c4d
 8007ba0:	08007c4d 	.word	0x08007c4d
 8007ba4:	08007c4d 	.word	0x08007c4d
 8007ba8:	08007c4d 	.word	0x08007c4d
 8007bac:	08007c4d 	.word	0x08007c4d
 8007bb0:	08007c4d 	.word	0x08007c4d
 8007bb4:	08007c4d 	.word	0x08007c4d
 8007bb8:	08007c4d 	.word	0x08007c4d
 8007bbc:	08007c4d 	.word	0x08007c4d
 8007bc0:	08007c4d 	.word	0x08007c4d
 8007bc4:	08007c4d 	.word	0x08007c4d
 8007bc8:	08007c4d 	.word	0x08007c4d
 8007bcc:	08007c3f 	.word	0x08007c3f
 8007bd0:	2b40      	cmp	r3, #64	; 0x40
 8007bd2:	d037      	beq.n	8007c44 <UART_SetConfig+0x6bc>
 8007bd4:	e03a      	b.n	8007c4c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007bd6:	f7fc ff95 	bl	8004b04 <HAL_RCCEx_GetD3PCLK1Freq>
 8007bda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007bdc:	e03c      	b.n	8007c58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fc ffa4 	bl	8004b30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bec:	e034      	b.n	8007c58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bee:	f107 0318 	add.w	r3, r7, #24
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fd f8f0 	bl	8004dd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bfc:	e02c      	b.n	8007c58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bfe:	4b09      	ldr	r3, [pc, #36]	; (8007c24 <UART_SetConfig+0x69c>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d016      	beq.n	8007c38 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c0a:	4b06      	ldr	r3, [pc, #24]	; (8007c24 <UART_SetConfig+0x69c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	08db      	lsrs	r3, r3, #3
 8007c10:	f003 0303 	and.w	r3, r3, #3
 8007c14:	4a07      	ldr	r2, [pc, #28]	; (8007c34 <UART_SetConfig+0x6ac>)
 8007c16:	fa22 f303 	lsr.w	r3, r2, r3
 8007c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c1c:	e01c      	b.n	8007c58 <UART_SetConfig+0x6d0>
 8007c1e:	bf00      	nop
 8007c20:	40011400 	.word	0x40011400
 8007c24:	58024400 	.word	0x58024400
 8007c28:	40007800 	.word	0x40007800
 8007c2c:	40007c00 	.word	0x40007c00
 8007c30:	58000c00 	.word	0x58000c00
 8007c34:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007c38:	4b9d      	ldr	r3, [pc, #628]	; (8007eb0 <UART_SetConfig+0x928>)
 8007c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c3c:	e00c      	b.n	8007c58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c3e:	4b9d      	ldr	r3, [pc, #628]	; (8007eb4 <UART_SetConfig+0x92c>)
 8007c40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c42:	e009      	b.n	8007c58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c4a:	e005      	b.n	8007c58 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007c56:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 81de 	beq.w	800801c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	4a94      	ldr	r2, [pc, #592]	; (8007eb8 <UART_SetConfig+0x930>)
 8007c66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c72:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	005b      	lsls	r3, r3, #1
 8007c7c:	4413      	add	r3, r2
 8007c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d305      	bcc.n	8007c90 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d903      	bls.n	8007c98 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007c96:	e1c1      	b.n	800801c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	60bb      	str	r3, [r7, #8]
 8007c9e:	60fa      	str	r2, [r7, #12]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca4:	4a84      	ldr	r2, [pc, #528]	; (8007eb8 <UART_SetConfig+0x930>)
 8007ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	2200      	movs	r2, #0
 8007cae:	603b      	str	r3, [r7, #0]
 8007cb0:	607a      	str	r2, [r7, #4]
 8007cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007cba:	f7f8 fb69 	bl	8000390 <__aeabi_uldivmod>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	f04f 0200 	mov.w	r2, #0
 8007cca:	f04f 0300 	mov.w	r3, #0
 8007cce:	020b      	lsls	r3, r1, #8
 8007cd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007cd4:	0202      	lsls	r2, r0, #8
 8007cd6:	6979      	ldr	r1, [r7, #20]
 8007cd8:	6849      	ldr	r1, [r1, #4]
 8007cda:	0849      	lsrs	r1, r1, #1
 8007cdc:	2000      	movs	r0, #0
 8007cde:	460c      	mov	r4, r1
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	eb12 0804 	adds.w	r8, r2, r4
 8007ce6:	eb43 0905 	adc.w	r9, r3, r5
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	469a      	mov	sl, r3
 8007cf2:	4693      	mov	fp, r2
 8007cf4:	4652      	mov	r2, sl
 8007cf6:	465b      	mov	r3, fp
 8007cf8:	4640      	mov	r0, r8
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	f7f8 fb48 	bl	8000390 <__aeabi_uldivmod>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	4613      	mov	r3, r2
 8007d06:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d0e:	d308      	bcc.n	8007d22 <UART_SetConfig+0x79a>
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d16:	d204      	bcs.n	8007d22 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d1e:	60da      	str	r2, [r3, #12]
 8007d20:	e17c      	b.n	800801c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007d28:	e178      	b.n	800801c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d32:	f040 80c5 	bne.w	8007ec0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007d36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d3a:	2b20      	cmp	r3, #32
 8007d3c:	dc48      	bgt.n	8007dd0 <UART_SetConfig+0x848>
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	db7b      	blt.n	8007e3a <UART_SetConfig+0x8b2>
 8007d42:	2b20      	cmp	r3, #32
 8007d44:	d879      	bhi.n	8007e3a <UART_SetConfig+0x8b2>
 8007d46:	a201      	add	r2, pc, #4	; (adr r2, 8007d4c <UART_SetConfig+0x7c4>)
 8007d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4c:	08007dd7 	.word	0x08007dd7
 8007d50:	08007ddf 	.word	0x08007ddf
 8007d54:	08007e3b 	.word	0x08007e3b
 8007d58:	08007e3b 	.word	0x08007e3b
 8007d5c:	08007de7 	.word	0x08007de7
 8007d60:	08007e3b 	.word	0x08007e3b
 8007d64:	08007e3b 	.word	0x08007e3b
 8007d68:	08007e3b 	.word	0x08007e3b
 8007d6c:	08007df7 	.word	0x08007df7
 8007d70:	08007e3b 	.word	0x08007e3b
 8007d74:	08007e3b 	.word	0x08007e3b
 8007d78:	08007e3b 	.word	0x08007e3b
 8007d7c:	08007e3b 	.word	0x08007e3b
 8007d80:	08007e3b 	.word	0x08007e3b
 8007d84:	08007e3b 	.word	0x08007e3b
 8007d88:	08007e3b 	.word	0x08007e3b
 8007d8c:	08007e07 	.word	0x08007e07
 8007d90:	08007e3b 	.word	0x08007e3b
 8007d94:	08007e3b 	.word	0x08007e3b
 8007d98:	08007e3b 	.word	0x08007e3b
 8007d9c:	08007e3b 	.word	0x08007e3b
 8007da0:	08007e3b 	.word	0x08007e3b
 8007da4:	08007e3b 	.word	0x08007e3b
 8007da8:	08007e3b 	.word	0x08007e3b
 8007dac:	08007e3b 	.word	0x08007e3b
 8007db0:	08007e3b 	.word	0x08007e3b
 8007db4:	08007e3b 	.word	0x08007e3b
 8007db8:	08007e3b 	.word	0x08007e3b
 8007dbc:	08007e3b 	.word	0x08007e3b
 8007dc0:	08007e3b 	.word	0x08007e3b
 8007dc4:	08007e3b 	.word	0x08007e3b
 8007dc8:	08007e3b 	.word	0x08007e3b
 8007dcc:	08007e2d 	.word	0x08007e2d
 8007dd0:	2b40      	cmp	r3, #64	; 0x40
 8007dd2:	d02e      	beq.n	8007e32 <UART_SetConfig+0x8aa>
 8007dd4:	e031      	b.n	8007e3a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dd6:	f7fb ff23 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 8007dda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ddc:	e033      	b.n	8007e46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dde:	f7fb ff35 	bl	8003c4c <HAL_RCC_GetPCLK2Freq>
 8007de2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007de4:	e02f      	b.n	8007e46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fc fea0 	bl	8004b30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007df4:	e027      	b.n	8007e46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007df6:	f107 0318 	add.w	r3, r7, #24
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fc ffec 	bl	8004dd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e04:	e01f      	b.n	8007e46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e06:	4b2d      	ldr	r3, [pc, #180]	; (8007ebc <UART_SetConfig+0x934>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d009      	beq.n	8007e26 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e12:	4b2a      	ldr	r3, [pc, #168]	; (8007ebc <UART_SetConfig+0x934>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	08db      	lsrs	r3, r3, #3
 8007e18:	f003 0303 	and.w	r3, r3, #3
 8007e1c:	4a24      	ldr	r2, [pc, #144]	; (8007eb0 <UART_SetConfig+0x928>)
 8007e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e24:	e00f      	b.n	8007e46 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007e26:	4b22      	ldr	r3, [pc, #136]	; (8007eb0 <UART_SetConfig+0x928>)
 8007e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e2a:	e00c      	b.n	8007e46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e2c:	4b21      	ldr	r3, [pc, #132]	; (8007eb4 <UART_SetConfig+0x92c>)
 8007e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e30:	e009      	b.n	8007e46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e38:	e005      	b.n	8007e46 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007e44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 80e7 	beq.w	800801c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e52:	4a19      	ldr	r2, [pc, #100]	; (8007eb8 <UART_SetConfig+0x930>)
 8007e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e60:	005a      	lsls	r2, r3, #1
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	085b      	lsrs	r3, r3, #1
 8007e68:	441a      	add	r2, r3
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e72:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e76:	2b0f      	cmp	r3, #15
 8007e78:	d916      	bls.n	8007ea8 <UART_SetConfig+0x920>
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e80:	d212      	bcs.n	8007ea8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	f023 030f 	bic.w	r3, r3, #15
 8007e8a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8e:	085b      	lsrs	r3, r3, #1
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	f003 0307 	and.w	r3, r3, #7
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007ea4:	60da      	str	r2, [r3, #12]
 8007ea6:	e0b9      	b.n	800801c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007eae:	e0b5      	b.n	800801c <UART_SetConfig+0xa94>
 8007eb0:	03d09000 	.word	0x03d09000
 8007eb4:	003d0900 	.word	0x003d0900
 8007eb8:	08009c98 	.word	0x08009c98
 8007ebc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ec0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007ec4:	2b20      	cmp	r3, #32
 8007ec6:	dc49      	bgt.n	8007f5c <UART_SetConfig+0x9d4>
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	db7c      	blt.n	8007fc6 <UART_SetConfig+0xa3e>
 8007ecc:	2b20      	cmp	r3, #32
 8007ece:	d87a      	bhi.n	8007fc6 <UART_SetConfig+0xa3e>
 8007ed0:	a201      	add	r2, pc, #4	; (adr r2, 8007ed8 <UART_SetConfig+0x950>)
 8007ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed6:	bf00      	nop
 8007ed8:	08007f63 	.word	0x08007f63
 8007edc:	08007f6b 	.word	0x08007f6b
 8007ee0:	08007fc7 	.word	0x08007fc7
 8007ee4:	08007fc7 	.word	0x08007fc7
 8007ee8:	08007f73 	.word	0x08007f73
 8007eec:	08007fc7 	.word	0x08007fc7
 8007ef0:	08007fc7 	.word	0x08007fc7
 8007ef4:	08007fc7 	.word	0x08007fc7
 8007ef8:	08007f83 	.word	0x08007f83
 8007efc:	08007fc7 	.word	0x08007fc7
 8007f00:	08007fc7 	.word	0x08007fc7
 8007f04:	08007fc7 	.word	0x08007fc7
 8007f08:	08007fc7 	.word	0x08007fc7
 8007f0c:	08007fc7 	.word	0x08007fc7
 8007f10:	08007fc7 	.word	0x08007fc7
 8007f14:	08007fc7 	.word	0x08007fc7
 8007f18:	08007f93 	.word	0x08007f93
 8007f1c:	08007fc7 	.word	0x08007fc7
 8007f20:	08007fc7 	.word	0x08007fc7
 8007f24:	08007fc7 	.word	0x08007fc7
 8007f28:	08007fc7 	.word	0x08007fc7
 8007f2c:	08007fc7 	.word	0x08007fc7
 8007f30:	08007fc7 	.word	0x08007fc7
 8007f34:	08007fc7 	.word	0x08007fc7
 8007f38:	08007fc7 	.word	0x08007fc7
 8007f3c:	08007fc7 	.word	0x08007fc7
 8007f40:	08007fc7 	.word	0x08007fc7
 8007f44:	08007fc7 	.word	0x08007fc7
 8007f48:	08007fc7 	.word	0x08007fc7
 8007f4c:	08007fc7 	.word	0x08007fc7
 8007f50:	08007fc7 	.word	0x08007fc7
 8007f54:	08007fc7 	.word	0x08007fc7
 8007f58:	08007fb9 	.word	0x08007fb9
 8007f5c:	2b40      	cmp	r3, #64	; 0x40
 8007f5e:	d02e      	beq.n	8007fbe <UART_SetConfig+0xa36>
 8007f60:	e031      	b.n	8007fc6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f62:	f7fb fe5d 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 8007f66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f68:	e033      	b.n	8007fd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f6a:	f7fb fe6f 	bl	8003c4c <HAL_RCC_GetPCLK2Freq>
 8007f6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f70:	e02f      	b.n	8007fd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fc fdda 	bl	8004b30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f80:	e027      	b.n	8007fd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f82:	f107 0318 	add.w	r3, r7, #24
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fc ff26 	bl	8004dd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f90:	e01f      	b.n	8007fd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f92:	4b2d      	ldr	r3, [pc, #180]	; (8008048 <UART_SetConfig+0xac0>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0320 	and.w	r3, r3, #32
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d009      	beq.n	8007fb2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f9e:	4b2a      	ldr	r3, [pc, #168]	; (8008048 <UART_SetConfig+0xac0>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	08db      	lsrs	r3, r3, #3
 8007fa4:	f003 0303 	and.w	r3, r3, #3
 8007fa8:	4a28      	ldr	r2, [pc, #160]	; (800804c <UART_SetConfig+0xac4>)
 8007faa:	fa22 f303 	lsr.w	r3, r2, r3
 8007fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007fb0:	e00f      	b.n	8007fd2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007fb2:	4b26      	ldr	r3, [pc, #152]	; (800804c <UART_SetConfig+0xac4>)
 8007fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fb6:	e00c      	b.n	8007fd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007fb8:	4b25      	ldr	r3, [pc, #148]	; (8008050 <UART_SetConfig+0xac8>)
 8007fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fbc:	e009      	b.n	8007fd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fc4:	e005      	b.n	8007fd2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007fd0:	bf00      	nop
    }

    if (pclk != 0U)
 8007fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d021      	beq.n	800801c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fdc:	4a1d      	ldr	r2, [pc, #116]	; (8008054 <UART_SetConfig+0xacc>)
 8007fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	085b      	lsrs	r3, r3, #1
 8007ff0:	441a      	add	r2, r3
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ffa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffe:	2b0f      	cmp	r3, #15
 8008000:	d909      	bls.n	8008016 <UART_SetConfig+0xa8e>
 8008002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008008:	d205      	bcs.n	8008016 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800800a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800c:	b29a      	uxth	r2, r3
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	60da      	str	r2, [r3, #12]
 8008014:	e002      	b.n	800801c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	2201      	movs	r2, #1
 8008020:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	2201      	movs	r2, #1
 8008028:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	2200      	movs	r2, #0
 8008030:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	2200      	movs	r2, #0
 8008036:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008038:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800803c:	4618      	mov	r0, r3
 800803e:	3748      	adds	r7, #72	; 0x48
 8008040:	46bd      	mov	sp, r7
 8008042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008046:	bf00      	nop
 8008048:	58024400 	.word	0x58024400
 800804c:	03d09000 	.word	0x03d09000
 8008050:	003d0900 	.word	0x003d0900
 8008054:	08009c98 	.word	0x08009c98

08008058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00a      	beq.n	8008082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	430a      	orrs	r2, r1
 8008080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008086:	f003 0302 	and.w	r3, r3, #2
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00a      	beq.n	80080a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	430a      	orrs	r2, r1
 80080a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a8:	f003 0304 	and.w	r3, r3, #4
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00a      	beq.n	80080c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ca:	f003 0308 	and.w	r3, r3, #8
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00a      	beq.n	80080e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	430a      	orrs	r2, r1
 80080e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ec:	f003 0310 	and.w	r3, r3, #16
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00a      	beq.n	800810a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810e:	f003 0320 	and.w	r3, r3, #32
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00a      	beq.n	800812c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	430a      	orrs	r2, r1
 800812a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008134:	2b00      	cmp	r3, #0
 8008136:	d01a      	beq.n	800816e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	430a      	orrs	r2, r1
 800814c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008156:	d10a      	bne.n	800816e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	430a      	orrs	r2, r1
 800816c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00a      	beq.n	8008190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	430a      	orrs	r2, r1
 800818e:	605a      	str	r2, [r3, #4]
  }
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af02      	add	r7, sp, #8
 80081a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081ac:	f7fa fa38 	bl	8002620 <HAL_GetTick>
 80081b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0308 	and.w	r3, r3, #8
 80081bc:	2b08      	cmp	r3, #8
 80081be:	d10e      	bne.n	80081de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f82f 	bl	8008232 <UART_WaitOnFlagUntilTimeout>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e025      	b.n	800822a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0304 	and.w	r3, r3, #4
 80081e8:	2b04      	cmp	r3, #4
 80081ea:	d10e      	bne.n	800820a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f819 	bl	8008232 <UART_WaitOnFlagUntilTimeout>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e00f      	b.n	800822a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2220      	movs	r2, #32
 800820e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2220      	movs	r2, #32
 8008216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b09c      	sub	sp, #112	; 0x70
 8008236:	af00      	add	r7, sp, #0
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	603b      	str	r3, [r7, #0]
 800823e:	4613      	mov	r3, r2
 8008240:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008242:	e0a9      	b.n	8008398 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824a:	f000 80a5 	beq.w	8008398 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800824e:	f7fa f9e7 	bl	8002620 <HAL_GetTick>
 8008252:	4602      	mov	r2, r0
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800825a:	429a      	cmp	r2, r3
 800825c:	d302      	bcc.n	8008264 <UART_WaitOnFlagUntilTimeout+0x32>
 800825e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008260:	2b00      	cmp	r3, #0
 8008262:	d140      	bne.n	80082e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800826c:	e853 3f00 	ldrex	r3, [r3]
 8008270:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008274:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008278:	667b      	str	r3, [r7, #100]	; 0x64
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008282:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008284:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008286:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008288:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800828a:	e841 2300 	strex	r3, r2, [r1]
 800828e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1e6      	bne.n	8008264 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	3308      	adds	r3, #8
 800829c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a0:	e853 3f00 	ldrex	r3, [r3]
 80082a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a8:	f023 0301 	bic.w	r3, r3, #1
 80082ac:	663b      	str	r3, [r7, #96]	; 0x60
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3308      	adds	r3, #8
 80082b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80082b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082be:	e841 2300 	strex	r3, r2, [r1]
 80082c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1e5      	bne.n	8008296 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2220      	movs	r2, #32
 80082ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2220      	movs	r2, #32
 80082d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e069      	b.n	80083ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0304 	and.w	r3, r3, #4
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d051      	beq.n	8008398 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008302:	d149      	bne.n	8008398 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800830c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008316:	e853 3f00 	ldrex	r3, [r3]
 800831a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008322:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	461a      	mov	r2, r3
 800832a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800832c:	637b      	str	r3, [r7, #52]	; 0x34
 800832e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008330:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008334:	e841 2300 	strex	r3, r2, [r1]
 8008338:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800833a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1e6      	bne.n	800830e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3308      	adds	r3, #8
 8008346:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	e853 3f00 	ldrex	r3, [r3]
 800834e:	613b      	str	r3, [r7, #16]
   return(result);
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	f023 0301 	bic.w	r3, r3, #1
 8008356:	66bb      	str	r3, [r7, #104]	; 0x68
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3308      	adds	r3, #8
 800835e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008360:	623a      	str	r2, [r7, #32]
 8008362:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008364:	69f9      	ldr	r1, [r7, #28]
 8008366:	6a3a      	ldr	r2, [r7, #32]
 8008368:	e841 2300 	strex	r3, r2, [r1]
 800836c:	61bb      	str	r3, [r7, #24]
   return(result);
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1e5      	bne.n	8008340 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2220      	movs	r2, #32
 8008378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2220      	movs	r2, #32
 8008380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2220      	movs	r2, #32
 8008388:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e010      	b.n	80083ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	69da      	ldr	r2, [r3, #28]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	4013      	ands	r3, r2
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	bf0c      	ite	eq
 80083a8:	2301      	moveq	r3, #1
 80083aa:	2300      	movne	r3, #0
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	461a      	mov	r2, r3
 80083b0:	79fb      	ldrb	r3, [r7, #7]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	f43f af46 	beq.w	8008244 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3770      	adds	r7, #112	; 0x70
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b085      	sub	sp, #20
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d101      	bne.n	80083d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80083d4:	2302      	movs	r3, #2
 80083d6:	e027      	b.n	8008428 <HAL_UARTEx_DisableFifoMode+0x66>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2224      	movs	r2, #36	; 0x24
 80083e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 0201 	bic.w	r2, r2, #1
 80083fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008406:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2220      	movs	r2, #32
 800841a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008444:	2b01      	cmp	r3, #1
 8008446:	d101      	bne.n	800844c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008448:	2302      	movs	r3, #2
 800844a:	e02d      	b.n	80084a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2224      	movs	r2, #36	; 0x24
 8008458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f022 0201 	bic.w	r2, r2, #1
 8008472:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f84f 	bl	800852c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2220      	movs	r2, #32
 800849a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d101      	bne.n	80084c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084c4:	2302      	movs	r3, #2
 80084c6:	e02d      	b.n	8008524 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2224      	movs	r2, #36	; 0x24
 80084d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 0201 	bic.w	r2, r2, #1
 80084ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	430a      	orrs	r2, r1
 8008502:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f811 	bl	800852c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2220      	movs	r2, #32
 8008516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008538:	2b00      	cmp	r3, #0
 800853a:	d108      	bne.n	800854e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800854c:	e031      	b.n	80085b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800854e:	2310      	movs	r3, #16
 8008550:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008552:	2310      	movs	r3, #16
 8008554:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	0e5b      	lsrs	r3, r3, #25
 800855e:	b2db      	uxtb	r3, r3
 8008560:	f003 0307 	and.w	r3, r3, #7
 8008564:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	0f5b      	lsrs	r3, r3, #29
 800856e:	b2db      	uxtb	r3, r3
 8008570:	f003 0307 	and.w	r3, r3, #7
 8008574:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008576:	7bbb      	ldrb	r3, [r7, #14]
 8008578:	7b3a      	ldrb	r2, [r7, #12]
 800857a:	4911      	ldr	r1, [pc, #68]	; (80085c0 <UARTEx_SetNbDataToProcess+0x94>)
 800857c:	5c8a      	ldrb	r2, [r1, r2]
 800857e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008582:	7b3a      	ldrb	r2, [r7, #12]
 8008584:	490f      	ldr	r1, [pc, #60]	; (80085c4 <UARTEx_SetNbDataToProcess+0x98>)
 8008586:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008588:	fb93 f3f2 	sdiv	r3, r3, r2
 800858c:	b29a      	uxth	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008594:	7bfb      	ldrb	r3, [r7, #15]
 8008596:	7b7a      	ldrb	r2, [r7, #13]
 8008598:	4909      	ldr	r1, [pc, #36]	; (80085c0 <UARTEx_SetNbDataToProcess+0x94>)
 800859a:	5c8a      	ldrb	r2, [r1, r2]
 800859c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80085a0:	7b7a      	ldrb	r2, [r7, #13]
 80085a2:	4908      	ldr	r1, [pc, #32]	; (80085c4 <UARTEx_SetNbDataToProcess+0x98>)
 80085a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80085b2:	bf00      	nop
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	08009cb0 	.word	0x08009cb0
 80085c4:	08009cb8 	.word	0x08009cb8

080085c8 <__errno>:
 80085c8:	4b01      	ldr	r3, [pc, #4]	; (80085d0 <__errno+0x8>)
 80085ca:	6818      	ldr	r0, [r3, #0]
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	24000018 	.word	0x24000018

080085d4 <__libc_init_array>:
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	4d0d      	ldr	r5, [pc, #52]	; (800860c <__libc_init_array+0x38>)
 80085d8:	4c0d      	ldr	r4, [pc, #52]	; (8008610 <__libc_init_array+0x3c>)
 80085da:	1b64      	subs	r4, r4, r5
 80085dc:	10a4      	asrs	r4, r4, #2
 80085de:	2600      	movs	r6, #0
 80085e0:	42a6      	cmp	r6, r4
 80085e2:	d109      	bne.n	80085f8 <__libc_init_array+0x24>
 80085e4:	4d0b      	ldr	r5, [pc, #44]	; (8008614 <__libc_init_array+0x40>)
 80085e6:	4c0c      	ldr	r4, [pc, #48]	; (8008618 <__libc_init_array+0x44>)
 80085e8:	f001 f88e 	bl	8009708 <_init>
 80085ec:	1b64      	subs	r4, r4, r5
 80085ee:	10a4      	asrs	r4, r4, #2
 80085f0:	2600      	movs	r6, #0
 80085f2:	42a6      	cmp	r6, r4
 80085f4:	d105      	bne.n	8008602 <__libc_init_array+0x2e>
 80085f6:	bd70      	pop	{r4, r5, r6, pc}
 80085f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80085fc:	4798      	blx	r3
 80085fe:	3601      	adds	r6, #1
 8008600:	e7ee      	b.n	80085e0 <__libc_init_array+0xc>
 8008602:	f855 3b04 	ldr.w	r3, [r5], #4
 8008606:	4798      	blx	r3
 8008608:	3601      	adds	r6, #1
 800860a:	e7f2      	b.n	80085f2 <__libc_init_array+0x1e>
 800860c:	08009d60 	.word	0x08009d60
 8008610:	08009d60 	.word	0x08009d60
 8008614:	08009d60 	.word	0x08009d60
 8008618:	08009d64 	.word	0x08009d64

0800861c <memcpy>:
 800861c:	440a      	add	r2, r1
 800861e:	4291      	cmp	r1, r2
 8008620:	f100 33ff 	add.w	r3, r0, #4294967295
 8008624:	d100      	bne.n	8008628 <memcpy+0xc>
 8008626:	4770      	bx	lr
 8008628:	b510      	push	{r4, lr}
 800862a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800862e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008632:	4291      	cmp	r1, r2
 8008634:	d1f9      	bne.n	800862a <memcpy+0xe>
 8008636:	bd10      	pop	{r4, pc}

08008638 <memset>:
 8008638:	4402      	add	r2, r0
 800863a:	4603      	mov	r3, r0
 800863c:	4293      	cmp	r3, r2
 800863e:	d100      	bne.n	8008642 <memset+0xa>
 8008640:	4770      	bx	lr
 8008642:	f803 1b01 	strb.w	r1, [r3], #1
 8008646:	e7f9      	b.n	800863c <memset+0x4>

08008648 <_puts_r>:
 8008648:	b570      	push	{r4, r5, r6, lr}
 800864a:	460e      	mov	r6, r1
 800864c:	4605      	mov	r5, r0
 800864e:	b118      	cbz	r0, 8008658 <_puts_r+0x10>
 8008650:	6983      	ldr	r3, [r0, #24]
 8008652:	b90b      	cbnz	r3, 8008658 <_puts_r+0x10>
 8008654:	f000 fa68 	bl	8008b28 <__sinit>
 8008658:	69ab      	ldr	r3, [r5, #24]
 800865a:	68ac      	ldr	r4, [r5, #8]
 800865c:	b913      	cbnz	r3, 8008664 <_puts_r+0x1c>
 800865e:	4628      	mov	r0, r5
 8008660:	f000 fa62 	bl	8008b28 <__sinit>
 8008664:	4b2c      	ldr	r3, [pc, #176]	; (8008718 <_puts_r+0xd0>)
 8008666:	429c      	cmp	r4, r3
 8008668:	d120      	bne.n	80086ac <_puts_r+0x64>
 800866a:	686c      	ldr	r4, [r5, #4]
 800866c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800866e:	07db      	lsls	r3, r3, #31
 8008670:	d405      	bmi.n	800867e <_puts_r+0x36>
 8008672:	89a3      	ldrh	r3, [r4, #12]
 8008674:	0598      	lsls	r0, r3, #22
 8008676:	d402      	bmi.n	800867e <_puts_r+0x36>
 8008678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800867a:	f000 faf3 	bl	8008c64 <__retarget_lock_acquire_recursive>
 800867e:	89a3      	ldrh	r3, [r4, #12]
 8008680:	0719      	lsls	r1, r3, #28
 8008682:	d51d      	bpl.n	80086c0 <_puts_r+0x78>
 8008684:	6923      	ldr	r3, [r4, #16]
 8008686:	b1db      	cbz	r3, 80086c0 <_puts_r+0x78>
 8008688:	3e01      	subs	r6, #1
 800868a:	68a3      	ldr	r3, [r4, #8]
 800868c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008690:	3b01      	subs	r3, #1
 8008692:	60a3      	str	r3, [r4, #8]
 8008694:	bb39      	cbnz	r1, 80086e6 <_puts_r+0x9e>
 8008696:	2b00      	cmp	r3, #0
 8008698:	da38      	bge.n	800870c <_puts_r+0xc4>
 800869a:	4622      	mov	r2, r4
 800869c:	210a      	movs	r1, #10
 800869e:	4628      	mov	r0, r5
 80086a0:	f000 f868 	bl	8008774 <__swbuf_r>
 80086a4:	3001      	adds	r0, #1
 80086a6:	d011      	beq.n	80086cc <_puts_r+0x84>
 80086a8:	250a      	movs	r5, #10
 80086aa:	e011      	b.n	80086d0 <_puts_r+0x88>
 80086ac:	4b1b      	ldr	r3, [pc, #108]	; (800871c <_puts_r+0xd4>)
 80086ae:	429c      	cmp	r4, r3
 80086b0:	d101      	bne.n	80086b6 <_puts_r+0x6e>
 80086b2:	68ac      	ldr	r4, [r5, #8]
 80086b4:	e7da      	b.n	800866c <_puts_r+0x24>
 80086b6:	4b1a      	ldr	r3, [pc, #104]	; (8008720 <_puts_r+0xd8>)
 80086b8:	429c      	cmp	r4, r3
 80086ba:	bf08      	it	eq
 80086bc:	68ec      	ldreq	r4, [r5, #12]
 80086be:	e7d5      	b.n	800866c <_puts_r+0x24>
 80086c0:	4621      	mov	r1, r4
 80086c2:	4628      	mov	r0, r5
 80086c4:	f000 f8a8 	bl	8008818 <__swsetup_r>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d0dd      	beq.n	8008688 <_puts_r+0x40>
 80086cc:	f04f 35ff 	mov.w	r5, #4294967295
 80086d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086d2:	07da      	lsls	r2, r3, #31
 80086d4:	d405      	bmi.n	80086e2 <_puts_r+0x9a>
 80086d6:	89a3      	ldrh	r3, [r4, #12]
 80086d8:	059b      	lsls	r3, r3, #22
 80086da:	d402      	bmi.n	80086e2 <_puts_r+0x9a>
 80086dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086de:	f000 fac2 	bl	8008c66 <__retarget_lock_release_recursive>
 80086e2:	4628      	mov	r0, r5
 80086e4:	bd70      	pop	{r4, r5, r6, pc}
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	da04      	bge.n	80086f4 <_puts_r+0xac>
 80086ea:	69a2      	ldr	r2, [r4, #24]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	dc06      	bgt.n	80086fe <_puts_r+0xb6>
 80086f0:	290a      	cmp	r1, #10
 80086f2:	d004      	beq.n	80086fe <_puts_r+0xb6>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	6022      	str	r2, [r4, #0]
 80086fa:	7019      	strb	r1, [r3, #0]
 80086fc:	e7c5      	b.n	800868a <_puts_r+0x42>
 80086fe:	4622      	mov	r2, r4
 8008700:	4628      	mov	r0, r5
 8008702:	f000 f837 	bl	8008774 <__swbuf_r>
 8008706:	3001      	adds	r0, #1
 8008708:	d1bf      	bne.n	800868a <_puts_r+0x42>
 800870a:	e7df      	b.n	80086cc <_puts_r+0x84>
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	250a      	movs	r5, #10
 8008710:	1c5a      	adds	r2, r3, #1
 8008712:	6022      	str	r2, [r4, #0]
 8008714:	701d      	strb	r5, [r3, #0]
 8008716:	e7db      	b.n	80086d0 <_puts_r+0x88>
 8008718:	08009ce4 	.word	0x08009ce4
 800871c:	08009d04 	.word	0x08009d04
 8008720:	08009cc4 	.word	0x08009cc4

08008724 <puts>:
 8008724:	4b02      	ldr	r3, [pc, #8]	; (8008730 <puts+0xc>)
 8008726:	4601      	mov	r1, r0
 8008728:	6818      	ldr	r0, [r3, #0]
 800872a:	f7ff bf8d 	b.w	8008648 <_puts_r>
 800872e:	bf00      	nop
 8008730:	24000018 	.word	0x24000018

08008734 <siprintf>:
 8008734:	b40e      	push	{r1, r2, r3}
 8008736:	b500      	push	{lr}
 8008738:	b09c      	sub	sp, #112	; 0x70
 800873a:	ab1d      	add	r3, sp, #116	; 0x74
 800873c:	9002      	str	r0, [sp, #8]
 800873e:	9006      	str	r0, [sp, #24]
 8008740:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008744:	4809      	ldr	r0, [pc, #36]	; (800876c <siprintf+0x38>)
 8008746:	9107      	str	r1, [sp, #28]
 8008748:	9104      	str	r1, [sp, #16]
 800874a:	4909      	ldr	r1, [pc, #36]	; (8008770 <siprintf+0x3c>)
 800874c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008750:	9105      	str	r1, [sp, #20]
 8008752:	6800      	ldr	r0, [r0, #0]
 8008754:	9301      	str	r3, [sp, #4]
 8008756:	a902      	add	r1, sp, #8
 8008758:	f000 fc28 	bl	8008fac <_svfiprintf_r>
 800875c:	9b02      	ldr	r3, [sp, #8]
 800875e:	2200      	movs	r2, #0
 8008760:	701a      	strb	r2, [r3, #0]
 8008762:	b01c      	add	sp, #112	; 0x70
 8008764:	f85d eb04 	ldr.w	lr, [sp], #4
 8008768:	b003      	add	sp, #12
 800876a:	4770      	bx	lr
 800876c:	24000018 	.word	0x24000018
 8008770:	ffff0208 	.word	0xffff0208

08008774 <__swbuf_r>:
 8008774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008776:	460e      	mov	r6, r1
 8008778:	4614      	mov	r4, r2
 800877a:	4605      	mov	r5, r0
 800877c:	b118      	cbz	r0, 8008786 <__swbuf_r+0x12>
 800877e:	6983      	ldr	r3, [r0, #24]
 8008780:	b90b      	cbnz	r3, 8008786 <__swbuf_r+0x12>
 8008782:	f000 f9d1 	bl	8008b28 <__sinit>
 8008786:	4b21      	ldr	r3, [pc, #132]	; (800880c <__swbuf_r+0x98>)
 8008788:	429c      	cmp	r4, r3
 800878a:	d12b      	bne.n	80087e4 <__swbuf_r+0x70>
 800878c:	686c      	ldr	r4, [r5, #4]
 800878e:	69a3      	ldr	r3, [r4, #24]
 8008790:	60a3      	str	r3, [r4, #8]
 8008792:	89a3      	ldrh	r3, [r4, #12]
 8008794:	071a      	lsls	r2, r3, #28
 8008796:	d52f      	bpl.n	80087f8 <__swbuf_r+0x84>
 8008798:	6923      	ldr	r3, [r4, #16]
 800879a:	b36b      	cbz	r3, 80087f8 <__swbuf_r+0x84>
 800879c:	6923      	ldr	r3, [r4, #16]
 800879e:	6820      	ldr	r0, [r4, #0]
 80087a0:	1ac0      	subs	r0, r0, r3
 80087a2:	6963      	ldr	r3, [r4, #20]
 80087a4:	b2f6      	uxtb	r6, r6
 80087a6:	4283      	cmp	r3, r0
 80087a8:	4637      	mov	r7, r6
 80087aa:	dc04      	bgt.n	80087b6 <__swbuf_r+0x42>
 80087ac:	4621      	mov	r1, r4
 80087ae:	4628      	mov	r0, r5
 80087b0:	f000 f926 	bl	8008a00 <_fflush_r>
 80087b4:	bb30      	cbnz	r0, 8008804 <__swbuf_r+0x90>
 80087b6:	68a3      	ldr	r3, [r4, #8]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	60a3      	str	r3, [r4, #8]
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	1c5a      	adds	r2, r3, #1
 80087c0:	6022      	str	r2, [r4, #0]
 80087c2:	701e      	strb	r6, [r3, #0]
 80087c4:	6963      	ldr	r3, [r4, #20]
 80087c6:	3001      	adds	r0, #1
 80087c8:	4283      	cmp	r3, r0
 80087ca:	d004      	beq.n	80087d6 <__swbuf_r+0x62>
 80087cc:	89a3      	ldrh	r3, [r4, #12]
 80087ce:	07db      	lsls	r3, r3, #31
 80087d0:	d506      	bpl.n	80087e0 <__swbuf_r+0x6c>
 80087d2:	2e0a      	cmp	r6, #10
 80087d4:	d104      	bne.n	80087e0 <__swbuf_r+0x6c>
 80087d6:	4621      	mov	r1, r4
 80087d8:	4628      	mov	r0, r5
 80087da:	f000 f911 	bl	8008a00 <_fflush_r>
 80087de:	b988      	cbnz	r0, 8008804 <__swbuf_r+0x90>
 80087e0:	4638      	mov	r0, r7
 80087e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087e4:	4b0a      	ldr	r3, [pc, #40]	; (8008810 <__swbuf_r+0x9c>)
 80087e6:	429c      	cmp	r4, r3
 80087e8:	d101      	bne.n	80087ee <__swbuf_r+0x7a>
 80087ea:	68ac      	ldr	r4, [r5, #8]
 80087ec:	e7cf      	b.n	800878e <__swbuf_r+0x1a>
 80087ee:	4b09      	ldr	r3, [pc, #36]	; (8008814 <__swbuf_r+0xa0>)
 80087f0:	429c      	cmp	r4, r3
 80087f2:	bf08      	it	eq
 80087f4:	68ec      	ldreq	r4, [r5, #12]
 80087f6:	e7ca      	b.n	800878e <__swbuf_r+0x1a>
 80087f8:	4621      	mov	r1, r4
 80087fa:	4628      	mov	r0, r5
 80087fc:	f000 f80c 	bl	8008818 <__swsetup_r>
 8008800:	2800      	cmp	r0, #0
 8008802:	d0cb      	beq.n	800879c <__swbuf_r+0x28>
 8008804:	f04f 37ff 	mov.w	r7, #4294967295
 8008808:	e7ea      	b.n	80087e0 <__swbuf_r+0x6c>
 800880a:	bf00      	nop
 800880c:	08009ce4 	.word	0x08009ce4
 8008810:	08009d04 	.word	0x08009d04
 8008814:	08009cc4 	.word	0x08009cc4

08008818 <__swsetup_r>:
 8008818:	4b32      	ldr	r3, [pc, #200]	; (80088e4 <__swsetup_r+0xcc>)
 800881a:	b570      	push	{r4, r5, r6, lr}
 800881c:	681d      	ldr	r5, [r3, #0]
 800881e:	4606      	mov	r6, r0
 8008820:	460c      	mov	r4, r1
 8008822:	b125      	cbz	r5, 800882e <__swsetup_r+0x16>
 8008824:	69ab      	ldr	r3, [r5, #24]
 8008826:	b913      	cbnz	r3, 800882e <__swsetup_r+0x16>
 8008828:	4628      	mov	r0, r5
 800882a:	f000 f97d 	bl	8008b28 <__sinit>
 800882e:	4b2e      	ldr	r3, [pc, #184]	; (80088e8 <__swsetup_r+0xd0>)
 8008830:	429c      	cmp	r4, r3
 8008832:	d10f      	bne.n	8008854 <__swsetup_r+0x3c>
 8008834:	686c      	ldr	r4, [r5, #4]
 8008836:	89a3      	ldrh	r3, [r4, #12]
 8008838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800883c:	0719      	lsls	r1, r3, #28
 800883e:	d42c      	bmi.n	800889a <__swsetup_r+0x82>
 8008840:	06dd      	lsls	r5, r3, #27
 8008842:	d411      	bmi.n	8008868 <__swsetup_r+0x50>
 8008844:	2309      	movs	r3, #9
 8008846:	6033      	str	r3, [r6, #0]
 8008848:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800884c:	81a3      	strh	r3, [r4, #12]
 800884e:	f04f 30ff 	mov.w	r0, #4294967295
 8008852:	e03e      	b.n	80088d2 <__swsetup_r+0xba>
 8008854:	4b25      	ldr	r3, [pc, #148]	; (80088ec <__swsetup_r+0xd4>)
 8008856:	429c      	cmp	r4, r3
 8008858:	d101      	bne.n	800885e <__swsetup_r+0x46>
 800885a:	68ac      	ldr	r4, [r5, #8]
 800885c:	e7eb      	b.n	8008836 <__swsetup_r+0x1e>
 800885e:	4b24      	ldr	r3, [pc, #144]	; (80088f0 <__swsetup_r+0xd8>)
 8008860:	429c      	cmp	r4, r3
 8008862:	bf08      	it	eq
 8008864:	68ec      	ldreq	r4, [r5, #12]
 8008866:	e7e6      	b.n	8008836 <__swsetup_r+0x1e>
 8008868:	0758      	lsls	r0, r3, #29
 800886a:	d512      	bpl.n	8008892 <__swsetup_r+0x7a>
 800886c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800886e:	b141      	cbz	r1, 8008882 <__swsetup_r+0x6a>
 8008870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008874:	4299      	cmp	r1, r3
 8008876:	d002      	beq.n	800887e <__swsetup_r+0x66>
 8008878:	4630      	mov	r0, r6
 800887a:	f000 fa5b 	bl	8008d34 <_free_r>
 800887e:	2300      	movs	r3, #0
 8008880:	6363      	str	r3, [r4, #52]	; 0x34
 8008882:	89a3      	ldrh	r3, [r4, #12]
 8008884:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008888:	81a3      	strh	r3, [r4, #12]
 800888a:	2300      	movs	r3, #0
 800888c:	6063      	str	r3, [r4, #4]
 800888e:	6923      	ldr	r3, [r4, #16]
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	89a3      	ldrh	r3, [r4, #12]
 8008894:	f043 0308 	orr.w	r3, r3, #8
 8008898:	81a3      	strh	r3, [r4, #12]
 800889a:	6923      	ldr	r3, [r4, #16]
 800889c:	b94b      	cbnz	r3, 80088b2 <__swsetup_r+0x9a>
 800889e:	89a3      	ldrh	r3, [r4, #12]
 80088a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088a8:	d003      	beq.n	80088b2 <__swsetup_r+0x9a>
 80088aa:	4621      	mov	r1, r4
 80088ac:	4630      	mov	r0, r6
 80088ae:	f000 fa01 	bl	8008cb4 <__smakebuf_r>
 80088b2:	89a0      	ldrh	r0, [r4, #12]
 80088b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088b8:	f010 0301 	ands.w	r3, r0, #1
 80088bc:	d00a      	beq.n	80088d4 <__swsetup_r+0xbc>
 80088be:	2300      	movs	r3, #0
 80088c0:	60a3      	str	r3, [r4, #8]
 80088c2:	6963      	ldr	r3, [r4, #20]
 80088c4:	425b      	negs	r3, r3
 80088c6:	61a3      	str	r3, [r4, #24]
 80088c8:	6923      	ldr	r3, [r4, #16]
 80088ca:	b943      	cbnz	r3, 80088de <__swsetup_r+0xc6>
 80088cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088d0:	d1ba      	bne.n	8008848 <__swsetup_r+0x30>
 80088d2:	bd70      	pop	{r4, r5, r6, pc}
 80088d4:	0781      	lsls	r1, r0, #30
 80088d6:	bf58      	it	pl
 80088d8:	6963      	ldrpl	r3, [r4, #20]
 80088da:	60a3      	str	r3, [r4, #8]
 80088dc:	e7f4      	b.n	80088c8 <__swsetup_r+0xb0>
 80088de:	2000      	movs	r0, #0
 80088e0:	e7f7      	b.n	80088d2 <__swsetup_r+0xba>
 80088e2:	bf00      	nop
 80088e4:	24000018 	.word	0x24000018
 80088e8:	08009ce4 	.word	0x08009ce4
 80088ec:	08009d04 	.word	0x08009d04
 80088f0:	08009cc4 	.word	0x08009cc4

080088f4 <__sflush_r>:
 80088f4:	898a      	ldrh	r2, [r1, #12]
 80088f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088fa:	4605      	mov	r5, r0
 80088fc:	0710      	lsls	r0, r2, #28
 80088fe:	460c      	mov	r4, r1
 8008900:	d458      	bmi.n	80089b4 <__sflush_r+0xc0>
 8008902:	684b      	ldr	r3, [r1, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	dc05      	bgt.n	8008914 <__sflush_r+0x20>
 8008908:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800890a:	2b00      	cmp	r3, #0
 800890c:	dc02      	bgt.n	8008914 <__sflush_r+0x20>
 800890e:	2000      	movs	r0, #0
 8008910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008916:	2e00      	cmp	r6, #0
 8008918:	d0f9      	beq.n	800890e <__sflush_r+0x1a>
 800891a:	2300      	movs	r3, #0
 800891c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008920:	682f      	ldr	r7, [r5, #0]
 8008922:	602b      	str	r3, [r5, #0]
 8008924:	d032      	beq.n	800898c <__sflush_r+0x98>
 8008926:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008928:	89a3      	ldrh	r3, [r4, #12]
 800892a:	075a      	lsls	r2, r3, #29
 800892c:	d505      	bpl.n	800893a <__sflush_r+0x46>
 800892e:	6863      	ldr	r3, [r4, #4]
 8008930:	1ac0      	subs	r0, r0, r3
 8008932:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008934:	b10b      	cbz	r3, 800893a <__sflush_r+0x46>
 8008936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008938:	1ac0      	subs	r0, r0, r3
 800893a:	2300      	movs	r3, #0
 800893c:	4602      	mov	r2, r0
 800893e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008940:	6a21      	ldr	r1, [r4, #32]
 8008942:	4628      	mov	r0, r5
 8008944:	47b0      	blx	r6
 8008946:	1c43      	adds	r3, r0, #1
 8008948:	89a3      	ldrh	r3, [r4, #12]
 800894a:	d106      	bne.n	800895a <__sflush_r+0x66>
 800894c:	6829      	ldr	r1, [r5, #0]
 800894e:	291d      	cmp	r1, #29
 8008950:	d82c      	bhi.n	80089ac <__sflush_r+0xb8>
 8008952:	4a2a      	ldr	r2, [pc, #168]	; (80089fc <__sflush_r+0x108>)
 8008954:	40ca      	lsrs	r2, r1
 8008956:	07d6      	lsls	r6, r2, #31
 8008958:	d528      	bpl.n	80089ac <__sflush_r+0xb8>
 800895a:	2200      	movs	r2, #0
 800895c:	6062      	str	r2, [r4, #4]
 800895e:	04d9      	lsls	r1, r3, #19
 8008960:	6922      	ldr	r2, [r4, #16]
 8008962:	6022      	str	r2, [r4, #0]
 8008964:	d504      	bpl.n	8008970 <__sflush_r+0x7c>
 8008966:	1c42      	adds	r2, r0, #1
 8008968:	d101      	bne.n	800896e <__sflush_r+0x7a>
 800896a:	682b      	ldr	r3, [r5, #0]
 800896c:	b903      	cbnz	r3, 8008970 <__sflush_r+0x7c>
 800896e:	6560      	str	r0, [r4, #84]	; 0x54
 8008970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008972:	602f      	str	r7, [r5, #0]
 8008974:	2900      	cmp	r1, #0
 8008976:	d0ca      	beq.n	800890e <__sflush_r+0x1a>
 8008978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800897c:	4299      	cmp	r1, r3
 800897e:	d002      	beq.n	8008986 <__sflush_r+0x92>
 8008980:	4628      	mov	r0, r5
 8008982:	f000 f9d7 	bl	8008d34 <_free_r>
 8008986:	2000      	movs	r0, #0
 8008988:	6360      	str	r0, [r4, #52]	; 0x34
 800898a:	e7c1      	b.n	8008910 <__sflush_r+0x1c>
 800898c:	6a21      	ldr	r1, [r4, #32]
 800898e:	2301      	movs	r3, #1
 8008990:	4628      	mov	r0, r5
 8008992:	47b0      	blx	r6
 8008994:	1c41      	adds	r1, r0, #1
 8008996:	d1c7      	bne.n	8008928 <__sflush_r+0x34>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d0c4      	beq.n	8008928 <__sflush_r+0x34>
 800899e:	2b1d      	cmp	r3, #29
 80089a0:	d001      	beq.n	80089a6 <__sflush_r+0xb2>
 80089a2:	2b16      	cmp	r3, #22
 80089a4:	d101      	bne.n	80089aa <__sflush_r+0xb6>
 80089a6:	602f      	str	r7, [r5, #0]
 80089a8:	e7b1      	b.n	800890e <__sflush_r+0x1a>
 80089aa:	89a3      	ldrh	r3, [r4, #12]
 80089ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b0:	81a3      	strh	r3, [r4, #12]
 80089b2:	e7ad      	b.n	8008910 <__sflush_r+0x1c>
 80089b4:	690f      	ldr	r7, [r1, #16]
 80089b6:	2f00      	cmp	r7, #0
 80089b8:	d0a9      	beq.n	800890e <__sflush_r+0x1a>
 80089ba:	0793      	lsls	r3, r2, #30
 80089bc:	680e      	ldr	r6, [r1, #0]
 80089be:	bf08      	it	eq
 80089c0:	694b      	ldreq	r3, [r1, #20]
 80089c2:	600f      	str	r7, [r1, #0]
 80089c4:	bf18      	it	ne
 80089c6:	2300      	movne	r3, #0
 80089c8:	eba6 0807 	sub.w	r8, r6, r7
 80089cc:	608b      	str	r3, [r1, #8]
 80089ce:	f1b8 0f00 	cmp.w	r8, #0
 80089d2:	dd9c      	ble.n	800890e <__sflush_r+0x1a>
 80089d4:	6a21      	ldr	r1, [r4, #32]
 80089d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089d8:	4643      	mov	r3, r8
 80089da:	463a      	mov	r2, r7
 80089dc:	4628      	mov	r0, r5
 80089de:	47b0      	blx	r6
 80089e0:	2800      	cmp	r0, #0
 80089e2:	dc06      	bgt.n	80089f2 <__sflush_r+0xfe>
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ea:	81a3      	strh	r3, [r4, #12]
 80089ec:	f04f 30ff 	mov.w	r0, #4294967295
 80089f0:	e78e      	b.n	8008910 <__sflush_r+0x1c>
 80089f2:	4407      	add	r7, r0
 80089f4:	eba8 0800 	sub.w	r8, r8, r0
 80089f8:	e7e9      	b.n	80089ce <__sflush_r+0xda>
 80089fa:	bf00      	nop
 80089fc:	20400001 	.word	0x20400001

08008a00 <_fflush_r>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	690b      	ldr	r3, [r1, #16]
 8008a04:	4605      	mov	r5, r0
 8008a06:	460c      	mov	r4, r1
 8008a08:	b913      	cbnz	r3, 8008a10 <_fflush_r+0x10>
 8008a0a:	2500      	movs	r5, #0
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	bd38      	pop	{r3, r4, r5, pc}
 8008a10:	b118      	cbz	r0, 8008a1a <_fflush_r+0x1a>
 8008a12:	6983      	ldr	r3, [r0, #24]
 8008a14:	b90b      	cbnz	r3, 8008a1a <_fflush_r+0x1a>
 8008a16:	f000 f887 	bl	8008b28 <__sinit>
 8008a1a:	4b14      	ldr	r3, [pc, #80]	; (8008a6c <_fflush_r+0x6c>)
 8008a1c:	429c      	cmp	r4, r3
 8008a1e:	d11b      	bne.n	8008a58 <_fflush_r+0x58>
 8008a20:	686c      	ldr	r4, [r5, #4]
 8008a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d0ef      	beq.n	8008a0a <_fflush_r+0xa>
 8008a2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a2c:	07d0      	lsls	r0, r2, #31
 8008a2e:	d404      	bmi.n	8008a3a <_fflush_r+0x3a>
 8008a30:	0599      	lsls	r1, r3, #22
 8008a32:	d402      	bmi.n	8008a3a <_fflush_r+0x3a>
 8008a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a36:	f000 f915 	bl	8008c64 <__retarget_lock_acquire_recursive>
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	4621      	mov	r1, r4
 8008a3e:	f7ff ff59 	bl	80088f4 <__sflush_r>
 8008a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a44:	07da      	lsls	r2, r3, #31
 8008a46:	4605      	mov	r5, r0
 8008a48:	d4e0      	bmi.n	8008a0c <_fflush_r+0xc>
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	059b      	lsls	r3, r3, #22
 8008a4e:	d4dd      	bmi.n	8008a0c <_fflush_r+0xc>
 8008a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a52:	f000 f908 	bl	8008c66 <__retarget_lock_release_recursive>
 8008a56:	e7d9      	b.n	8008a0c <_fflush_r+0xc>
 8008a58:	4b05      	ldr	r3, [pc, #20]	; (8008a70 <_fflush_r+0x70>)
 8008a5a:	429c      	cmp	r4, r3
 8008a5c:	d101      	bne.n	8008a62 <_fflush_r+0x62>
 8008a5e:	68ac      	ldr	r4, [r5, #8]
 8008a60:	e7df      	b.n	8008a22 <_fflush_r+0x22>
 8008a62:	4b04      	ldr	r3, [pc, #16]	; (8008a74 <_fflush_r+0x74>)
 8008a64:	429c      	cmp	r4, r3
 8008a66:	bf08      	it	eq
 8008a68:	68ec      	ldreq	r4, [r5, #12]
 8008a6a:	e7da      	b.n	8008a22 <_fflush_r+0x22>
 8008a6c:	08009ce4 	.word	0x08009ce4
 8008a70:	08009d04 	.word	0x08009d04
 8008a74:	08009cc4 	.word	0x08009cc4

08008a78 <std>:
 8008a78:	2300      	movs	r3, #0
 8008a7a:	b510      	push	{r4, lr}
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8008a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a86:	6083      	str	r3, [r0, #8]
 8008a88:	8181      	strh	r1, [r0, #12]
 8008a8a:	6643      	str	r3, [r0, #100]	; 0x64
 8008a8c:	81c2      	strh	r2, [r0, #14]
 8008a8e:	6183      	str	r3, [r0, #24]
 8008a90:	4619      	mov	r1, r3
 8008a92:	2208      	movs	r2, #8
 8008a94:	305c      	adds	r0, #92	; 0x5c
 8008a96:	f7ff fdcf 	bl	8008638 <memset>
 8008a9a:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <std+0x38>)
 8008a9c:	6263      	str	r3, [r4, #36]	; 0x24
 8008a9e:	4b05      	ldr	r3, [pc, #20]	; (8008ab4 <std+0x3c>)
 8008aa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008aa2:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <std+0x40>)
 8008aa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008aa6:	4b05      	ldr	r3, [pc, #20]	; (8008abc <std+0x44>)
 8008aa8:	6224      	str	r4, [r4, #32]
 8008aaa:	6323      	str	r3, [r4, #48]	; 0x30
 8008aac:	bd10      	pop	{r4, pc}
 8008aae:	bf00      	nop
 8008ab0:	080094f5 	.word	0x080094f5
 8008ab4:	08009517 	.word	0x08009517
 8008ab8:	0800954f 	.word	0x0800954f
 8008abc:	08009573 	.word	0x08009573

08008ac0 <_cleanup_r>:
 8008ac0:	4901      	ldr	r1, [pc, #4]	; (8008ac8 <_cleanup_r+0x8>)
 8008ac2:	f000 b8af 	b.w	8008c24 <_fwalk_reent>
 8008ac6:	bf00      	nop
 8008ac8:	08008a01 	.word	0x08008a01

08008acc <__sfmoreglue>:
 8008acc:	b570      	push	{r4, r5, r6, lr}
 8008ace:	2268      	movs	r2, #104	; 0x68
 8008ad0:	1e4d      	subs	r5, r1, #1
 8008ad2:	4355      	muls	r5, r2
 8008ad4:	460e      	mov	r6, r1
 8008ad6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ada:	f000 f997 	bl	8008e0c <_malloc_r>
 8008ade:	4604      	mov	r4, r0
 8008ae0:	b140      	cbz	r0, 8008af4 <__sfmoreglue+0x28>
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	e9c0 1600 	strd	r1, r6, [r0]
 8008ae8:	300c      	adds	r0, #12
 8008aea:	60a0      	str	r0, [r4, #8]
 8008aec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008af0:	f7ff fda2 	bl	8008638 <memset>
 8008af4:	4620      	mov	r0, r4
 8008af6:	bd70      	pop	{r4, r5, r6, pc}

08008af8 <__sfp_lock_acquire>:
 8008af8:	4801      	ldr	r0, [pc, #4]	; (8008b00 <__sfp_lock_acquire+0x8>)
 8008afa:	f000 b8b3 	b.w	8008c64 <__retarget_lock_acquire_recursive>
 8008afe:	bf00      	nop
 8008b00:	240003b9 	.word	0x240003b9

08008b04 <__sfp_lock_release>:
 8008b04:	4801      	ldr	r0, [pc, #4]	; (8008b0c <__sfp_lock_release+0x8>)
 8008b06:	f000 b8ae 	b.w	8008c66 <__retarget_lock_release_recursive>
 8008b0a:	bf00      	nop
 8008b0c:	240003b9 	.word	0x240003b9

08008b10 <__sinit_lock_acquire>:
 8008b10:	4801      	ldr	r0, [pc, #4]	; (8008b18 <__sinit_lock_acquire+0x8>)
 8008b12:	f000 b8a7 	b.w	8008c64 <__retarget_lock_acquire_recursive>
 8008b16:	bf00      	nop
 8008b18:	240003ba 	.word	0x240003ba

08008b1c <__sinit_lock_release>:
 8008b1c:	4801      	ldr	r0, [pc, #4]	; (8008b24 <__sinit_lock_release+0x8>)
 8008b1e:	f000 b8a2 	b.w	8008c66 <__retarget_lock_release_recursive>
 8008b22:	bf00      	nop
 8008b24:	240003ba 	.word	0x240003ba

08008b28 <__sinit>:
 8008b28:	b510      	push	{r4, lr}
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	f7ff fff0 	bl	8008b10 <__sinit_lock_acquire>
 8008b30:	69a3      	ldr	r3, [r4, #24]
 8008b32:	b11b      	cbz	r3, 8008b3c <__sinit+0x14>
 8008b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b38:	f7ff bff0 	b.w	8008b1c <__sinit_lock_release>
 8008b3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b40:	6523      	str	r3, [r4, #80]	; 0x50
 8008b42:	4b13      	ldr	r3, [pc, #76]	; (8008b90 <__sinit+0x68>)
 8008b44:	4a13      	ldr	r2, [pc, #76]	; (8008b94 <__sinit+0x6c>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b4a:	42a3      	cmp	r3, r4
 8008b4c:	bf04      	itt	eq
 8008b4e:	2301      	moveq	r3, #1
 8008b50:	61a3      	streq	r3, [r4, #24]
 8008b52:	4620      	mov	r0, r4
 8008b54:	f000 f820 	bl	8008b98 <__sfp>
 8008b58:	6060      	str	r0, [r4, #4]
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f000 f81c 	bl	8008b98 <__sfp>
 8008b60:	60a0      	str	r0, [r4, #8]
 8008b62:	4620      	mov	r0, r4
 8008b64:	f000 f818 	bl	8008b98 <__sfp>
 8008b68:	2200      	movs	r2, #0
 8008b6a:	60e0      	str	r0, [r4, #12]
 8008b6c:	2104      	movs	r1, #4
 8008b6e:	6860      	ldr	r0, [r4, #4]
 8008b70:	f7ff ff82 	bl	8008a78 <std>
 8008b74:	68a0      	ldr	r0, [r4, #8]
 8008b76:	2201      	movs	r2, #1
 8008b78:	2109      	movs	r1, #9
 8008b7a:	f7ff ff7d 	bl	8008a78 <std>
 8008b7e:	68e0      	ldr	r0, [r4, #12]
 8008b80:	2202      	movs	r2, #2
 8008b82:	2112      	movs	r1, #18
 8008b84:	f7ff ff78 	bl	8008a78 <std>
 8008b88:	2301      	movs	r3, #1
 8008b8a:	61a3      	str	r3, [r4, #24]
 8008b8c:	e7d2      	b.n	8008b34 <__sinit+0xc>
 8008b8e:	bf00      	nop
 8008b90:	08009cc0 	.word	0x08009cc0
 8008b94:	08008ac1 	.word	0x08008ac1

08008b98 <__sfp>:
 8008b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9a:	4607      	mov	r7, r0
 8008b9c:	f7ff ffac 	bl	8008af8 <__sfp_lock_acquire>
 8008ba0:	4b1e      	ldr	r3, [pc, #120]	; (8008c1c <__sfp+0x84>)
 8008ba2:	681e      	ldr	r6, [r3, #0]
 8008ba4:	69b3      	ldr	r3, [r6, #24]
 8008ba6:	b913      	cbnz	r3, 8008bae <__sfp+0x16>
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f7ff ffbd 	bl	8008b28 <__sinit>
 8008bae:	3648      	adds	r6, #72	; 0x48
 8008bb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	d503      	bpl.n	8008bc0 <__sfp+0x28>
 8008bb8:	6833      	ldr	r3, [r6, #0]
 8008bba:	b30b      	cbz	r3, 8008c00 <__sfp+0x68>
 8008bbc:	6836      	ldr	r6, [r6, #0]
 8008bbe:	e7f7      	b.n	8008bb0 <__sfp+0x18>
 8008bc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008bc4:	b9d5      	cbnz	r5, 8008bfc <__sfp+0x64>
 8008bc6:	4b16      	ldr	r3, [pc, #88]	; (8008c20 <__sfp+0x88>)
 8008bc8:	60e3      	str	r3, [r4, #12]
 8008bca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008bce:	6665      	str	r5, [r4, #100]	; 0x64
 8008bd0:	f000 f847 	bl	8008c62 <__retarget_lock_init_recursive>
 8008bd4:	f7ff ff96 	bl	8008b04 <__sfp_lock_release>
 8008bd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008bdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008be0:	6025      	str	r5, [r4, #0]
 8008be2:	61a5      	str	r5, [r4, #24]
 8008be4:	2208      	movs	r2, #8
 8008be6:	4629      	mov	r1, r5
 8008be8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bec:	f7ff fd24 	bl	8008638 <memset>
 8008bf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bfc:	3468      	adds	r4, #104	; 0x68
 8008bfe:	e7d9      	b.n	8008bb4 <__sfp+0x1c>
 8008c00:	2104      	movs	r1, #4
 8008c02:	4638      	mov	r0, r7
 8008c04:	f7ff ff62 	bl	8008acc <__sfmoreglue>
 8008c08:	4604      	mov	r4, r0
 8008c0a:	6030      	str	r0, [r6, #0]
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	d1d5      	bne.n	8008bbc <__sfp+0x24>
 8008c10:	f7ff ff78 	bl	8008b04 <__sfp_lock_release>
 8008c14:	230c      	movs	r3, #12
 8008c16:	603b      	str	r3, [r7, #0]
 8008c18:	e7ee      	b.n	8008bf8 <__sfp+0x60>
 8008c1a:	bf00      	nop
 8008c1c:	08009cc0 	.word	0x08009cc0
 8008c20:	ffff0001 	.word	0xffff0001

08008c24 <_fwalk_reent>:
 8008c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c28:	4606      	mov	r6, r0
 8008c2a:	4688      	mov	r8, r1
 8008c2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c30:	2700      	movs	r7, #0
 8008c32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c36:	f1b9 0901 	subs.w	r9, r9, #1
 8008c3a:	d505      	bpl.n	8008c48 <_fwalk_reent+0x24>
 8008c3c:	6824      	ldr	r4, [r4, #0]
 8008c3e:	2c00      	cmp	r4, #0
 8008c40:	d1f7      	bne.n	8008c32 <_fwalk_reent+0xe>
 8008c42:	4638      	mov	r0, r7
 8008c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c48:	89ab      	ldrh	r3, [r5, #12]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d907      	bls.n	8008c5e <_fwalk_reent+0x3a>
 8008c4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c52:	3301      	adds	r3, #1
 8008c54:	d003      	beq.n	8008c5e <_fwalk_reent+0x3a>
 8008c56:	4629      	mov	r1, r5
 8008c58:	4630      	mov	r0, r6
 8008c5a:	47c0      	blx	r8
 8008c5c:	4307      	orrs	r7, r0
 8008c5e:	3568      	adds	r5, #104	; 0x68
 8008c60:	e7e9      	b.n	8008c36 <_fwalk_reent+0x12>

08008c62 <__retarget_lock_init_recursive>:
 8008c62:	4770      	bx	lr

08008c64 <__retarget_lock_acquire_recursive>:
 8008c64:	4770      	bx	lr

08008c66 <__retarget_lock_release_recursive>:
 8008c66:	4770      	bx	lr

08008c68 <__swhatbuf_r>:
 8008c68:	b570      	push	{r4, r5, r6, lr}
 8008c6a:	460e      	mov	r6, r1
 8008c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c70:	2900      	cmp	r1, #0
 8008c72:	b096      	sub	sp, #88	; 0x58
 8008c74:	4614      	mov	r4, r2
 8008c76:	461d      	mov	r5, r3
 8008c78:	da08      	bge.n	8008c8c <__swhatbuf_r+0x24>
 8008c7a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	602a      	str	r2, [r5, #0]
 8008c82:	061a      	lsls	r2, r3, #24
 8008c84:	d410      	bmi.n	8008ca8 <__swhatbuf_r+0x40>
 8008c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c8a:	e00e      	b.n	8008caa <__swhatbuf_r+0x42>
 8008c8c:	466a      	mov	r2, sp
 8008c8e:	f000 fc97 	bl	80095c0 <_fstat_r>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	dbf1      	blt.n	8008c7a <__swhatbuf_r+0x12>
 8008c96:	9a01      	ldr	r2, [sp, #4]
 8008c98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ca0:	425a      	negs	r2, r3
 8008ca2:	415a      	adcs	r2, r3
 8008ca4:	602a      	str	r2, [r5, #0]
 8008ca6:	e7ee      	b.n	8008c86 <__swhatbuf_r+0x1e>
 8008ca8:	2340      	movs	r3, #64	; 0x40
 8008caa:	2000      	movs	r0, #0
 8008cac:	6023      	str	r3, [r4, #0]
 8008cae:	b016      	add	sp, #88	; 0x58
 8008cb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08008cb4 <__smakebuf_r>:
 8008cb4:	898b      	ldrh	r3, [r1, #12]
 8008cb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cb8:	079d      	lsls	r5, r3, #30
 8008cba:	4606      	mov	r6, r0
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	d507      	bpl.n	8008cd0 <__smakebuf_r+0x1c>
 8008cc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cc4:	6023      	str	r3, [r4, #0]
 8008cc6:	6123      	str	r3, [r4, #16]
 8008cc8:	2301      	movs	r3, #1
 8008cca:	6163      	str	r3, [r4, #20]
 8008ccc:	b002      	add	sp, #8
 8008cce:	bd70      	pop	{r4, r5, r6, pc}
 8008cd0:	ab01      	add	r3, sp, #4
 8008cd2:	466a      	mov	r2, sp
 8008cd4:	f7ff ffc8 	bl	8008c68 <__swhatbuf_r>
 8008cd8:	9900      	ldr	r1, [sp, #0]
 8008cda:	4605      	mov	r5, r0
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f000 f895 	bl	8008e0c <_malloc_r>
 8008ce2:	b948      	cbnz	r0, 8008cf8 <__smakebuf_r+0x44>
 8008ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ce8:	059a      	lsls	r2, r3, #22
 8008cea:	d4ef      	bmi.n	8008ccc <__smakebuf_r+0x18>
 8008cec:	f023 0303 	bic.w	r3, r3, #3
 8008cf0:	f043 0302 	orr.w	r3, r3, #2
 8008cf4:	81a3      	strh	r3, [r4, #12]
 8008cf6:	e7e3      	b.n	8008cc0 <__smakebuf_r+0xc>
 8008cf8:	4b0d      	ldr	r3, [pc, #52]	; (8008d30 <__smakebuf_r+0x7c>)
 8008cfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cfc:	89a3      	ldrh	r3, [r4, #12]
 8008cfe:	6020      	str	r0, [r4, #0]
 8008d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d04:	81a3      	strh	r3, [r4, #12]
 8008d06:	9b00      	ldr	r3, [sp, #0]
 8008d08:	6163      	str	r3, [r4, #20]
 8008d0a:	9b01      	ldr	r3, [sp, #4]
 8008d0c:	6120      	str	r0, [r4, #16]
 8008d0e:	b15b      	cbz	r3, 8008d28 <__smakebuf_r+0x74>
 8008d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d14:	4630      	mov	r0, r6
 8008d16:	f000 fc65 	bl	80095e4 <_isatty_r>
 8008d1a:	b128      	cbz	r0, 8008d28 <__smakebuf_r+0x74>
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	f023 0303 	bic.w	r3, r3, #3
 8008d22:	f043 0301 	orr.w	r3, r3, #1
 8008d26:	81a3      	strh	r3, [r4, #12]
 8008d28:	89a0      	ldrh	r0, [r4, #12]
 8008d2a:	4305      	orrs	r5, r0
 8008d2c:	81a5      	strh	r5, [r4, #12]
 8008d2e:	e7cd      	b.n	8008ccc <__smakebuf_r+0x18>
 8008d30:	08008ac1 	.word	0x08008ac1

08008d34 <_free_r>:
 8008d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d36:	2900      	cmp	r1, #0
 8008d38:	d044      	beq.n	8008dc4 <_free_r+0x90>
 8008d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d3e:	9001      	str	r0, [sp, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f1a1 0404 	sub.w	r4, r1, #4
 8008d46:	bfb8      	it	lt
 8008d48:	18e4      	addlt	r4, r4, r3
 8008d4a:	f000 fc87 	bl	800965c <__malloc_lock>
 8008d4e:	4a1e      	ldr	r2, [pc, #120]	; (8008dc8 <_free_r+0x94>)
 8008d50:	9801      	ldr	r0, [sp, #4]
 8008d52:	6813      	ldr	r3, [r2, #0]
 8008d54:	b933      	cbnz	r3, 8008d64 <_free_r+0x30>
 8008d56:	6063      	str	r3, [r4, #4]
 8008d58:	6014      	str	r4, [r2, #0]
 8008d5a:	b003      	add	sp, #12
 8008d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d60:	f000 bc82 	b.w	8009668 <__malloc_unlock>
 8008d64:	42a3      	cmp	r3, r4
 8008d66:	d908      	bls.n	8008d7a <_free_r+0x46>
 8008d68:	6825      	ldr	r5, [r4, #0]
 8008d6a:	1961      	adds	r1, r4, r5
 8008d6c:	428b      	cmp	r3, r1
 8008d6e:	bf01      	itttt	eq
 8008d70:	6819      	ldreq	r1, [r3, #0]
 8008d72:	685b      	ldreq	r3, [r3, #4]
 8008d74:	1949      	addeq	r1, r1, r5
 8008d76:	6021      	streq	r1, [r4, #0]
 8008d78:	e7ed      	b.n	8008d56 <_free_r+0x22>
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	b10b      	cbz	r3, 8008d84 <_free_r+0x50>
 8008d80:	42a3      	cmp	r3, r4
 8008d82:	d9fa      	bls.n	8008d7a <_free_r+0x46>
 8008d84:	6811      	ldr	r1, [r2, #0]
 8008d86:	1855      	adds	r5, r2, r1
 8008d88:	42a5      	cmp	r5, r4
 8008d8a:	d10b      	bne.n	8008da4 <_free_r+0x70>
 8008d8c:	6824      	ldr	r4, [r4, #0]
 8008d8e:	4421      	add	r1, r4
 8008d90:	1854      	adds	r4, r2, r1
 8008d92:	42a3      	cmp	r3, r4
 8008d94:	6011      	str	r1, [r2, #0]
 8008d96:	d1e0      	bne.n	8008d5a <_free_r+0x26>
 8008d98:	681c      	ldr	r4, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	6053      	str	r3, [r2, #4]
 8008d9e:	4421      	add	r1, r4
 8008da0:	6011      	str	r1, [r2, #0]
 8008da2:	e7da      	b.n	8008d5a <_free_r+0x26>
 8008da4:	d902      	bls.n	8008dac <_free_r+0x78>
 8008da6:	230c      	movs	r3, #12
 8008da8:	6003      	str	r3, [r0, #0]
 8008daa:	e7d6      	b.n	8008d5a <_free_r+0x26>
 8008dac:	6825      	ldr	r5, [r4, #0]
 8008dae:	1961      	adds	r1, r4, r5
 8008db0:	428b      	cmp	r3, r1
 8008db2:	bf04      	itt	eq
 8008db4:	6819      	ldreq	r1, [r3, #0]
 8008db6:	685b      	ldreq	r3, [r3, #4]
 8008db8:	6063      	str	r3, [r4, #4]
 8008dba:	bf04      	itt	eq
 8008dbc:	1949      	addeq	r1, r1, r5
 8008dbe:	6021      	streq	r1, [r4, #0]
 8008dc0:	6054      	str	r4, [r2, #4]
 8008dc2:	e7ca      	b.n	8008d5a <_free_r+0x26>
 8008dc4:	b003      	add	sp, #12
 8008dc6:	bd30      	pop	{r4, r5, pc}
 8008dc8:	240003bc 	.word	0x240003bc

08008dcc <sbrk_aligned>:
 8008dcc:	b570      	push	{r4, r5, r6, lr}
 8008dce:	4e0e      	ldr	r6, [pc, #56]	; (8008e08 <sbrk_aligned+0x3c>)
 8008dd0:	460c      	mov	r4, r1
 8008dd2:	6831      	ldr	r1, [r6, #0]
 8008dd4:	4605      	mov	r5, r0
 8008dd6:	b911      	cbnz	r1, 8008dde <sbrk_aligned+0x12>
 8008dd8:	f000 fb7c 	bl	80094d4 <_sbrk_r>
 8008ddc:	6030      	str	r0, [r6, #0]
 8008dde:	4621      	mov	r1, r4
 8008de0:	4628      	mov	r0, r5
 8008de2:	f000 fb77 	bl	80094d4 <_sbrk_r>
 8008de6:	1c43      	adds	r3, r0, #1
 8008de8:	d00a      	beq.n	8008e00 <sbrk_aligned+0x34>
 8008dea:	1cc4      	adds	r4, r0, #3
 8008dec:	f024 0403 	bic.w	r4, r4, #3
 8008df0:	42a0      	cmp	r0, r4
 8008df2:	d007      	beq.n	8008e04 <sbrk_aligned+0x38>
 8008df4:	1a21      	subs	r1, r4, r0
 8008df6:	4628      	mov	r0, r5
 8008df8:	f000 fb6c 	bl	80094d4 <_sbrk_r>
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	d101      	bne.n	8008e04 <sbrk_aligned+0x38>
 8008e00:	f04f 34ff 	mov.w	r4, #4294967295
 8008e04:	4620      	mov	r0, r4
 8008e06:	bd70      	pop	{r4, r5, r6, pc}
 8008e08:	240003c0 	.word	0x240003c0

08008e0c <_malloc_r>:
 8008e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e10:	1ccd      	adds	r5, r1, #3
 8008e12:	f025 0503 	bic.w	r5, r5, #3
 8008e16:	3508      	adds	r5, #8
 8008e18:	2d0c      	cmp	r5, #12
 8008e1a:	bf38      	it	cc
 8008e1c:	250c      	movcc	r5, #12
 8008e1e:	2d00      	cmp	r5, #0
 8008e20:	4607      	mov	r7, r0
 8008e22:	db01      	blt.n	8008e28 <_malloc_r+0x1c>
 8008e24:	42a9      	cmp	r1, r5
 8008e26:	d905      	bls.n	8008e34 <_malloc_r+0x28>
 8008e28:	230c      	movs	r3, #12
 8008e2a:	603b      	str	r3, [r7, #0]
 8008e2c:	2600      	movs	r6, #0
 8008e2e:	4630      	mov	r0, r6
 8008e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e34:	4e2e      	ldr	r6, [pc, #184]	; (8008ef0 <_malloc_r+0xe4>)
 8008e36:	f000 fc11 	bl	800965c <__malloc_lock>
 8008e3a:	6833      	ldr	r3, [r6, #0]
 8008e3c:	461c      	mov	r4, r3
 8008e3e:	bb34      	cbnz	r4, 8008e8e <_malloc_r+0x82>
 8008e40:	4629      	mov	r1, r5
 8008e42:	4638      	mov	r0, r7
 8008e44:	f7ff ffc2 	bl	8008dcc <sbrk_aligned>
 8008e48:	1c43      	adds	r3, r0, #1
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	d14d      	bne.n	8008eea <_malloc_r+0xde>
 8008e4e:	6834      	ldr	r4, [r6, #0]
 8008e50:	4626      	mov	r6, r4
 8008e52:	2e00      	cmp	r6, #0
 8008e54:	d140      	bne.n	8008ed8 <_malloc_r+0xcc>
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	4631      	mov	r1, r6
 8008e5a:	4638      	mov	r0, r7
 8008e5c:	eb04 0803 	add.w	r8, r4, r3
 8008e60:	f000 fb38 	bl	80094d4 <_sbrk_r>
 8008e64:	4580      	cmp	r8, r0
 8008e66:	d13a      	bne.n	8008ede <_malloc_r+0xd2>
 8008e68:	6821      	ldr	r1, [r4, #0]
 8008e6a:	3503      	adds	r5, #3
 8008e6c:	1a6d      	subs	r5, r5, r1
 8008e6e:	f025 0503 	bic.w	r5, r5, #3
 8008e72:	3508      	adds	r5, #8
 8008e74:	2d0c      	cmp	r5, #12
 8008e76:	bf38      	it	cc
 8008e78:	250c      	movcc	r5, #12
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	4638      	mov	r0, r7
 8008e7e:	f7ff ffa5 	bl	8008dcc <sbrk_aligned>
 8008e82:	3001      	adds	r0, #1
 8008e84:	d02b      	beq.n	8008ede <_malloc_r+0xd2>
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	442b      	add	r3, r5
 8008e8a:	6023      	str	r3, [r4, #0]
 8008e8c:	e00e      	b.n	8008eac <_malloc_r+0xa0>
 8008e8e:	6822      	ldr	r2, [r4, #0]
 8008e90:	1b52      	subs	r2, r2, r5
 8008e92:	d41e      	bmi.n	8008ed2 <_malloc_r+0xc6>
 8008e94:	2a0b      	cmp	r2, #11
 8008e96:	d916      	bls.n	8008ec6 <_malloc_r+0xba>
 8008e98:	1961      	adds	r1, r4, r5
 8008e9a:	42a3      	cmp	r3, r4
 8008e9c:	6025      	str	r5, [r4, #0]
 8008e9e:	bf18      	it	ne
 8008ea0:	6059      	strne	r1, [r3, #4]
 8008ea2:	6863      	ldr	r3, [r4, #4]
 8008ea4:	bf08      	it	eq
 8008ea6:	6031      	streq	r1, [r6, #0]
 8008ea8:	5162      	str	r2, [r4, r5]
 8008eaa:	604b      	str	r3, [r1, #4]
 8008eac:	4638      	mov	r0, r7
 8008eae:	f104 060b 	add.w	r6, r4, #11
 8008eb2:	f000 fbd9 	bl	8009668 <__malloc_unlock>
 8008eb6:	f026 0607 	bic.w	r6, r6, #7
 8008eba:	1d23      	adds	r3, r4, #4
 8008ebc:	1af2      	subs	r2, r6, r3
 8008ebe:	d0b6      	beq.n	8008e2e <_malloc_r+0x22>
 8008ec0:	1b9b      	subs	r3, r3, r6
 8008ec2:	50a3      	str	r3, [r4, r2]
 8008ec4:	e7b3      	b.n	8008e2e <_malloc_r+0x22>
 8008ec6:	6862      	ldr	r2, [r4, #4]
 8008ec8:	42a3      	cmp	r3, r4
 8008eca:	bf0c      	ite	eq
 8008ecc:	6032      	streq	r2, [r6, #0]
 8008ece:	605a      	strne	r2, [r3, #4]
 8008ed0:	e7ec      	b.n	8008eac <_malloc_r+0xa0>
 8008ed2:	4623      	mov	r3, r4
 8008ed4:	6864      	ldr	r4, [r4, #4]
 8008ed6:	e7b2      	b.n	8008e3e <_malloc_r+0x32>
 8008ed8:	4634      	mov	r4, r6
 8008eda:	6876      	ldr	r6, [r6, #4]
 8008edc:	e7b9      	b.n	8008e52 <_malloc_r+0x46>
 8008ede:	230c      	movs	r3, #12
 8008ee0:	603b      	str	r3, [r7, #0]
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	f000 fbc0 	bl	8009668 <__malloc_unlock>
 8008ee8:	e7a1      	b.n	8008e2e <_malloc_r+0x22>
 8008eea:	6025      	str	r5, [r4, #0]
 8008eec:	e7de      	b.n	8008eac <_malloc_r+0xa0>
 8008eee:	bf00      	nop
 8008ef0:	240003bc 	.word	0x240003bc

08008ef4 <__ssputs_r>:
 8008ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef8:	688e      	ldr	r6, [r1, #8]
 8008efa:	429e      	cmp	r6, r3
 8008efc:	4682      	mov	sl, r0
 8008efe:	460c      	mov	r4, r1
 8008f00:	4690      	mov	r8, r2
 8008f02:	461f      	mov	r7, r3
 8008f04:	d838      	bhi.n	8008f78 <__ssputs_r+0x84>
 8008f06:	898a      	ldrh	r2, [r1, #12]
 8008f08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f0c:	d032      	beq.n	8008f74 <__ssputs_r+0x80>
 8008f0e:	6825      	ldr	r5, [r4, #0]
 8008f10:	6909      	ldr	r1, [r1, #16]
 8008f12:	eba5 0901 	sub.w	r9, r5, r1
 8008f16:	6965      	ldr	r5, [r4, #20]
 8008f18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f20:	3301      	adds	r3, #1
 8008f22:	444b      	add	r3, r9
 8008f24:	106d      	asrs	r5, r5, #1
 8008f26:	429d      	cmp	r5, r3
 8008f28:	bf38      	it	cc
 8008f2a:	461d      	movcc	r5, r3
 8008f2c:	0553      	lsls	r3, r2, #21
 8008f2e:	d531      	bpl.n	8008f94 <__ssputs_r+0xa0>
 8008f30:	4629      	mov	r1, r5
 8008f32:	f7ff ff6b 	bl	8008e0c <_malloc_r>
 8008f36:	4606      	mov	r6, r0
 8008f38:	b950      	cbnz	r0, 8008f50 <__ssputs_r+0x5c>
 8008f3a:	230c      	movs	r3, #12
 8008f3c:	f8ca 3000 	str.w	r3, [sl]
 8008f40:	89a3      	ldrh	r3, [r4, #12]
 8008f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f46:	81a3      	strh	r3, [r4, #12]
 8008f48:	f04f 30ff 	mov.w	r0, #4294967295
 8008f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f50:	6921      	ldr	r1, [r4, #16]
 8008f52:	464a      	mov	r2, r9
 8008f54:	f7ff fb62 	bl	800861c <memcpy>
 8008f58:	89a3      	ldrh	r3, [r4, #12]
 8008f5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f62:	81a3      	strh	r3, [r4, #12]
 8008f64:	6126      	str	r6, [r4, #16]
 8008f66:	6165      	str	r5, [r4, #20]
 8008f68:	444e      	add	r6, r9
 8008f6a:	eba5 0509 	sub.w	r5, r5, r9
 8008f6e:	6026      	str	r6, [r4, #0]
 8008f70:	60a5      	str	r5, [r4, #8]
 8008f72:	463e      	mov	r6, r7
 8008f74:	42be      	cmp	r6, r7
 8008f76:	d900      	bls.n	8008f7a <__ssputs_r+0x86>
 8008f78:	463e      	mov	r6, r7
 8008f7a:	6820      	ldr	r0, [r4, #0]
 8008f7c:	4632      	mov	r2, r6
 8008f7e:	4641      	mov	r1, r8
 8008f80:	f000 fb52 	bl	8009628 <memmove>
 8008f84:	68a3      	ldr	r3, [r4, #8]
 8008f86:	1b9b      	subs	r3, r3, r6
 8008f88:	60a3      	str	r3, [r4, #8]
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	4433      	add	r3, r6
 8008f8e:	6023      	str	r3, [r4, #0]
 8008f90:	2000      	movs	r0, #0
 8008f92:	e7db      	b.n	8008f4c <__ssputs_r+0x58>
 8008f94:	462a      	mov	r2, r5
 8008f96:	f000 fb6d 	bl	8009674 <_realloc_r>
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	d1e1      	bne.n	8008f64 <__ssputs_r+0x70>
 8008fa0:	6921      	ldr	r1, [r4, #16]
 8008fa2:	4650      	mov	r0, sl
 8008fa4:	f7ff fec6 	bl	8008d34 <_free_r>
 8008fa8:	e7c7      	b.n	8008f3a <__ssputs_r+0x46>
	...

08008fac <_svfiprintf_r>:
 8008fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb0:	4698      	mov	r8, r3
 8008fb2:	898b      	ldrh	r3, [r1, #12]
 8008fb4:	061b      	lsls	r3, r3, #24
 8008fb6:	b09d      	sub	sp, #116	; 0x74
 8008fb8:	4607      	mov	r7, r0
 8008fba:	460d      	mov	r5, r1
 8008fbc:	4614      	mov	r4, r2
 8008fbe:	d50e      	bpl.n	8008fde <_svfiprintf_r+0x32>
 8008fc0:	690b      	ldr	r3, [r1, #16]
 8008fc2:	b963      	cbnz	r3, 8008fde <_svfiprintf_r+0x32>
 8008fc4:	2140      	movs	r1, #64	; 0x40
 8008fc6:	f7ff ff21 	bl	8008e0c <_malloc_r>
 8008fca:	6028      	str	r0, [r5, #0]
 8008fcc:	6128      	str	r0, [r5, #16]
 8008fce:	b920      	cbnz	r0, 8008fda <_svfiprintf_r+0x2e>
 8008fd0:	230c      	movs	r3, #12
 8008fd2:	603b      	str	r3, [r7, #0]
 8008fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd8:	e0d1      	b.n	800917e <_svfiprintf_r+0x1d2>
 8008fda:	2340      	movs	r3, #64	; 0x40
 8008fdc:	616b      	str	r3, [r5, #20]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe2:	2320      	movs	r3, #32
 8008fe4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fe8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fec:	2330      	movs	r3, #48	; 0x30
 8008fee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009198 <_svfiprintf_r+0x1ec>
 8008ff2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ff6:	f04f 0901 	mov.w	r9, #1
 8008ffa:	4623      	mov	r3, r4
 8008ffc:	469a      	mov	sl, r3
 8008ffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009002:	b10a      	cbz	r2, 8009008 <_svfiprintf_r+0x5c>
 8009004:	2a25      	cmp	r2, #37	; 0x25
 8009006:	d1f9      	bne.n	8008ffc <_svfiprintf_r+0x50>
 8009008:	ebba 0b04 	subs.w	fp, sl, r4
 800900c:	d00b      	beq.n	8009026 <_svfiprintf_r+0x7a>
 800900e:	465b      	mov	r3, fp
 8009010:	4622      	mov	r2, r4
 8009012:	4629      	mov	r1, r5
 8009014:	4638      	mov	r0, r7
 8009016:	f7ff ff6d 	bl	8008ef4 <__ssputs_r>
 800901a:	3001      	adds	r0, #1
 800901c:	f000 80aa 	beq.w	8009174 <_svfiprintf_r+0x1c8>
 8009020:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009022:	445a      	add	r2, fp
 8009024:	9209      	str	r2, [sp, #36]	; 0x24
 8009026:	f89a 3000 	ldrb.w	r3, [sl]
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 80a2 	beq.w	8009174 <_svfiprintf_r+0x1c8>
 8009030:	2300      	movs	r3, #0
 8009032:	f04f 32ff 	mov.w	r2, #4294967295
 8009036:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800903a:	f10a 0a01 	add.w	sl, sl, #1
 800903e:	9304      	str	r3, [sp, #16]
 8009040:	9307      	str	r3, [sp, #28]
 8009042:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009046:	931a      	str	r3, [sp, #104]	; 0x68
 8009048:	4654      	mov	r4, sl
 800904a:	2205      	movs	r2, #5
 800904c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009050:	4851      	ldr	r0, [pc, #324]	; (8009198 <_svfiprintf_r+0x1ec>)
 8009052:	f7f7 f94d 	bl	80002f0 <memchr>
 8009056:	9a04      	ldr	r2, [sp, #16]
 8009058:	b9d8      	cbnz	r0, 8009092 <_svfiprintf_r+0xe6>
 800905a:	06d0      	lsls	r0, r2, #27
 800905c:	bf44      	itt	mi
 800905e:	2320      	movmi	r3, #32
 8009060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009064:	0711      	lsls	r1, r2, #28
 8009066:	bf44      	itt	mi
 8009068:	232b      	movmi	r3, #43	; 0x2b
 800906a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800906e:	f89a 3000 	ldrb.w	r3, [sl]
 8009072:	2b2a      	cmp	r3, #42	; 0x2a
 8009074:	d015      	beq.n	80090a2 <_svfiprintf_r+0xf6>
 8009076:	9a07      	ldr	r2, [sp, #28]
 8009078:	4654      	mov	r4, sl
 800907a:	2000      	movs	r0, #0
 800907c:	f04f 0c0a 	mov.w	ip, #10
 8009080:	4621      	mov	r1, r4
 8009082:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009086:	3b30      	subs	r3, #48	; 0x30
 8009088:	2b09      	cmp	r3, #9
 800908a:	d94e      	bls.n	800912a <_svfiprintf_r+0x17e>
 800908c:	b1b0      	cbz	r0, 80090bc <_svfiprintf_r+0x110>
 800908e:	9207      	str	r2, [sp, #28]
 8009090:	e014      	b.n	80090bc <_svfiprintf_r+0x110>
 8009092:	eba0 0308 	sub.w	r3, r0, r8
 8009096:	fa09 f303 	lsl.w	r3, r9, r3
 800909a:	4313      	orrs	r3, r2
 800909c:	9304      	str	r3, [sp, #16]
 800909e:	46a2      	mov	sl, r4
 80090a0:	e7d2      	b.n	8009048 <_svfiprintf_r+0x9c>
 80090a2:	9b03      	ldr	r3, [sp, #12]
 80090a4:	1d19      	adds	r1, r3, #4
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	9103      	str	r1, [sp, #12]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	bfbb      	ittet	lt
 80090ae:	425b      	neglt	r3, r3
 80090b0:	f042 0202 	orrlt.w	r2, r2, #2
 80090b4:	9307      	strge	r3, [sp, #28]
 80090b6:	9307      	strlt	r3, [sp, #28]
 80090b8:	bfb8      	it	lt
 80090ba:	9204      	strlt	r2, [sp, #16]
 80090bc:	7823      	ldrb	r3, [r4, #0]
 80090be:	2b2e      	cmp	r3, #46	; 0x2e
 80090c0:	d10c      	bne.n	80090dc <_svfiprintf_r+0x130>
 80090c2:	7863      	ldrb	r3, [r4, #1]
 80090c4:	2b2a      	cmp	r3, #42	; 0x2a
 80090c6:	d135      	bne.n	8009134 <_svfiprintf_r+0x188>
 80090c8:	9b03      	ldr	r3, [sp, #12]
 80090ca:	1d1a      	adds	r2, r3, #4
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	9203      	str	r2, [sp, #12]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	bfb8      	it	lt
 80090d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80090d8:	3402      	adds	r4, #2
 80090da:	9305      	str	r3, [sp, #20]
 80090dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091a8 <_svfiprintf_r+0x1fc>
 80090e0:	7821      	ldrb	r1, [r4, #0]
 80090e2:	2203      	movs	r2, #3
 80090e4:	4650      	mov	r0, sl
 80090e6:	f7f7 f903 	bl	80002f0 <memchr>
 80090ea:	b140      	cbz	r0, 80090fe <_svfiprintf_r+0x152>
 80090ec:	2340      	movs	r3, #64	; 0x40
 80090ee:	eba0 000a 	sub.w	r0, r0, sl
 80090f2:	fa03 f000 	lsl.w	r0, r3, r0
 80090f6:	9b04      	ldr	r3, [sp, #16]
 80090f8:	4303      	orrs	r3, r0
 80090fa:	3401      	adds	r4, #1
 80090fc:	9304      	str	r3, [sp, #16]
 80090fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009102:	4826      	ldr	r0, [pc, #152]	; (800919c <_svfiprintf_r+0x1f0>)
 8009104:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009108:	2206      	movs	r2, #6
 800910a:	f7f7 f8f1 	bl	80002f0 <memchr>
 800910e:	2800      	cmp	r0, #0
 8009110:	d038      	beq.n	8009184 <_svfiprintf_r+0x1d8>
 8009112:	4b23      	ldr	r3, [pc, #140]	; (80091a0 <_svfiprintf_r+0x1f4>)
 8009114:	bb1b      	cbnz	r3, 800915e <_svfiprintf_r+0x1b2>
 8009116:	9b03      	ldr	r3, [sp, #12]
 8009118:	3307      	adds	r3, #7
 800911a:	f023 0307 	bic.w	r3, r3, #7
 800911e:	3308      	adds	r3, #8
 8009120:	9303      	str	r3, [sp, #12]
 8009122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009124:	4433      	add	r3, r6
 8009126:	9309      	str	r3, [sp, #36]	; 0x24
 8009128:	e767      	b.n	8008ffa <_svfiprintf_r+0x4e>
 800912a:	fb0c 3202 	mla	r2, ip, r2, r3
 800912e:	460c      	mov	r4, r1
 8009130:	2001      	movs	r0, #1
 8009132:	e7a5      	b.n	8009080 <_svfiprintf_r+0xd4>
 8009134:	2300      	movs	r3, #0
 8009136:	3401      	adds	r4, #1
 8009138:	9305      	str	r3, [sp, #20]
 800913a:	4619      	mov	r1, r3
 800913c:	f04f 0c0a 	mov.w	ip, #10
 8009140:	4620      	mov	r0, r4
 8009142:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009146:	3a30      	subs	r2, #48	; 0x30
 8009148:	2a09      	cmp	r2, #9
 800914a:	d903      	bls.n	8009154 <_svfiprintf_r+0x1a8>
 800914c:	2b00      	cmp	r3, #0
 800914e:	d0c5      	beq.n	80090dc <_svfiprintf_r+0x130>
 8009150:	9105      	str	r1, [sp, #20]
 8009152:	e7c3      	b.n	80090dc <_svfiprintf_r+0x130>
 8009154:	fb0c 2101 	mla	r1, ip, r1, r2
 8009158:	4604      	mov	r4, r0
 800915a:	2301      	movs	r3, #1
 800915c:	e7f0      	b.n	8009140 <_svfiprintf_r+0x194>
 800915e:	ab03      	add	r3, sp, #12
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	462a      	mov	r2, r5
 8009164:	4b0f      	ldr	r3, [pc, #60]	; (80091a4 <_svfiprintf_r+0x1f8>)
 8009166:	a904      	add	r1, sp, #16
 8009168:	4638      	mov	r0, r7
 800916a:	f3af 8000 	nop.w
 800916e:	1c42      	adds	r2, r0, #1
 8009170:	4606      	mov	r6, r0
 8009172:	d1d6      	bne.n	8009122 <_svfiprintf_r+0x176>
 8009174:	89ab      	ldrh	r3, [r5, #12]
 8009176:	065b      	lsls	r3, r3, #25
 8009178:	f53f af2c 	bmi.w	8008fd4 <_svfiprintf_r+0x28>
 800917c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800917e:	b01d      	add	sp, #116	; 0x74
 8009180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009184:	ab03      	add	r3, sp, #12
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	462a      	mov	r2, r5
 800918a:	4b06      	ldr	r3, [pc, #24]	; (80091a4 <_svfiprintf_r+0x1f8>)
 800918c:	a904      	add	r1, sp, #16
 800918e:	4638      	mov	r0, r7
 8009190:	f000 f87a 	bl	8009288 <_printf_i>
 8009194:	e7eb      	b.n	800916e <_svfiprintf_r+0x1c2>
 8009196:	bf00      	nop
 8009198:	08009d24 	.word	0x08009d24
 800919c:	08009d2e 	.word	0x08009d2e
 80091a0:	00000000 	.word	0x00000000
 80091a4:	08008ef5 	.word	0x08008ef5
 80091a8:	08009d2a 	.word	0x08009d2a

080091ac <_printf_common>:
 80091ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091b0:	4616      	mov	r6, r2
 80091b2:	4699      	mov	r9, r3
 80091b4:	688a      	ldr	r2, [r1, #8]
 80091b6:	690b      	ldr	r3, [r1, #16]
 80091b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091bc:	4293      	cmp	r3, r2
 80091be:	bfb8      	it	lt
 80091c0:	4613      	movlt	r3, r2
 80091c2:	6033      	str	r3, [r6, #0]
 80091c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091c8:	4607      	mov	r7, r0
 80091ca:	460c      	mov	r4, r1
 80091cc:	b10a      	cbz	r2, 80091d2 <_printf_common+0x26>
 80091ce:	3301      	adds	r3, #1
 80091d0:	6033      	str	r3, [r6, #0]
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	0699      	lsls	r1, r3, #26
 80091d6:	bf42      	ittt	mi
 80091d8:	6833      	ldrmi	r3, [r6, #0]
 80091da:	3302      	addmi	r3, #2
 80091dc:	6033      	strmi	r3, [r6, #0]
 80091de:	6825      	ldr	r5, [r4, #0]
 80091e0:	f015 0506 	ands.w	r5, r5, #6
 80091e4:	d106      	bne.n	80091f4 <_printf_common+0x48>
 80091e6:	f104 0a19 	add.w	sl, r4, #25
 80091ea:	68e3      	ldr	r3, [r4, #12]
 80091ec:	6832      	ldr	r2, [r6, #0]
 80091ee:	1a9b      	subs	r3, r3, r2
 80091f0:	42ab      	cmp	r3, r5
 80091f2:	dc26      	bgt.n	8009242 <_printf_common+0x96>
 80091f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091f8:	1e13      	subs	r3, r2, #0
 80091fa:	6822      	ldr	r2, [r4, #0]
 80091fc:	bf18      	it	ne
 80091fe:	2301      	movne	r3, #1
 8009200:	0692      	lsls	r2, r2, #26
 8009202:	d42b      	bmi.n	800925c <_printf_common+0xb0>
 8009204:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009208:	4649      	mov	r1, r9
 800920a:	4638      	mov	r0, r7
 800920c:	47c0      	blx	r8
 800920e:	3001      	adds	r0, #1
 8009210:	d01e      	beq.n	8009250 <_printf_common+0xa4>
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	68e5      	ldr	r5, [r4, #12]
 8009216:	6832      	ldr	r2, [r6, #0]
 8009218:	f003 0306 	and.w	r3, r3, #6
 800921c:	2b04      	cmp	r3, #4
 800921e:	bf08      	it	eq
 8009220:	1aad      	subeq	r5, r5, r2
 8009222:	68a3      	ldr	r3, [r4, #8]
 8009224:	6922      	ldr	r2, [r4, #16]
 8009226:	bf0c      	ite	eq
 8009228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800922c:	2500      	movne	r5, #0
 800922e:	4293      	cmp	r3, r2
 8009230:	bfc4      	itt	gt
 8009232:	1a9b      	subgt	r3, r3, r2
 8009234:	18ed      	addgt	r5, r5, r3
 8009236:	2600      	movs	r6, #0
 8009238:	341a      	adds	r4, #26
 800923a:	42b5      	cmp	r5, r6
 800923c:	d11a      	bne.n	8009274 <_printf_common+0xc8>
 800923e:	2000      	movs	r0, #0
 8009240:	e008      	b.n	8009254 <_printf_common+0xa8>
 8009242:	2301      	movs	r3, #1
 8009244:	4652      	mov	r2, sl
 8009246:	4649      	mov	r1, r9
 8009248:	4638      	mov	r0, r7
 800924a:	47c0      	blx	r8
 800924c:	3001      	adds	r0, #1
 800924e:	d103      	bne.n	8009258 <_printf_common+0xac>
 8009250:	f04f 30ff 	mov.w	r0, #4294967295
 8009254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009258:	3501      	adds	r5, #1
 800925a:	e7c6      	b.n	80091ea <_printf_common+0x3e>
 800925c:	18e1      	adds	r1, r4, r3
 800925e:	1c5a      	adds	r2, r3, #1
 8009260:	2030      	movs	r0, #48	; 0x30
 8009262:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009266:	4422      	add	r2, r4
 8009268:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800926c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009270:	3302      	adds	r3, #2
 8009272:	e7c7      	b.n	8009204 <_printf_common+0x58>
 8009274:	2301      	movs	r3, #1
 8009276:	4622      	mov	r2, r4
 8009278:	4649      	mov	r1, r9
 800927a:	4638      	mov	r0, r7
 800927c:	47c0      	blx	r8
 800927e:	3001      	adds	r0, #1
 8009280:	d0e6      	beq.n	8009250 <_printf_common+0xa4>
 8009282:	3601      	adds	r6, #1
 8009284:	e7d9      	b.n	800923a <_printf_common+0x8e>
	...

08009288 <_printf_i>:
 8009288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800928c:	7e0f      	ldrb	r7, [r1, #24]
 800928e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009290:	2f78      	cmp	r7, #120	; 0x78
 8009292:	4691      	mov	r9, r2
 8009294:	4680      	mov	r8, r0
 8009296:	460c      	mov	r4, r1
 8009298:	469a      	mov	sl, r3
 800929a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800929e:	d807      	bhi.n	80092b0 <_printf_i+0x28>
 80092a0:	2f62      	cmp	r7, #98	; 0x62
 80092a2:	d80a      	bhi.n	80092ba <_printf_i+0x32>
 80092a4:	2f00      	cmp	r7, #0
 80092a6:	f000 80d8 	beq.w	800945a <_printf_i+0x1d2>
 80092aa:	2f58      	cmp	r7, #88	; 0x58
 80092ac:	f000 80a3 	beq.w	80093f6 <_printf_i+0x16e>
 80092b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092b8:	e03a      	b.n	8009330 <_printf_i+0xa8>
 80092ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092be:	2b15      	cmp	r3, #21
 80092c0:	d8f6      	bhi.n	80092b0 <_printf_i+0x28>
 80092c2:	a101      	add	r1, pc, #4	; (adr r1, 80092c8 <_printf_i+0x40>)
 80092c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092c8:	08009321 	.word	0x08009321
 80092cc:	08009335 	.word	0x08009335
 80092d0:	080092b1 	.word	0x080092b1
 80092d4:	080092b1 	.word	0x080092b1
 80092d8:	080092b1 	.word	0x080092b1
 80092dc:	080092b1 	.word	0x080092b1
 80092e0:	08009335 	.word	0x08009335
 80092e4:	080092b1 	.word	0x080092b1
 80092e8:	080092b1 	.word	0x080092b1
 80092ec:	080092b1 	.word	0x080092b1
 80092f0:	080092b1 	.word	0x080092b1
 80092f4:	08009441 	.word	0x08009441
 80092f8:	08009365 	.word	0x08009365
 80092fc:	08009423 	.word	0x08009423
 8009300:	080092b1 	.word	0x080092b1
 8009304:	080092b1 	.word	0x080092b1
 8009308:	08009463 	.word	0x08009463
 800930c:	080092b1 	.word	0x080092b1
 8009310:	08009365 	.word	0x08009365
 8009314:	080092b1 	.word	0x080092b1
 8009318:	080092b1 	.word	0x080092b1
 800931c:	0800942b 	.word	0x0800942b
 8009320:	682b      	ldr	r3, [r5, #0]
 8009322:	1d1a      	adds	r2, r3, #4
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	602a      	str	r2, [r5, #0]
 8009328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800932c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009330:	2301      	movs	r3, #1
 8009332:	e0a3      	b.n	800947c <_printf_i+0x1f4>
 8009334:	6820      	ldr	r0, [r4, #0]
 8009336:	6829      	ldr	r1, [r5, #0]
 8009338:	0606      	lsls	r6, r0, #24
 800933a:	f101 0304 	add.w	r3, r1, #4
 800933e:	d50a      	bpl.n	8009356 <_printf_i+0xce>
 8009340:	680e      	ldr	r6, [r1, #0]
 8009342:	602b      	str	r3, [r5, #0]
 8009344:	2e00      	cmp	r6, #0
 8009346:	da03      	bge.n	8009350 <_printf_i+0xc8>
 8009348:	232d      	movs	r3, #45	; 0x2d
 800934a:	4276      	negs	r6, r6
 800934c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009350:	485e      	ldr	r0, [pc, #376]	; (80094cc <_printf_i+0x244>)
 8009352:	230a      	movs	r3, #10
 8009354:	e019      	b.n	800938a <_printf_i+0x102>
 8009356:	680e      	ldr	r6, [r1, #0]
 8009358:	602b      	str	r3, [r5, #0]
 800935a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800935e:	bf18      	it	ne
 8009360:	b236      	sxthne	r6, r6
 8009362:	e7ef      	b.n	8009344 <_printf_i+0xbc>
 8009364:	682b      	ldr	r3, [r5, #0]
 8009366:	6820      	ldr	r0, [r4, #0]
 8009368:	1d19      	adds	r1, r3, #4
 800936a:	6029      	str	r1, [r5, #0]
 800936c:	0601      	lsls	r1, r0, #24
 800936e:	d501      	bpl.n	8009374 <_printf_i+0xec>
 8009370:	681e      	ldr	r6, [r3, #0]
 8009372:	e002      	b.n	800937a <_printf_i+0xf2>
 8009374:	0646      	lsls	r6, r0, #25
 8009376:	d5fb      	bpl.n	8009370 <_printf_i+0xe8>
 8009378:	881e      	ldrh	r6, [r3, #0]
 800937a:	4854      	ldr	r0, [pc, #336]	; (80094cc <_printf_i+0x244>)
 800937c:	2f6f      	cmp	r7, #111	; 0x6f
 800937e:	bf0c      	ite	eq
 8009380:	2308      	moveq	r3, #8
 8009382:	230a      	movne	r3, #10
 8009384:	2100      	movs	r1, #0
 8009386:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800938a:	6865      	ldr	r5, [r4, #4]
 800938c:	60a5      	str	r5, [r4, #8]
 800938e:	2d00      	cmp	r5, #0
 8009390:	bfa2      	ittt	ge
 8009392:	6821      	ldrge	r1, [r4, #0]
 8009394:	f021 0104 	bicge.w	r1, r1, #4
 8009398:	6021      	strge	r1, [r4, #0]
 800939a:	b90e      	cbnz	r6, 80093a0 <_printf_i+0x118>
 800939c:	2d00      	cmp	r5, #0
 800939e:	d04d      	beq.n	800943c <_printf_i+0x1b4>
 80093a0:	4615      	mov	r5, r2
 80093a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80093a6:	fb03 6711 	mls	r7, r3, r1, r6
 80093aa:	5dc7      	ldrb	r7, [r0, r7]
 80093ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093b0:	4637      	mov	r7, r6
 80093b2:	42bb      	cmp	r3, r7
 80093b4:	460e      	mov	r6, r1
 80093b6:	d9f4      	bls.n	80093a2 <_printf_i+0x11a>
 80093b8:	2b08      	cmp	r3, #8
 80093ba:	d10b      	bne.n	80093d4 <_printf_i+0x14c>
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	07de      	lsls	r6, r3, #31
 80093c0:	d508      	bpl.n	80093d4 <_printf_i+0x14c>
 80093c2:	6923      	ldr	r3, [r4, #16]
 80093c4:	6861      	ldr	r1, [r4, #4]
 80093c6:	4299      	cmp	r1, r3
 80093c8:	bfde      	ittt	le
 80093ca:	2330      	movle	r3, #48	; 0x30
 80093cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80093d4:	1b52      	subs	r2, r2, r5
 80093d6:	6122      	str	r2, [r4, #16]
 80093d8:	f8cd a000 	str.w	sl, [sp]
 80093dc:	464b      	mov	r3, r9
 80093de:	aa03      	add	r2, sp, #12
 80093e0:	4621      	mov	r1, r4
 80093e2:	4640      	mov	r0, r8
 80093e4:	f7ff fee2 	bl	80091ac <_printf_common>
 80093e8:	3001      	adds	r0, #1
 80093ea:	d14c      	bne.n	8009486 <_printf_i+0x1fe>
 80093ec:	f04f 30ff 	mov.w	r0, #4294967295
 80093f0:	b004      	add	sp, #16
 80093f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f6:	4835      	ldr	r0, [pc, #212]	; (80094cc <_printf_i+0x244>)
 80093f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80093fc:	6829      	ldr	r1, [r5, #0]
 80093fe:	6823      	ldr	r3, [r4, #0]
 8009400:	f851 6b04 	ldr.w	r6, [r1], #4
 8009404:	6029      	str	r1, [r5, #0]
 8009406:	061d      	lsls	r5, r3, #24
 8009408:	d514      	bpl.n	8009434 <_printf_i+0x1ac>
 800940a:	07df      	lsls	r7, r3, #31
 800940c:	bf44      	itt	mi
 800940e:	f043 0320 	orrmi.w	r3, r3, #32
 8009412:	6023      	strmi	r3, [r4, #0]
 8009414:	b91e      	cbnz	r6, 800941e <_printf_i+0x196>
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	f023 0320 	bic.w	r3, r3, #32
 800941c:	6023      	str	r3, [r4, #0]
 800941e:	2310      	movs	r3, #16
 8009420:	e7b0      	b.n	8009384 <_printf_i+0xfc>
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	f043 0320 	orr.w	r3, r3, #32
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	2378      	movs	r3, #120	; 0x78
 800942c:	4828      	ldr	r0, [pc, #160]	; (80094d0 <_printf_i+0x248>)
 800942e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009432:	e7e3      	b.n	80093fc <_printf_i+0x174>
 8009434:	0659      	lsls	r1, r3, #25
 8009436:	bf48      	it	mi
 8009438:	b2b6      	uxthmi	r6, r6
 800943a:	e7e6      	b.n	800940a <_printf_i+0x182>
 800943c:	4615      	mov	r5, r2
 800943e:	e7bb      	b.n	80093b8 <_printf_i+0x130>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	6826      	ldr	r6, [r4, #0]
 8009444:	6961      	ldr	r1, [r4, #20]
 8009446:	1d18      	adds	r0, r3, #4
 8009448:	6028      	str	r0, [r5, #0]
 800944a:	0635      	lsls	r5, r6, #24
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	d501      	bpl.n	8009454 <_printf_i+0x1cc>
 8009450:	6019      	str	r1, [r3, #0]
 8009452:	e002      	b.n	800945a <_printf_i+0x1d2>
 8009454:	0670      	lsls	r0, r6, #25
 8009456:	d5fb      	bpl.n	8009450 <_printf_i+0x1c8>
 8009458:	8019      	strh	r1, [r3, #0]
 800945a:	2300      	movs	r3, #0
 800945c:	6123      	str	r3, [r4, #16]
 800945e:	4615      	mov	r5, r2
 8009460:	e7ba      	b.n	80093d8 <_printf_i+0x150>
 8009462:	682b      	ldr	r3, [r5, #0]
 8009464:	1d1a      	adds	r2, r3, #4
 8009466:	602a      	str	r2, [r5, #0]
 8009468:	681d      	ldr	r5, [r3, #0]
 800946a:	6862      	ldr	r2, [r4, #4]
 800946c:	2100      	movs	r1, #0
 800946e:	4628      	mov	r0, r5
 8009470:	f7f6 ff3e 	bl	80002f0 <memchr>
 8009474:	b108      	cbz	r0, 800947a <_printf_i+0x1f2>
 8009476:	1b40      	subs	r0, r0, r5
 8009478:	6060      	str	r0, [r4, #4]
 800947a:	6863      	ldr	r3, [r4, #4]
 800947c:	6123      	str	r3, [r4, #16]
 800947e:	2300      	movs	r3, #0
 8009480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009484:	e7a8      	b.n	80093d8 <_printf_i+0x150>
 8009486:	6923      	ldr	r3, [r4, #16]
 8009488:	462a      	mov	r2, r5
 800948a:	4649      	mov	r1, r9
 800948c:	4640      	mov	r0, r8
 800948e:	47d0      	blx	sl
 8009490:	3001      	adds	r0, #1
 8009492:	d0ab      	beq.n	80093ec <_printf_i+0x164>
 8009494:	6823      	ldr	r3, [r4, #0]
 8009496:	079b      	lsls	r3, r3, #30
 8009498:	d413      	bmi.n	80094c2 <_printf_i+0x23a>
 800949a:	68e0      	ldr	r0, [r4, #12]
 800949c:	9b03      	ldr	r3, [sp, #12]
 800949e:	4298      	cmp	r0, r3
 80094a0:	bfb8      	it	lt
 80094a2:	4618      	movlt	r0, r3
 80094a4:	e7a4      	b.n	80093f0 <_printf_i+0x168>
 80094a6:	2301      	movs	r3, #1
 80094a8:	4632      	mov	r2, r6
 80094aa:	4649      	mov	r1, r9
 80094ac:	4640      	mov	r0, r8
 80094ae:	47d0      	blx	sl
 80094b0:	3001      	adds	r0, #1
 80094b2:	d09b      	beq.n	80093ec <_printf_i+0x164>
 80094b4:	3501      	adds	r5, #1
 80094b6:	68e3      	ldr	r3, [r4, #12]
 80094b8:	9903      	ldr	r1, [sp, #12]
 80094ba:	1a5b      	subs	r3, r3, r1
 80094bc:	42ab      	cmp	r3, r5
 80094be:	dcf2      	bgt.n	80094a6 <_printf_i+0x21e>
 80094c0:	e7eb      	b.n	800949a <_printf_i+0x212>
 80094c2:	2500      	movs	r5, #0
 80094c4:	f104 0619 	add.w	r6, r4, #25
 80094c8:	e7f5      	b.n	80094b6 <_printf_i+0x22e>
 80094ca:	bf00      	nop
 80094cc:	08009d35 	.word	0x08009d35
 80094d0:	08009d46 	.word	0x08009d46

080094d4 <_sbrk_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	4d06      	ldr	r5, [pc, #24]	; (80094f0 <_sbrk_r+0x1c>)
 80094d8:	2300      	movs	r3, #0
 80094da:	4604      	mov	r4, r0
 80094dc:	4608      	mov	r0, r1
 80094de:	602b      	str	r3, [r5, #0]
 80094e0:	f7f8 ffb8 	bl	8002454 <_sbrk>
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	d102      	bne.n	80094ee <_sbrk_r+0x1a>
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	b103      	cbz	r3, 80094ee <_sbrk_r+0x1a>
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	bd38      	pop	{r3, r4, r5, pc}
 80094f0:	240003c4 	.word	0x240003c4

080094f4 <__sread>:
 80094f4:	b510      	push	{r4, lr}
 80094f6:	460c      	mov	r4, r1
 80094f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fc:	f000 f8ea 	bl	80096d4 <_read_r>
 8009500:	2800      	cmp	r0, #0
 8009502:	bfab      	itete	ge
 8009504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009506:	89a3      	ldrhlt	r3, [r4, #12]
 8009508:	181b      	addge	r3, r3, r0
 800950a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800950e:	bfac      	ite	ge
 8009510:	6563      	strge	r3, [r4, #84]	; 0x54
 8009512:	81a3      	strhlt	r3, [r4, #12]
 8009514:	bd10      	pop	{r4, pc}

08009516 <__swrite>:
 8009516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800951a:	461f      	mov	r7, r3
 800951c:	898b      	ldrh	r3, [r1, #12]
 800951e:	05db      	lsls	r3, r3, #23
 8009520:	4605      	mov	r5, r0
 8009522:	460c      	mov	r4, r1
 8009524:	4616      	mov	r6, r2
 8009526:	d505      	bpl.n	8009534 <__swrite+0x1e>
 8009528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800952c:	2302      	movs	r3, #2
 800952e:	2200      	movs	r2, #0
 8009530:	f000 f868 	bl	8009604 <_lseek_r>
 8009534:	89a3      	ldrh	r3, [r4, #12]
 8009536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800953a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800953e:	81a3      	strh	r3, [r4, #12]
 8009540:	4632      	mov	r2, r6
 8009542:	463b      	mov	r3, r7
 8009544:	4628      	mov	r0, r5
 8009546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800954a:	f000 b817 	b.w	800957c <_write_r>

0800954e <__sseek>:
 800954e:	b510      	push	{r4, lr}
 8009550:	460c      	mov	r4, r1
 8009552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009556:	f000 f855 	bl	8009604 <_lseek_r>
 800955a:	1c43      	adds	r3, r0, #1
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	bf15      	itete	ne
 8009560:	6560      	strne	r0, [r4, #84]	; 0x54
 8009562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800956a:	81a3      	strheq	r3, [r4, #12]
 800956c:	bf18      	it	ne
 800956e:	81a3      	strhne	r3, [r4, #12]
 8009570:	bd10      	pop	{r4, pc}

08009572 <__sclose>:
 8009572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009576:	f000 b813 	b.w	80095a0 <_close_r>
	...

0800957c <_write_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4d07      	ldr	r5, [pc, #28]	; (800959c <_write_r+0x20>)
 8009580:	4604      	mov	r4, r0
 8009582:	4608      	mov	r0, r1
 8009584:	4611      	mov	r1, r2
 8009586:	2200      	movs	r2, #0
 8009588:	602a      	str	r2, [r5, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	f7f8 ff11 	bl	80023b2 <_write>
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	d102      	bne.n	800959a <_write_r+0x1e>
 8009594:	682b      	ldr	r3, [r5, #0]
 8009596:	b103      	cbz	r3, 800959a <_write_r+0x1e>
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	240003c4 	.word	0x240003c4

080095a0 <_close_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	4d06      	ldr	r5, [pc, #24]	; (80095bc <_close_r+0x1c>)
 80095a4:	2300      	movs	r3, #0
 80095a6:	4604      	mov	r4, r0
 80095a8:	4608      	mov	r0, r1
 80095aa:	602b      	str	r3, [r5, #0]
 80095ac:	f7f8 ff1d 	bl	80023ea <_close>
 80095b0:	1c43      	adds	r3, r0, #1
 80095b2:	d102      	bne.n	80095ba <_close_r+0x1a>
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	b103      	cbz	r3, 80095ba <_close_r+0x1a>
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	bd38      	pop	{r3, r4, r5, pc}
 80095bc:	240003c4 	.word	0x240003c4

080095c0 <_fstat_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d07      	ldr	r5, [pc, #28]	; (80095e0 <_fstat_r+0x20>)
 80095c4:	2300      	movs	r3, #0
 80095c6:	4604      	mov	r4, r0
 80095c8:	4608      	mov	r0, r1
 80095ca:	4611      	mov	r1, r2
 80095cc:	602b      	str	r3, [r5, #0]
 80095ce:	f7f8 ff18 	bl	8002402 <_fstat>
 80095d2:	1c43      	adds	r3, r0, #1
 80095d4:	d102      	bne.n	80095dc <_fstat_r+0x1c>
 80095d6:	682b      	ldr	r3, [r5, #0]
 80095d8:	b103      	cbz	r3, 80095dc <_fstat_r+0x1c>
 80095da:	6023      	str	r3, [r4, #0]
 80095dc:	bd38      	pop	{r3, r4, r5, pc}
 80095de:	bf00      	nop
 80095e0:	240003c4 	.word	0x240003c4

080095e4 <_isatty_r>:
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	4d06      	ldr	r5, [pc, #24]	; (8009600 <_isatty_r+0x1c>)
 80095e8:	2300      	movs	r3, #0
 80095ea:	4604      	mov	r4, r0
 80095ec:	4608      	mov	r0, r1
 80095ee:	602b      	str	r3, [r5, #0]
 80095f0:	f7f8 ff17 	bl	8002422 <_isatty>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	d102      	bne.n	80095fe <_isatty_r+0x1a>
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	b103      	cbz	r3, 80095fe <_isatty_r+0x1a>
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	240003c4 	.word	0x240003c4

08009604 <_lseek_r>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	4d07      	ldr	r5, [pc, #28]	; (8009624 <_lseek_r+0x20>)
 8009608:	4604      	mov	r4, r0
 800960a:	4608      	mov	r0, r1
 800960c:	4611      	mov	r1, r2
 800960e:	2200      	movs	r2, #0
 8009610:	602a      	str	r2, [r5, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	f7f8 ff10 	bl	8002438 <_lseek>
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	d102      	bne.n	8009622 <_lseek_r+0x1e>
 800961c:	682b      	ldr	r3, [r5, #0]
 800961e:	b103      	cbz	r3, 8009622 <_lseek_r+0x1e>
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	240003c4 	.word	0x240003c4

08009628 <memmove>:
 8009628:	4288      	cmp	r0, r1
 800962a:	b510      	push	{r4, lr}
 800962c:	eb01 0402 	add.w	r4, r1, r2
 8009630:	d902      	bls.n	8009638 <memmove+0x10>
 8009632:	4284      	cmp	r4, r0
 8009634:	4623      	mov	r3, r4
 8009636:	d807      	bhi.n	8009648 <memmove+0x20>
 8009638:	1e43      	subs	r3, r0, #1
 800963a:	42a1      	cmp	r1, r4
 800963c:	d008      	beq.n	8009650 <memmove+0x28>
 800963e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009642:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009646:	e7f8      	b.n	800963a <memmove+0x12>
 8009648:	4402      	add	r2, r0
 800964a:	4601      	mov	r1, r0
 800964c:	428a      	cmp	r2, r1
 800964e:	d100      	bne.n	8009652 <memmove+0x2a>
 8009650:	bd10      	pop	{r4, pc}
 8009652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800965a:	e7f7      	b.n	800964c <memmove+0x24>

0800965c <__malloc_lock>:
 800965c:	4801      	ldr	r0, [pc, #4]	; (8009664 <__malloc_lock+0x8>)
 800965e:	f7ff bb01 	b.w	8008c64 <__retarget_lock_acquire_recursive>
 8009662:	bf00      	nop
 8009664:	240003b8 	.word	0x240003b8

08009668 <__malloc_unlock>:
 8009668:	4801      	ldr	r0, [pc, #4]	; (8009670 <__malloc_unlock+0x8>)
 800966a:	f7ff bafc 	b.w	8008c66 <__retarget_lock_release_recursive>
 800966e:	bf00      	nop
 8009670:	240003b8 	.word	0x240003b8

08009674 <_realloc_r>:
 8009674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009678:	4680      	mov	r8, r0
 800967a:	4614      	mov	r4, r2
 800967c:	460e      	mov	r6, r1
 800967e:	b921      	cbnz	r1, 800968a <_realloc_r+0x16>
 8009680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009684:	4611      	mov	r1, r2
 8009686:	f7ff bbc1 	b.w	8008e0c <_malloc_r>
 800968a:	b92a      	cbnz	r2, 8009698 <_realloc_r+0x24>
 800968c:	f7ff fb52 	bl	8008d34 <_free_r>
 8009690:	4625      	mov	r5, r4
 8009692:	4628      	mov	r0, r5
 8009694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009698:	f000 f82e 	bl	80096f8 <_malloc_usable_size_r>
 800969c:	4284      	cmp	r4, r0
 800969e:	4607      	mov	r7, r0
 80096a0:	d802      	bhi.n	80096a8 <_realloc_r+0x34>
 80096a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096a6:	d812      	bhi.n	80096ce <_realloc_r+0x5a>
 80096a8:	4621      	mov	r1, r4
 80096aa:	4640      	mov	r0, r8
 80096ac:	f7ff fbae 	bl	8008e0c <_malloc_r>
 80096b0:	4605      	mov	r5, r0
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d0ed      	beq.n	8009692 <_realloc_r+0x1e>
 80096b6:	42bc      	cmp	r4, r7
 80096b8:	4622      	mov	r2, r4
 80096ba:	4631      	mov	r1, r6
 80096bc:	bf28      	it	cs
 80096be:	463a      	movcs	r2, r7
 80096c0:	f7fe ffac 	bl	800861c <memcpy>
 80096c4:	4631      	mov	r1, r6
 80096c6:	4640      	mov	r0, r8
 80096c8:	f7ff fb34 	bl	8008d34 <_free_r>
 80096cc:	e7e1      	b.n	8009692 <_realloc_r+0x1e>
 80096ce:	4635      	mov	r5, r6
 80096d0:	e7df      	b.n	8009692 <_realloc_r+0x1e>
	...

080096d4 <_read_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4d07      	ldr	r5, [pc, #28]	; (80096f4 <_read_r+0x20>)
 80096d8:	4604      	mov	r4, r0
 80096da:	4608      	mov	r0, r1
 80096dc:	4611      	mov	r1, r2
 80096de:	2200      	movs	r2, #0
 80096e0:	602a      	str	r2, [r5, #0]
 80096e2:	461a      	mov	r2, r3
 80096e4:	f7f8 fe48 	bl	8002378 <_read>
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	d102      	bne.n	80096f2 <_read_r+0x1e>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	b103      	cbz	r3, 80096f2 <_read_r+0x1e>
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	bd38      	pop	{r3, r4, r5, pc}
 80096f4:	240003c4 	.word	0x240003c4

080096f8 <_malloc_usable_size_r>:
 80096f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096fc:	1f18      	subs	r0, r3, #4
 80096fe:	2b00      	cmp	r3, #0
 8009700:	bfbc      	itt	lt
 8009702:	580b      	ldrlt	r3, [r1, r0]
 8009704:	18c0      	addlt	r0, r0, r3
 8009706:	4770      	bx	lr

08009708 <_init>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	bf00      	nop
 800970c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970e:	bc08      	pop	{r3}
 8009710:	469e      	mov	lr, r3
 8009712:	4770      	bx	lr

08009714 <_fini>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	bf00      	nop
 8009718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971a:	bc08      	pop	{r3}
 800971c:	469e      	mov	lr, r3
 800971e:	4770      	bx	lr
